# coding: utf-8

"""
    Netilion API Documentation

    Welcome to the Netilion API Documentation, which provides interactive access and documentation to our REST API. Please visit our developer portal for further instructions and information: https://developer.netilion.endress.com/   # noqa: E501

    OpenAPI spec version: 01.00.00
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataExportResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'type': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'created_at': 'str',
        'finished_at': 'str',
        'language': 'str',
        'document_category_id': 'str',
        'export_file_name': 'str',
        'export_content_type': 'str',
        'export_file_size': 'str',
        'export_updated_at': 'str',
        'export_fingerprint': 'str',
        'user': 'NestedIDHref',
        'asset': 'NestedIDHrefSerialnumber',
        'instrumentation': 'NestedIDHrefTag',
        'system': 'NestedIDHrefName',
        'batch': 'NestedIDHrefName',
        'node': 'NestedIDHrefName',
        'purchase_order': 'NestedIDHrefName',
        'download_href': 'str',
        'available_until': 'str',
        'keys': 'list[str]'
    }

    attribute_map = {
        'status': 'status',
        'type': 'type',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'created_at': 'created_at',
        'finished_at': 'finished_at',
        'language': 'language',
        'document_category_id': 'document_category_id',
        'export_file_name': 'export_file_name',
        'export_content_type': 'export_content_type',
        'export_file_size': 'export_file_size',
        'export_updated_at': 'export_updated_at',
        'export_fingerprint': 'export_fingerprint',
        'user': 'user',
        'asset': 'asset',
        'instrumentation': 'instrumentation',
        'system': 'system',
        'batch': 'batch',
        'node': 'node',
        'purchase_order': 'purchase_order',
        'download_href': 'download_href',
        'available_until': 'available_until',
        'keys': 'keys'
    }

    def __init__(self, status=None, type=None, start_date=None, end_date=None, created_at=None, finished_at=None, language=None, document_category_id=None, export_file_name=None, export_content_type=None, export_file_size=None, export_updated_at=None, export_fingerprint=None, user=None, asset=None, instrumentation=None, system=None, batch=None, node=None, purchase_order=None, download_href=None, available_until=None, keys=None):  # noqa: E501
        """DataExportResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._type = None
        self._start_date = None
        self._end_date = None
        self._created_at = None
        self._finished_at = None
        self._language = None
        self._document_category_id = None
        self._export_file_name = None
        self._export_content_type = None
        self._export_file_size = None
        self._export_updated_at = None
        self._export_fingerprint = None
        self._user = None
        self._asset = None
        self._instrumentation = None
        self._system = None
        self._batch = None
        self._node = None
        self._purchase_order = None
        self._download_href = None
        self._available_until = None
        self._keys = None
        self.discriminator = None
        self.status = status
        self.type = type
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        self.created_at = created_at
        if finished_at is not None:
            self.finished_at = finished_at
        if language is not None:
            self.language = language
        if document_category_id is not None:
            self.document_category_id = document_category_id
        if export_file_name is not None:
            self.export_file_name = export_file_name
        if export_content_type is not None:
            self.export_content_type = export_content_type
        if export_file_size is not None:
            self.export_file_size = export_file_size
        if export_updated_at is not None:
            self.export_updated_at = export_updated_at
        if export_fingerprint is not None:
            self.export_fingerprint = export_fingerprint
        self.user = user
        if asset is not None:
            self.asset = asset
        if instrumentation is not None:
            self.instrumentation = instrumentation
        if system is not None:
            self.system = system
        if batch is not None:
            self.batch = batch
        if node is not None:
            self.node = node
        if purchase_order is not None:
            self.purchase_order = purchase_order
        if download_href is not None:
            self.download_href = download_href
        if available_until is not None:
            self.available_until = available_until
        if keys is not None:
            self.keys = keys

    @property
    def status(self):
        """Gets the status of this DataExportResponse.  # noqa: E501


        :return: The status of this DataExportResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataExportResponse.


        :param status: The status of this DataExportResponse.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this DataExportResponse.  # noqa: E501

        can be complete, measurements, batch_values, instrumentation_values, asset_vdi_2770_documentation_container, system_vdi_2770_documentation_container, asset_documents, node_documents_recursive or purchase_order_documents  # noqa: E501

        :return: The type of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataExportResponse.

        can be complete, measurements, batch_values, instrumentation_values, asset_vdi_2770_documentation_container, system_vdi_2770_documentation_container, asset_documents, node_documents_recursive or purchase_order_documents  # noqa: E501

        :param type: The type of this DataExportResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def start_date(self):
        """Gets the start_date of this DataExportResponse.  # noqa: E501


        :return: The start_date of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this DataExportResponse.


        :param start_date: The start_date of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this DataExportResponse.  # noqa: E501


        :return: The end_date of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this DataExportResponse.


        :param end_date: The end_date of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def created_at(self):
        """Gets the created_at of this DataExportResponse.  # noqa: E501


        :return: The created_at of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataExportResponse.


        :param created_at: The created_at of this DataExportResponse.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def finished_at(self):
        """Gets the finished_at of this DataExportResponse.  # noqa: E501


        :return: The finished_at of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this DataExportResponse.


        :param finished_at: The finished_at of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._finished_at = finished_at

    @property
    def language(self):
        """Gets the language of this DataExportResponse.  # noqa: E501

        One language (for vdi 2770 type) or multiple languages (comma list) for asset_documents, node_documents_recursive or purchase_order_documents exports. \"null\" can used as well (for asset_documents, node_documents_recursive or purchase_order_documents exports) to retrieve all documents without any language.  # noqa: E501

        :return: The language of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DataExportResponse.

        One language (for vdi 2770 type) or multiple languages (comma list) for asset_documents, node_documents_recursive or purchase_order_documents exports. \"null\" can used as well (for asset_documents, node_documents_recursive or purchase_order_documents exports) to retrieve all documents without any language.  # noqa: E501

        :param language: The language of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def document_category_id(self):
        """Gets the document_category_id of this DataExportResponse.  # noqa: E501

        One or multiple ids (comma list). This can be used for asset_documents, node_documents_recursive or purchase_order_documents exports. \"null\" can be used to retrieve all documents without any category.  # noqa: E501

        :return: The document_category_id of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._document_category_id

    @document_category_id.setter
    def document_category_id(self, document_category_id):
        """Sets the document_category_id of this DataExportResponse.

        One or multiple ids (comma list). This can be used for asset_documents, node_documents_recursive or purchase_order_documents exports. \"null\" can be used to retrieve all documents without any category.  # noqa: E501

        :param document_category_id: The document_category_id of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._document_category_id = document_category_id

    @property
    def export_file_name(self):
        """Gets the export_file_name of this DataExportResponse.  # noqa: E501


        :return: The export_file_name of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._export_file_name

    @export_file_name.setter
    def export_file_name(self, export_file_name):
        """Sets the export_file_name of this DataExportResponse.


        :param export_file_name: The export_file_name of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._export_file_name = export_file_name

    @property
    def export_content_type(self):
        """Gets the export_content_type of this DataExportResponse.  # noqa: E501


        :return: The export_content_type of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._export_content_type

    @export_content_type.setter
    def export_content_type(self, export_content_type):
        """Sets the export_content_type of this DataExportResponse.


        :param export_content_type: The export_content_type of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._export_content_type = export_content_type

    @property
    def export_file_size(self):
        """Gets the export_file_size of this DataExportResponse.  # noqa: E501


        :return: The export_file_size of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._export_file_size

    @export_file_size.setter
    def export_file_size(self, export_file_size):
        """Sets the export_file_size of this DataExportResponse.


        :param export_file_size: The export_file_size of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._export_file_size = export_file_size

    @property
    def export_updated_at(self):
        """Gets the export_updated_at of this DataExportResponse.  # noqa: E501


        :return: The export_updated_at of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._export_updated_at

    @export_updated_at.setter
    def export_updated_at(self, export_updated_at):
        """Sets the export_updated_at of this DataExportResponse.


        :param export_updated_at: The export_updated_at of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._export_updated_at = export_updated_at

    @property
    def export_fingerprint(self):
        """Gets the export_fingerprint of this DataExportResponse.  # noqa: E501


        :return: The export_fingerprint of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._export_fingerprint

    @export_fingerprint.setter
    def export_fingerprint(self, export_fingerprint):
        """Sets the export_fingerprint of this DataExportResponse.


        :param export_fingerprint: The export_fingerprint of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._export_fingerprint = export_fingerprint

    @property
    def user(self):
        """Gets the user of this DataExportResponse.  # noqa: E501


        :return: The user of this DataExportResponse.  # noqa: E501
        :rtype: NestedIDHref
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DataExportResponse.


        :param user: The user of this DataExportResponse.  # noqa: E501
        :type: NestedIDHref
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def asset(self):
        """Gets the asset of this DataExportResponse.  # noqa: E501


        :return: The asset of this DataExportResponse.  # noqa: E501
        :rtype: NestedIDHrefSerialnumber
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this DataExportResponse.


        :param asset: The asset of this DataExportResponse.  # noqa: E501
        :type: NestedIDHrefSerialnumber
        """

        self._asset = asset

    @property
    def instrumentation(self):
        """Gets the instrumentation of this DataExportResponse.  # noqa: E501


        :return: The instrumentation of this DataExportResponse.  # noqa: E501
        :rtype: NestedIDHrefTag
        """
        return self._instrumentation

    @instrumentation.setter
    def instrumentation(self, instrumentation):
        """Sets the instrumentation of this DataExportResponse.


        :param instrumentation: The instrumentation of this DataExportResponse.  # noqa: E501
        :type: NestedIDHrefTag
        """

        self._instrumentation = instrumentation

    @property
    def system(self):
        """Gets the system of this DataExportResponse.  # noqa: E501


        :return: The system of this DataExportResponse.  # noqa: E501
        :rtype: NestedIDHrefName
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this DataExportResponse.


        :param system: The system of this DataExportResponse.  # noqa: E501
        :type: NestedIDHrefName
        """

        self._system = system

    @property
    def batch(self):
        """Gets the batch of this DataExportResponse.  # noqa: E501


        :return: The batch of this DataExportResponse.  # noqa: E501
        :rtype: NestedIDHrefName
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this DataExportResponse.


        :param batch: The batch of this DataExportResponse.  # noqa: E501
        :type: NestedIDHrefName
        """

        self._batch = batch

    @property
    def node(self):
        """Gets the node of this DataExportResponse.  # noqa: E501


        :return: The node of this DataExportResponse.  # noqa: E501
        :rtype: NestedIDHrefName
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this DataExportResponse.


        :param node: The node of this DataExportResponse.  # noqa: E501
        :type: NestedIDHrefName
        """

        self._node = node

    @property
    def purchase_order(self):
        """Gets the purchase_order of this DataExportResponse.  # noqa: E501


        :return: The purchase_order of this DataExportResponse.  # noqa: E501
        :rtype: NestedIDHrefName
        """
        return self._purchase_order

    @purchase_order.setter
    def purchase_order(self, purchase_order):
        """Sets the purchase_order of this DataExportResponse.


        :param purchase_order: The purchase_order of this DataExportResponse.  # noqa: E501
        :type: NestedIDHrefName
        """

        self._purchase_order = purchase_order

    @property
    def download_href(self):
        """Gets the download_href of this DataExportResponse.  # noqa: E501

        download link  # noqa: E501

        :return: The download_href of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._download_href

    @download_href.setter
    def download_href(self, download_href):
        """Sets the download_href of this DataExportResponse.

        download link  # noqa: E501

        :param download_href: The download_href of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._download_href = download_href

    @property
    def available_until(self):
        """Gets the available_until of this DataExportResponse.  # noqa: E501

        date until the download is available, after that the download will automatically removed  # noqa: E501

        :return: The available_until of this DataExportResponse.  # noqa: E501
        :rtype: str
        """
        return self._available_until

    @available_until.setter
    def available_until(self, available_until):
        """Sets the available_until of this DataExportResponse.

        date until the download is available, after that the download will automatically removed  # noqa: E501

        :param available_until: The available_until of this DataExportResponse.  # noqa: E501
        :type: str
        """

        self._available_until = available_until

    @property
    def keys(self):
        """Gets the keys of this DataExportResponse.  # noqa: E501

        value keys to export (in case of type instrumentation_values)  # noqa: E501

        :return: The keys of this DataExportResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this DataExportResponse.

        value keys to export (in case of type instrumentation_values)  # noqa: E501

        :param keys: The keys of this DataExportResponse.  # noqa: E501
        :type: list[str]
        """

        self._keys = keys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataExportResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataExportResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
