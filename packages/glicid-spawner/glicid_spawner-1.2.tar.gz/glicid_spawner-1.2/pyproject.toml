[tool.poetry]
name = "glicid-spawner"
version = "1.2"
description = "JupyterHub Batch Spawner for GLiCID"
authors = ["Benoit Seignovert <benoit.seignovert@univ-nantes.fr>"]
license = "BSD 3-Clause License"
readme = "README.md"
repository = "https://gitlab.univ-nantes.fr/glicid/jupyter/spawner"
packages = [{ include = "glicid_spawner", from = "src"}]

[tool.poetry.scripts]
glicid-spawner-singleuser = 'glicid_spawner.singleuser:main'

[tool.poetry.plugins."jupyterhub.spawners"]
glicid-spawner = 'glicid_spawner:GlicidSpawner'

[tool.poetry.dependencies]
python = "^3.10"
jupyterhub = "^4.0"
batchspawner = "^1.3.0"
jinja2 = "^3.1.3"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.6.0"
pytest = "^8.0.0"
ruff = "^0.1.14"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.23.5"
flask = "^3.0.2"
livereload = "<2.5.2"  # FIXME: python-livereload#170
tornado = "<6.3.0"     # FIXME: python-livereload#270
tbump = "^6.11.0"

[tool.ruff]
line-length = 100

[tool.ruff.lint]
select = [
    "F",    # Pyflakes
    "E",    # pycodestyle
    "W",    # pycodestyle
    "PL",   # Pylint
    "I",    # isort
    "N",    # pep8-naming
    "C90",  # mccabe
    "UP",   # pyupgrade
    "S",    # flake8-bandit
    "A",    # flake8-builtins
    "B",    # flake8-bugbear
    "SIM",  # flake8-simplify
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "T20",  # flake8-print
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
]
ignore = [
    "COM812",  # disable ruff format warning
    "E501",    # disable ruff line-too-long error
    "S603",    # disable subprocess-without-shell-equals-true (see PyCQA/bandit#333)
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "S101",     # assert
    "PLR2004",  # magic-value-comparison
]

[tool.pytest.ini_options]
minversion = '6.0'
addopts = '--verbose --color=yes --cov=glicid_spawner --cov-report term-missing'
testpaths = ['tests']

[tool.coverage.report]
exclude_lines = [
    'def __repr__',
    'pragma: no cover',
    'raise NotImplementedError',
]

[tool.tbump.version]
current = "1.2"
regex = '(?P<major>\d+)\.(?P<patch>\d+)'

[tool.tbump.git]
message_template = "Bump to version {new_version}"
tag_template = "v{new_version}"

[[tool.tbump.file]]
src = "pyproject.toml"
search = 'version = "{current_version}"'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
