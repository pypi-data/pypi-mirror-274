[project]
name = "deps_rocker"
version = "0.1.7"
license = { text = "MIT" }

authors = [{ name = "Austin Gregg-Smith", email = "blooop@gmail.com" }]
description = "A rocker plugin to help installing apt and pip dependencies"
readme = "README.md"

requires-python = ">=3.10"

dependencies = ["rocker","pyyaml","off-your-rocker","toml"]

[project.optional-dependencies]
test = [
  "black>=23,<=24.4.2",
  "pylint>=2.16,<=3.2.0",
  "pytest-cov>=4.1,<=5.0.0",
  "pytest>=7.4,<=8.2.0",
  "hypothesis>=6.82,<=6.102.4",
  "ruff>=0.0.280,<=0.4.4",
  "coverage>=7.2.7,<=7.5.1",
]

[project.urls]
Source = "https://github.com/blooop/deps_rocker"
Home = "https://github.com/blooop/deps_rocker"

[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[tool.flit.sdist]
include = ["deps_rocker/templates/*.Dockerfile"]

[project.scripts]
deps-rocker = "deps_rocker.dep_rocker_cli:gen_dockerfile"

[project.entry-points."rocker.extensions"]
odeps_dependencies = "deps_rocker.dependencies:Dependencies"


[tool.pylint]
jobs = 16                           #detect number of cores

[tool.pylint.'MESSAGES CONTROL']
disable = "C,logging-fstring-interpolation,line-too-long,fixme,broad-exception-caught,missing-module-docstring,too-many-instance-attributes,too-few-public-methods,too-many-arguments,too-many-locals,too-many-branches,too-many-statements,use-dict-literal,cyclic-import,duplicate-code,too-many-public-methods"
enable = "no-else-return,consider-using-in"

[tool.black]
line-length = 100

[tool.ruff]
# Never enforce `E501` (line length violations).
#"F841" will auto remove unused variables which is annoying during development, pylint catches this anyway
lint.ignore = ["E501", "E902", "F841"]

# Same as Black.
line-length = 100

target-version = "py310"

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]


[tool.coverage.run]
omit = ["*/test/*", "__init__.py"]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if False:",
  "if 0:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
]
