# For detailed explaination on how to write policy models:
# visit: https://casbin.org/docs/en/syntax-for-models

[request_definition]
# This is the definition for the access request.
# sub - accessing entity (Subject)
# obj - accessed resource (Object)
# act - access method (Action)
r = sub, obj, act

[policy_definition]
# This is the definition of the policy.
# Each policy rule starts with a policy type, e.g., p, p2.
# It is used to match the policy definition if there are multiple definitions.
p = sub, obj, act

[role_definition]
# This is the definition for the RBAC role inheritance relation.
# This role definition shows that g is a RBAC system, and g2 is another RBAC system. 
# _, _ means there are two parties inside an inheritance relation.
g = _, _
g2 = _, _

[policy_effect]
# This is the definition for the policy effect. It defines whether the access request
# should be approved if multiple policy rules match the request.
# The above policy effect means if there's any matched policy rule of allow, the final
# effect is allow (aka allow-override). p.eft is the effect for a policy, it can be
# allow or deny. It's optional and the default value is allow.
e = some(where (p.eft == allow))

[matchers]
# This is the definition for policy matchers. The matchers are expressions. It defines
# how the policy rules are evaluated against the request.
# The above matcher is the simplest, it means that the subject, object and action in
# a request should match the ones in a policy rule.
# You can use arithmetic like +, -, *, / and logical operators like &&, ||, ! in
# matchers.
m = g(r.sub, p.sub) && g2(r.obj, p.obj) && r.act == p.act
