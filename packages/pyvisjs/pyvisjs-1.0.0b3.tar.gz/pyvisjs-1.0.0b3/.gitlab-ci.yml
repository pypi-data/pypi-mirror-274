stages:
#  - setup
#  - build
  - test
  - tag
  - deploy

#variables:
#  ENVIRONMENT: production

before_script:
  - echo "Setting up environment..."

#build:
#  stage: build
#  script:
#    - echo "Building the application..."

pytest:
  stage: test
  image: python:latest
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -e .
  script:
    - pytest --noconftest
  rules:
    - changes:
        - pyvisjs/[^_]*.py
        - tests/*.py
#  except:
#    - dev
#  only:
#    - dev

tagging:
  stage: tag
  image: python:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TITLE =~ /Merge branch.*/'
#  only:
#    - main
  script:
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - tag=$(python -c "exec(open('./pyvisjs/_version.py').read()); print(__version__)")
    - git tag -a "$tag" -m "Release version $tag"
  #  - git push https://api:$ACCESS_TOKEN@gitlab.com/22kittens/pyvisjs.git "$tag"
    - git push https://api:$ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git "$tag"



deploy_to_pypi:
  stage: deploy
  image: python:latest
  before_script:
    - pip install --upgrade pip
    - pip install --upgrade setuptools
    - pip install --upgrade build
    - pip install --upgrade twine
    - pip install -r requirements.txt
  script:
    - python -m build
    - python -m twine upload --repository pypi --username $TWINE_USERNAME --password $TWINE_PASSWORD dist/*
  only:
    - tags



after_script:
  - echo "Cleaning up..."
