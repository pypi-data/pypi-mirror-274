"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ...models.components import httpmetadata as components_httpmetadata
from ...models.components import searchresultitem as components_searchresultitem
from dataclasses_json import Undefined, dataclass_json
from keymateapi import utils
from typing import Any, Dict, List, Optional


@dataclasses.dataclass
class InternetsearchRequest:
    inputwindowwords: str = dataclasses.field(metadata={'query_param': { 'field_name': 'inputwindowwords', 'style': 'form', 'explode': True }})
    r"""Set it as '8000' first if responsetoolarge occurs reduce it to 1000."""
    q: str = dataclasses.field(metadata={'query_param': { 'field_name': 'q', 'style': 'form', 'explode': True }})
    r"""Search query"""
    percentile: str = dataclasses.field(metadata={'query_param': { 'field_name': 'percentile', 'style': 'form', 'explode': True }})
    r"""Start it as '1', increase to '6' if ResponseTooLarge occurs, only reduce to '3' or '4' if user requests it."""
    numofpages: str = dataclasses.field(metadata={'query_param': { 'field_name': 'numofpages', 'style': 'form', 'explode': True }})
    r"""Start it as '6'. Retry the request by decreasing only this one if 'ResponseTooLarge' occurs. Should be between 1 and 10."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InternetsearchResponseResponseBody:
    r"""Generic or unexpected error."""
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class InternetsearchResponseBody:
    r"""Successful search operation. Returns data based on query and user's plan."""
    UNSET='__SPEAKEASY_UNSET__'
    currentkeymateuser: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('currentkeymateuser'), 'exclude': lambda f: f is None }})
    notice_for_human: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('noticeForHuman'), 'exclude': lambda f: f is None }})
    results: Optional[List[components_searchresultitem.SearchResultItem]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('results'), 'exclude': lambda f: f is None }})
    rules: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('rules'), 'exclude': lambda f: f is None }})
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    additional_properties: Optional[Dict[str, Any]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'exclude': lambda f: f is None }})
    



@dataclasses.dataclass
class InternetsearchResponse:
    http_meta: components_httpmetadata.HTTPMetadata = dataclasses.field()
    two_hundred_application_json_object: Optional[InternetsearchResponseBody] = dataclasses.field(default=None)
    r"""Successful search operation. Returns data based on query and user's plan."""
    default_application_json_object: Optional[InternetsearchResponseResponseBody] = dataclasses.field(default=None)
    r"""Generic or unexpected error."""
    

