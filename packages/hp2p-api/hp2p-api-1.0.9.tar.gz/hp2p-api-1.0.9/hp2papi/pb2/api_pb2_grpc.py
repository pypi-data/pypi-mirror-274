# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import api_pb2 as api__pb2


class Hp2pApiProtoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ready = channel.unary_unary(
                '/hp2pApiProto.Hp2pApiProto/Ready',
                request_serializer=api__pb2.ReadyRequest.SerializeToString,
                response_deserializer=api__pb2.ReadyResponse.FromString,
                )
        self.Heartbeat = channel.unary_unary(
                '/hp2pApiProto.Hp2pApiProto/Heartbeat',
                request_serializer=api__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=api__pb2.HeartbeatResponse.FromString,
                )
        self.SessionChange = channel.unary_unary(
                '/hp2pApiProto.Hp2pApiProto/SessionChange',
                request_serializer=api__pb2.SessionChangeRequest.SerializeToString,
                response_deserializer=api__pb2.SessionChangeResponse.FromString,
                )
        self.SessionTermination = channel.unary_unary(
                '/hp2pApiProto.Hp2pApiProto/SessionTermination',
                request_serializer=api__pb2.SessionTerminateRequest.SerializeToString,
                response_deserializer=api__pb2.SessionTerminateResponse.FromString,
                )
        self.PeerChange = channel.unary_unary(
                '/hp2pApiProto.Hp2pApiProto/PeerChange',
                request_serializer=api__pb2.PeerChangeRequest.SerializeToString,
                response_deserializer=api__pb2.PeerChangeResponse.FromString,
                )
        self.Expulsion = channel.unary_unary(
                '/hp2pApiProto.Hp2pApiProto/Expulsion',
                request_serializer=api__pb2.ExpulsionRequest.SerializeToString,
                response_deserializer=api__pb2.ExpulsionResponse.FromString,
                )
        self.Data = channel.unary_unary(
                '/hp2pApiProto.Hp2pApiProto/Data',
                request_serializer=api__pb2.DataRequest.SerializeToString,
                response_deserializer=api__pb2.DataResponse.FromString,
                )
        self.Homp = channel.stream_stream(
                '/hp2pApiProto.Hp2pApiProto/Homp',
                request_serializer=api__pb2.Response.SerializeToString,
                response_deserializer=api__pb2.Request.FromString,
                )


class Hp2pApiProtoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ready(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SessionChange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SessionTermination(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PeerChange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Expulsion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Homp(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Hp2pApiProtoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ready': grpc.unary_unary_rpc_method_handler(
                    servicer.Ready,
                    request_deserializer=api__pb2.ReadyRequest.FromString,
                    response_serializer=api__pb2.ReadyResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=api__pb2.HeartbeatRequest.FromString,
                    response_serializer=api__pb2.HeartbeatResponse.SerializeToString,
            ),
            'SessionChange': grpc.unary_unary_rpc_method_handler(
                    servicer.SessionChange,
                    request_deserializer=api__pb2.SessionChangeRequest.FromString,
                    response_serializer=api__pb2.SessionChangeResponse.SerializeToString,
            ),
            'SessionTermination': grpc.unary_unary_rpc_method_handler(
                    servicer.SessionTermination,
                    request_deserializer=api__pb2.SessionTerminateRequest.FromString,
                    response_serializer=api__pb2.SessionTerminateResponse.SerializeToString,
            ),
            'PeerChange': grpc.unary_unary_rpc_method_handler(
                    servicer.PeerChange,
                    request_deserializer=api__pb2.PeerChangeRequest.FromString,
                    response_serializer=api__pb2.PeerChangeResponse.SerializeToString,
            ),
            'Expulsion': grpc.unary_unary_rpc_method_handler(
                    servicer.Expulsion,
                    request_deserializer=api__pb2.ExpulsionRequest.FromString,
                    response_serializer=api__pb2.ExpulsionResponse.SerializeToString,
            ),
            'Data': grpc.unary_unary_rpc_method_handler(
                    servicer.Data,
                    request_deserializer=api__pb2.DataRequest.FromString,
                    response_serializer=api__pb2.DataResponse.SerializeToString,
            ),
            'Homp': grpc.stream_stream_rpc_method_handler(
                    servicer.Homp,
                    request_deserializer=api__pb2.Response.FromString,
                    response_serializer=api__pb2.Request.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hp2pApiProto.Hp2pApiProto', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Hp2pApiProto(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ready(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hp2pApiProto.Hp2pApiProto/Ready',
            api__pb2.ReadyRequest.SerializeToString,
            api__pb2.ReadyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hp2pApiProto.Hp2pApiProto/Heartbeat',
            api__pb2.HeartbeatRequest.SerializeToString,
            api__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SessionChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hp2pApiProto.Hp2pApiProto/SessionChange',
            api__pb2.SessionChangeRequest.SerializeToString,
            api__pb2.SessionChangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SessionTermination(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hp2pApiProto.Hp2pApiProto/SessionTermination',
            api__pb2.SessionTerminateRequest.SerializeToString,
            api__pb2.SessionTerminateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PeerChange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hp2pApiProto.Hp2pApiProto/PeerChange',
            api__pb2.PeerChangeRequest.SerializeToString,
            api__pb2.PeerChangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Expulsion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hp2pApiProto.Hp2pApiProto/Expulsion',
            api__pb2.ExpulsionRequest.SerializeToString,
            api__pb2.ExpulsionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/hp2pApiProto.Hp2pApiProto/Data',
            api__pb2.DataRequest.SerializeToString,
            api__pb2.DataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Homp(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/hp2pApiProto.Hp2pApiProto/Homp',
            api__pb2.Response.SerializeToString,
            api__pb2.Request.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
