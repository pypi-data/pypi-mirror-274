{"version":3,"file":"node_modules_hookstate_subscribable_dist_index_es_js.215a179d02b5960bcd53.js","mappings":";;;;;;;;;;;;;;;;;SAOgB,YAAY;IAExB,IAAM,WAAW,GAAsB,EAAE,CAAC;AAC1C,QAAI,WAAyB,CAAC;IAE9B,OAAO,cAAM,QAAC;QACV,QAAQ,EAAE,UAAC,CAAC;YACR,WAAW,GAAG,CAAC;AACf,qBAAS,UAAU,CAAC,EAAQ,EAAE,EAAQ;AAClC,oBAAI,EAAE,CAAC,MAAM,KAAK,EAAE,CAAC,MAAM,EAAE;AACzB,2BAAO,KAAK;AACf;AACD,qBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;oBACnC,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE;AACjB,+BAAO,KAAK;AACf;AACJ;AACD,uBAAO,IAAI;aACd;YAED,OAAO;AACH,yBAAS,EAAE,UAAC,KAAK,EAAK,mBAAC,EAAE;AACrB,wBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAC,IAAI,iBAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAA3C,EAA2C,CAAC,EAAE;wBACrE,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AACrC;oBACD,OAAO;AACH,4BAAI,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,WAAC,EAAI,mBAAU,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAA3C,EAA2C,CAAC;AACnF,4BAAI,KAAK,KAAK,CAAC,CAAC,EAAE;AACd,uCAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;AAC/B;AACL,qBAAC;AACL,iBAAC;aACJ;SACJ;AACD,aAAK,EAAE,UAAC,CAAC,EAAE,CAAC;AACR,qBAAS,cAAc,CAAC,EAAQ,EAAE,EAAQ;AACtC,oBAAI,EAAE,CAAC,MAAM,GAAG,EAAE,CAAC,MAAM,EAAE;AACvB,2BAAO,KAAK;AACf;AACD,qBAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;oBACnC,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE;AACjB,+BAAO,KAAK;AACf;AACJ;AACD,uBAAO,IAAI;aACd;YACD,SAAS,cAAc,CAAC,IAAU;AAC9B,oBAAI,MAAM,GAAG,WAAW,CAAC,KAAK;AAC9B,qBAAc,UAAI,EAAJ,aAAI,EAAJ,EAAI,kBAAJ,IAAI,EAAE;AAAf,wBAAI,CAAC;AACN,wBAAI,MAAM,KAAK,SAAS,IAAI,MAAM,IAAI,IAAI,EAAE;AACxC,+BAAO,iDAAI;AACd;AACD,0BAAM,GAAG,MAAM,CAAC,CAAC,CAAC;AACrB;AACD,uBAAO,MAAM;aAChB;AAED,gBAAI,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,KAAK,EAAE;gBACtB,OAAO;AACV;AACD,iBAAuB,UAAW,EAAX,2BAAW,EAAX,EAAW,yBAAX,IAAW,EAAE;AAA/B,oBAAI,UAAU;;;;;;;;;;;gBAWf,IAAI,cAAc,CAAC,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE;oBAChF,IAAI,CAAC,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACrC,IAAI,CAAC,KAAK,iDAAI,EAAE;AACZ,kCAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnB;AACJ;AACJ;SACJ;KACJ,EAAC;AACN","sources":["webpack://persist_ext/./node_modules/@hookstate/subscribable/src/subscribable.ts"],"sourcesContent":["\r\nimport { Path, StateValueAtPath, InferStateValueType, ExtensionFactory, State, none } from '@hookstate/core';\r\n\r\nexport interface Subscribable {\r\n    subscribe<S extends InferStateValueType<this>>(callback: (value: S) => void): () => void\r\n}\r\n\r\nexport function subscribable<S, E>(): ExtensionFactory<S, E, Subscribable> {\r\n    type SubscriberEntry = [Path, (value: StateValueAtPath) => void]\r\n    const subscribers: SubscriberEntry[] = [];\r\n    let stateAtRoot: State<S, {}>;\r\n\r\n    return () => ({\r\n        onCreate: (s) => {\r\n            stateAtRoot = s\r\n            function pathsEqual(p1: Path, p2: Path) {\r\n                if (p1.length !== p2.length) {\r\n                    return false\r\n                }\r\n                for (let i = 0; i < p1.length; i += 1) {\r\n                    if (p1[i] !== p2[i]) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            }\r\n\r\n            return {\r\n                subscribe: (state) => (cb) => {\r\n                    if (!subscribers.find(i => pathsEqual(i[0], state.path) && i[1] === cb)) {\r\n                        subscribers.push([state.path, cb])\r\n                    }\r\n                    return () => {\r\n                        let found = subscribers.findIndex(i => pathsEqual(i[0], state.path) && i[1] === cb)\r\n                        if (found !== -1) {\r\n                            subscribers.splice(found, 1)\r\n                        }\r\n                    }\r\n                },\r\n            }\r\n        },\r\n        onSet: (s, d) => {\r\n            function pathStartsWith(p1: Path, p2: Path) {\r\n                if (p1.length < p2.length) {\r\n                    return false\r\n                }\r\n                for (let i = 0; i < p2.length; i += 1) {\r\n                    if (p1[i] !== p2[i]) {\r\n                        return false\r\n                    }\r\n                }\r\n                return true\r\n            }\r\n            function getValueAtPath(path: Path) {\r\n                let result = stateAtRoot.value\r\n                for (let p of path) {\r\n                    if (result === undefined || result == null) {\r\n                        return none\r\n                    }\r\n                    result = result[p]\r\n                }\r\n                return result\r\n            }\r\n\r\n            if (s.promise || s.error) {\r\n                return;\r\n            }\r\n            for (let subscriber of subscribers) {\r\n                // Here is the path match logic\r\n                // If a state is updated at /a/b, then the following subscribers should be invoked\r\n                // - /\r\n                // - /a\r\n                // - /a/b (<-- this one is updated)\r\n                // - /a/b/c\r\n                // and the following should not be invoked\r\n                // - /a/d\r\n                // - /g\r\n                // - /g/f\r\n                if (pathStartsWith(s.path, subscriber[0]) || pathStartsWith(subscriber[0], s.path)) {\r\n                    let v = getValueAtPath(subscriber[0])\r\n                    if (v !== none) {\r\n                        subscriber[1](v)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    })\r\n}\r\n"],"names":[],"sourceRoot":""}