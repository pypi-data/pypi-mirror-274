# Generated from SqlBaseParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,321,2504,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,1,0,1,0,1,0,5,0,248,8,0,10,0,12,0,251,9,0,1,0,
        3,0,254,8,0,1,0,1,0,1,1,1,1,3,1,260,8,1,1,1,1,1,1,2,1,2,1,2,1,3,
        1,3,1,3,3,3,270,8,3,1,3,1,3,3,3,274,8,3,1,3,5,3,277,8,3,10,3,12,
        3,280,9,3,3,3,282,8,3,1,3,1,3,1,3,1,3,3,3,288,8,3,1,3,5,3,291,8,
        3,10,3,12,3,294,9,3,3,3,296,8,3,1,3,1,3,3,3,300,8,3,1,3,1,3,3,3,
        304,8,3,1,3,1,3,1,3,1,3,5,3,310,8,3,10,3,12,3,313,9,3,3,3,315,8,
        3,1,3,1,3,1,3,1,3,1,3,3,3,322,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,5,3,333,8,3,10,3,12,3,336,9,3,1,3,3,3,339,8,3,1,3,3,3,342,
        8,3,1,3,1,3,1,3,1,3,3,3,348,8,3,1,3,1,3,1,3,1,3,1,3,3,3,355,8,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,365,8,3,1,3,1,3,1,3,3,3,370,
        8,3,1,3,1,3,1,3,1,3,1,3,3,3,377,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,
        385,8,3,1,3,1,3,1,3,3,3,390,8,3,1,3,1,3,1,3,3,3,395,8,3,1,3,1,3,
        1,3,1,3,1,3,1,3,5,3,403,8,3,10,3,12,3,406,9,3,1,3,1,3,1,3,1,3,3,
        3,412,8,3,1,3,1,3,1,3,1,3,5,3,418,8,3,10,3,12,3,421,9,3,1,3,1,3,
        3,3,425,8,3,1,3,1,3,1,3,1,3,3,3,431,8,3,1,3,1,3,1,3,1,3,1,3,3,3,
        438,8,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,446,8,3,10,3,12,3,449,9,3,3,
        3,451,8,3,1,3,1,3,1,3,3,3,456,8,3,1,3,1,3,1,3,5,3,461,8,3,10,3,12,
        3,464,9,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,472,8,3,1,3,1,3,1,3,3,3,477,
        8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,486,8,3,10,3,12,3,489,9,3,1,
        3,1,3,3,3,493,8,3,1,3,1,3,3,3,497,8,3,1,3,3,3,500,8,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,3,3,510,8,3,1,3,3,3,513,8,3,1,3,1,3,1,3,1,
        3,1,3,1,3,5,3,521,8,3,10,3,12,3,524,9,3,1,3,1,3,3,3,528,8,3,1,3,
        1,3,1,3,3,3,533,8,3,1,3,1,3,3,3,537,8,3,1,3,1,3,1,3,3,3,542,8,3,
        1,3,3,3,545,8,3,1,3,1,3,3,3,549,8,3,1,3,1,3,3,3,553,8,3,1,3,1,3,
        1,3,1,3,1,3,3,3,560,8,3,3,3,562,8,3,1,3,1,3,1,3,1,3,3,3,568,8,3,
        1,3,1,3,1,3,1,3,1,3,1,3,3,3,576,8,3,3,3,578,8,3,1,3,1,3,1,3,1,3,
        3,3,584,8,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,592,8,3,3,3,594,8,3,1,3,
        1,3,1,3,1,3,3,3,600,8,3,1,3,1,3,1,3,1,3,1,3,3,3,607,8,3,1,3,1,3,
        3,3,611,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,622,8,3,1,3,
        1,3,1,3,1,3,1,3,3,3,629,8,3,1,3,3,3,632,8,3,1,3,1,3,1,3,1,3,3,3,
        638,8,3,3,3,640,8,3,1,4,1,4,1,4,1,4,1,4,3,4,647,8,4,1,4,1,4,1,4,
        1,4,1,4,3,4,654,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,3,4,670,8,4,1,4,1,4,1,4,1,4,1,4,5,4,677,8,4,10,4,12,
        4,680,9,4,3,4,682,8,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,690,8,4,1,4,1,
        4,1,4,1,4,1,4,3,4,697,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,707,
        8,4,1,4,1,4,1,4,1,4,1,4,3,4,714,8,4,1,4,3,4,717,8,4,1,5,1,5,1,5,
        1,5,1,5,1,5,5,5,725,8,5,10,5,12,5,728,9,5,1,5,1,5,1,5,1,5,1,5,1,
        5,5,5,736,8,5,10,5,12,5,739,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,761,8,5,10,5,
        12,5,764,9,5,1,5,1,5,3,5,768,8,5,3,5,770,8,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,786,8,5,10,5,12,5,789,9,
        5,1,5,1,5,3,5,793,8,5,3,5,795,8,5,1,5,1,5,3,5,799,8,5,1,5,1,5,1,
        5,1,5,1,5,1,5,3,5,807,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,817,
        8,5,1,5,1,5,1,5,1,5,3,5,823,8,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,831,
        8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,3,5,851,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,877,
        8,5,1,5,1,5,1,5,3,5,882,8,5,5,5,884,8,5,10,5,12,5,887,9,5,1,5,1,
        5,1,5,1,5,1,5,3,5,894,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,
        6,905,8,6,1,7,3,7,908,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,5,8,918,
        8,8,10,8,12,8,921,9,8,3,8,923,8,8,1,8,3,8,926,8,8,1,8,3,8,929,8,
        8,1,8,3,8,932,8,8,1,8,3,8,935,8,8,3,8,937,8,8,1,9,1,9,1,9,3,9,942,
        8,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,950,8,9,1,10,1,10,1,10,3,10,955,
        8,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,963,8,11,1,11,1,11,1,11,
        3,11,968,8,11,1,11,5,11,971,8,11,10,11,12,11,974,9,11,1,12,1,12,
        1,13,1,13,3,13,980,8,13,1,13,1,13,3,13,984,8,13,1,14,1,14,3,14,988,
        8,14,1,14,1,14,1,14,5,14,993,8,14,10,14,12,14,996,9,14,1,14,1,14,
        1,14,1,14,5,14,1002,8,14,10,14,12,14,1005,9,14,3,14,1007,8,14,1,
        14,3,14,1010,8,14,1,14,1,14,1,14,1,14,1,14,5,14,1017,8,14,10,14,
        12,14,1020,9,14,3,14,1022,8,14,1,14,1,14,3,14,1026,8,14,1,14,1,14,
        1,14,1,14,5,14,1032,8,14,10,14,12,14,1035,9,14,3,14,1037,8,14,1,
        14,1,14,1,14,1,14,5,14,1043,8,14,10,14,12,14,1046,9,14,3,14,1048,
        8,14,1,15,1,15,3,15,1052,8,15,1,15,3,15,1055,8,15,1,15,1,15,1,15,
        1,15,1,15,3,15,1062,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,
        1071,8,17,10,17,12,17,1074,9,17,1,18,1,18,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,3,19,1098,8,19,5,19,1100,8,19,10,19,12,19,1103,9,19,
        1,20,3,20,1106,8,20,1,20,1,20,3,20,1110,8,20,1,20,1,20,3,20,1114,
        8,20,1,20,1,20,3,20,1118,8,20,3,20,1120,8,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,5,21,1129,8,21,10,21,12,21,1132,9,21,1,21,1,21,3,
        21,1136,8,21,1,22,1,22,3,22,1140,8,22,1,22,1,22,3,22,1144,8,22,3,
        22,1146,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,1157,
        8,23,1,24,1,24,1,24,1,24,1,24,1,24,5,24,1165,8,24,10,24,12,24,1168,
        9,24,1,24,1,24,3,24,1172,8,24,1,25,1,25,1,25,1,25,3,25,1178,8,25,
        1,25,1,25,5,25,1182,8,25,10,25,12,25,1185,9,25,1,25,1,25,3,25,1189,
        8,25,1,26,1,26,1,26,1,26,5,26,1195,8,26,10,26,12,26,1198,9,26,1,
        26,1,26,1,27,1,27,1,27,1,27,5,27,1206,8,27,10,27,12,27,1209,9,27,
        1,28,1,28,3,28,1213,8,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,
        1235,8,30,3,30,1237,8,30,3,30,1239,8,30,1,30,1,30,1,30,1,30,1,30,
        1,30,5,30,1247,8,30,10,30,12,30,1250,9,30,1,31,1,31,3,31,1254,8,
        31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1264,8,32,1,32,1,
        32,1,32,1,32,1,32,1,32,3,32,1272,8,32,1,32,1,32,1,32,1,32,1,32,5,
        32,1279,8,32,10,32,12,32,1282,9,32,1,32,1,32,1,32,3,32,1287,8,32,
        1,32,1,32,1,32,3,32,1292,8,32,1,32,1,32,1,32,1,32,3,32,1298,8,32,
        1,32,3,32,1301,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,1310,
        8,32,1,32,1,32,3,32,1314,8,32,1,32,1,32,1,32,3,32,1319,8,32,1,32,
        1,32,1,32,3,32,1324,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,
        1333,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
        1,33,5,33,1347,8,33,10,33,12,33,1350,9,33,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,3,34,1360,8,34,1,34,3,34,1363,8,34,1,34,1,34,1,
        34,1,34,3,34,1369,8,34,1,34,1,34,1,34,5,34,1374,8,34,10,34,12,34,
        1377,9,34,3,34,1379,8,34,1,34,1,34,3,34,1383,8,34,1,34,1,34,3,34,
        1387,8,34,1,34,3,34,1390,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,
        1411,8,34,10,34,12,34,1414,9,34,1,34,3,34,1417,8,34,1,34,3,34,1420,
        8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,3,34,1435,8,34,1,34,1,34,3,34,1439,8,34,1,34,1,34,1,34,1,34,
        5,34,1445,8,34,10,34,12,34,1448,9,34,1,35,1,35,1,35,1,35,1,35,1,
        35,3,35,1456,8,35,1,35,1,35,1,35,1,35,1,35,3,35,1463,8,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,1489,8,35,1,
        35,1,35,1,35,1,35,1,35,3,35,1496,8,35,1,35,3,35,1499,8,35,1,35,3,
        35,1502,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,1,35,1,35,4,35,1531,8,35,11,35,12,35,1532,1,35,1,35,3,35,
        1537,8,35,1,35,1,35,1,35,1,35,4,35,1543,8,35,11,35,12,35,1544,1,
        35,1,35,3,35,1549,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,3,35,1560,8,35,1,35,1,35,1,35,1,35,3,35,1566,8,35,1,36,1,36,1,
        36,1,36,1,37,1,37,3,37,1574,8,37,1,37,1,37,1,37,1,37,5,37,1580,8,
        37,10,37,12,37,1583,9,37,3,37,1585,8,37,1,37,1,37,1,37,1,37,1,37,
        5,37,1592,8,37,10,37,12,37,1595,9,37,3,37,1597,8,37,1,37,3,37,1600,
        8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,1610,8,38,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1633,8,39,1,40,1,40,3,40,
        1637,8,40,1,41,1,41,3,41,1641,8,41,1,42,1,42,1,42,3,42,1646,8,42,
        1,43,1,43,1,44,1,44,1,45,1,45,5,45,1654,8,45,10,45,12,45,1657,9,
        45,1,45,1,45,1,46,1,46,3,46,1663,8,46,1,47,1,47,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,1,48,5,48,1675,8,48,10,48,12,48,1678,9,48,1,49,
        1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,
        1,53,1,53,1,54,1,54,1,54,3,54,1699,8,54,1,54,1,54,1,54,1,54,1,54,
        5,54,1706,8,54,10,54,12,54,1709,9,54,3,54,1711,8,54,1,54,1,54,1,
        54,1,54,1,54,5,54,1718,8,54,10,54,12,54,1721,9,54,3,54,1723,8,54,
        1,54,3,54,1726,8,54,1,54,3,54,1729,8,54,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1747,
        8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1758,8,56,
        1,57,1,57,1,57,5,57,1763,8,57,10,57,12,57,1766,9,57,1,58,1,58,1,
        58,5,58,1771,8,58,10,58,12,58,1774,9,58,1,59,1,59,5,59,1778,8,59,
        10,59,12,59,1781,9,59,1,60,1,60,3,60,1785,8,60,1,61,1,61,1,61,5,
        61,1790,8,61,10,61,12,61,1793,9,61,1,62,1,62,3,62,1797,8,62,1,63,
        1,63,1,63,3,63,1802,8,63,1,64,1,64,3,64,1806,8,64,1,65,1,65,3,65,
        1810,8,65,1,66,1,66,1,66,3,66,1815,8,66,1,67,1,67,3,67,1819,8,67,
        1,68,1,68,3,68,1823,8,68,1,68,1,68,1,68,1,68,3,68,1829,8,68,1,69,
        1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,
        1,74,1,74,1,74,3,74,1848,8,74,1,75,1,75,1,75,3,75,1853,8,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,5,75,1866,8,75,
        10,75,12,75,1869,9,75,3,75,1871,8,75,1,76,1,76,1,76,1,76,5,76,1877,
        8,76,10,76,12,76,1880,9,76,1,76,1,76,1,77,1,77,1,77,1,77,5,77,1888,
        8,77,10,77,12,77,1891,9,77,1,77,1,77,1,78,1,78,1,78,1,78,5,78,1899,
        8,78,10,78,12,78,1902,9,78,1,78,1,78,1,79,1,79,1,79,1,79,1,80,1,
        80,1,80,1,80,1,80,3,80,1915,8,80,1,80,1,80,1,80,1,80,1,80,5,80,1922,
        8,80,10,80,12,80,1925,9,80,1,80,1,80,1,80,3,80,1930,8,80,1,80,1,
        80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1943,8,80,1,
        80,3,80,1946,8,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1954,8,80,1,
        80,1,80,1,80,1,80,1,80,1,80,3,80,1962,8,80,1,80,3,80,1965,8,80,1,
        80,1,80,1,80,1,80,1,80,3,80,1972,8,80,1,80,3,80,1975,8,80,1,80,1,
        80,1,80,1,80,5,80,1981,8,80,10,80,12,80,1984,9,80,1,80,1,80,1,80,
        1,80,1,80,3,80,1991,8,80,1,80,1,80,1,80,1,80,1,80,1,80,5,80,1999,
        8,80,10,80,12,80,2002,9,80,3,80,2004,8,80,1,80,1,80,1,80,1,80,1,
        80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2019,8,80,1,80,3,
        80,2022,8,80,1,80,1,80,3,80,2026,8,80,3,80,2028,8,80,3,80,2030,8,
        80,1,80,1,80,1,80,3,80,2035,8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,
        80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2052,8,80,1,80,1,
        80,1,80,3,80,2057,8,80,5,80,2059,8,80,10,80,12,80,2062,9,80,3,80,
        2064,8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2074,8,80,
        3,80,2076,8,80,1,81,3,81,2079,8,81,1,81,1,81,1,82,1,82,1,82,3,82,
        2086,8,82,1,83,1,83,1,84,3,84,2091,8,84,1,84,3,84,2094,8,84,1,84,
        3,84,2097,8,84,1,84,3,84,2100,8,84,3,84,2102,8,84,1,85,1,85,1,85,
        1,85,1,86,1,86,1,86,1,86,1,86,1,86,3,86,2114,8,86,1,86,1,86,1,86,
        1,86,3,86,2120,8,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,
        1,88,1,88,1,88,1,88,1,88,1,88,3,88,2137,8,88,1,88,3,88,2140,8,88,
        1,89,1,89,3,89,2144,8,89,1,89,5,89,2147,8,89,10,89,12,89,2150,9,
        89,1,90,1,90,3,90,2154,8,90,1,90,1,90,3,90,2158,8,90,1,90,5,90,2161,
        8,90,10,90,12,90,2164,9,90,1,91,1,91,3,91,2168,8,91,1,91,1,91,3,
        91,2172,8,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
        92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,
        92,3,92,2198,8,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,2206,8,92,3,
        92,2208,8,92,1,93,1,93,1,93,1,93,1,93,1,93,5,93,2216,8,93,10,93,
        12,93,2219,9,93,1,93,1,93,3,93,2223,8,93,1,93,1,93,1,93,1,93,1,93,
        1,93,3,93,2231,8,93,1,93,1,93,5,93,2235,8,93,10,93,12,93,2238,9,
        93,1,94,1,94,3,94,2242,8,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,
        95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,2261,8,95,1,
        96,1,96,1,96,1,96,3,96,2267,8,96,1,96,1,96,1,96,1,96,1,96,5,96,2274,
        8,96,10,96,12,96,2277,9,96,1,96,1,96,3,96,2281,8,96,1,97,1,97,1,
        97,1,97,1,97,1,97,1,97,1,97,3,97,2291,8,97,1,97,1,97,1,97,1,97,1,
        97,1,97,3,97,2299,8,97,1,97,1,97,1,97,1,97,3,97,2305,8,97,1,97,1,
        97,3,97,2309,8,97,1,97,1,97,1,97,3,97,2314,8,97,1,98,1,98,3,98,2318,
        8,98,1,98,1,98,1,99,1,99,3,99,2324,8,99,1,99,1,99,1,99,1,99,1,99,
        1,100,1,100,1,100,1,100,1,100,1,101,1,101,1,101,5,101,2339,8,101,
        10,101,12,101,2342,9,101,1,102,1,102,1,102,1,102,1,103,1,103,1,103,
        1,103,5,103,2352,8,103,10,103,12,103,2355,9,103,1,103,1,103,1,104,
        1,104,3,104,2361,8,104,1,105,1,105,1,105,1,105,1,105,5,105,2368,
        8,105,10,105,12,105,2371,9,105,1,105,1,105,3,105,2375,8,105,1,106,
        1,106,3,106,2379,8,106,1,107,1,107,1,107,1,107,3,107,2385,8,107,
        1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,5,109,2395,8,109,
        10,109,12,109,2398,9,109,1,109,1,109,1,110,1,110,1,110,1,110,1,110,
        5,110,2407,8,110,10,110,12,110,2410,9,110,1,110,1,110,1,111,1,111,
        3,111,2416,8,111,1,112,1,112,1,112,5,112,2421,8,112,10,112,12,112,
        2424,9,112,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,
        3,114,2435,8,114,1,115,1,115,1,116,1,116,1,117,1,117,1,117,1,117,
        1,117,1,117,1,117,3,117,2448,8,117,1,117,3,117,2451,8,117,1,117,
        3,117,2454,8,117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,3,118,
        2463,8,118,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,3,119,
        2473,8,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
        1,119,1,119,1,119,1,119,3,119,2488,8,119,1,120,1,120,1,120,1,120,
        3,120,2494,8,120,1,120,5,120,2497,8,120,10,120,12,120,2500,9,120,
        1,121,1,121,1,121,0,7,22,38,60,66,68,96,186,122,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,0,33,1,0,145,146,2,0,3,3,22,22,1,0,140,
        141,2,0,4,4,273,273,1,0,240,241,2,0,7,7,168,171,1,0,91,92,1,0,245,
        246,1,0,110,111,3,0,108,108,196,196,215,215,2,0,36,36,38,38,2,0,
        85,85,90,90,1,0,199,200,2,0,7,7,12,12,1,0,40,41,1,0,36,37,1,0,26,
        27,1,0,284,285,1,0,286,288,1,0,304,306,1,0,32,33,2,0,60,60,245,245,
        1,0,44,46,1,0,273,283,1,0,7,9,1,0,87,88,1,0,50,55,1,0,30,31,1,0,
        258,259,1,0,229,231,1,0,164,166,3,0,96,96,192,192,251,251,38,0,1,
        1,4,4,6,6,10,10,27,27,32,33,35,35,38,38,42,46,48,59,69,69,80,85,
        87,90,92,92,95,95,97,104,106,107,110,132,134,134,136,157,160,160,
        162,162,164,164,166,171,173,173,175,181,184,195,197,197,201,203,
        207,207,210,214,218,220,222,225,227,231,233,239,243,244,246,246,
        250,272,2881,0,244,1,0,0,0,2,257,1,0,0,0,4,263,1,0,0,0,6,639,1,0,
        0,0,8,716,1,0,0,0,10,893,1,0,0,0,12,904,1,0,0,0,14,907,1,0,0,0,16,
        911,1,0,0,0,18,949,1,0,0,0,20,951,1,0,0,0,22,962,1,0,0,0,24,975,
        1,0,0,0,26,977,1,0,0,0,28,1047,1,0,0,0,30,1061,1,0,0,0,32,1063,1,
        0,0,0,34,1066,1,0,0,0,36,1075,1,0,0,0,38,1080,1,0,0,0,40,1119,1,
        0,0,0,42,1135,1,0,0,0,44,1137,1,0,0,0,46,1156,1,0,0,0,48,1158,1,
        0,0,0,50,1188,1,0,0,0,52,1190,1,0,0,0,54,1201,1,0,0,0,56,1210,1,
        0,0,0,58,1219,1,0,0,0,60,1238,1,0,0,0,62,1251,1,0,0,0,64,1323,1,
        0,0,0,66,1332,1,0,0,0,68,1419,1,0,0,0,70,1565,1,0,0,0,72,1567,1,
        0,0,0,74,1599,1,0,0,0,76,1609,1,0,0,0,78,1632,1,0,0,0,80,1636,1,
        0,0,0,82,1640,1,0,0,0,84,1645,1,0,0,0,86,1647,1,0,0,0,88,1649,1,
        0,0,0,90,1651,1,0,0,0,92,1662,1,0,0,0,94,1664,1,0,0,0,96,1666,1,
        0,0,0,98,1679,1,0,0,0,100,1681,1,0,0,0,102,1683,1,0,0,0,104,1688,
        1,0,0,0,106,1692,1,0,0,0,108,1728,1,0,0,0,110,1746,1,0,0,0,112,1757,
        1,0,0,0,114,1759,1,0,0,0,116,1767,1,0,0,0,118,1775,1,0,0,0,120,1782,
        1,0,0,0,122,1786,1,0,0,0,124,1796,1,0,0,0,126,1801,1,0,0,0,128,1805,
        1,0,0,0,130,1809,1,0,0,0,132,1814,1,0,0,0,134,1818,1,0,0,0,136,1820,
        1,0,0,0,138,1830,1,0,0,0,140,1832,1,0,0,0,142,1834,1,0,0,0,144,1836,
        1,0,0,0,146,1838,1,0,0,0,148,1847,1,0,0,0,150,1870,1,0,0,0,152,1872,
        1,0,0,0,154,1883,1,0,0,0,156,1894,1,0,0,0,158,1905,1,0,0,0,160,2075,
        1,0,0,0,162,2078,1,0,0,0,164,2085,1,0,0,0,166,2087,1,0,0,0,168,2101,
        1,0,0,0,170,2103,1,0,0,0,172,2107,1,0,0,0,174,2121,1,0,0,0,176,2139,
        1,0,0,0,178,2141,1,0,0,0,180,2151,1,0,0,0,182,2165,1,0,0,0,184,2207,
        1,0,0,0,186,2230,1,0,0,0,188,2241,1,0,0,0,190,2260,1,0,0,0,192,2262,
        1,0,0,0,194,2313,1,0,0,0,196,2317,1,0,0,0,198,2323,1,0,0,0,200,2330,
        1,0,0,0,202,2335,1,0,0,0,204,2343,1,0,0,0,206,2347,1,0,0,0,208,2358,
        1,0,0,0,210,2374,1,0,0,0,212,2376,1,0,0,0,214,2384,1,0,0,0,216,2386,
        1,0,0,0,218,2389,1,0,0,0,220,2401,1,0,0,0,222,2413,1,0,0,0,224,2417,
        1,0,0,0,226,2425,1,0,0,0,228,2434,1,0,0,0,230,2436,1,0,0,0,232,2438,
        1,0,0,0,234,2453,1,0,0,0,236,2462,1,0,0,0,238,2487,1,0,0,0,240,2498,
        1,0,0,0,242,2501,1,0,0,0,244,249,3,6,3,0,245,246,5,291,0,0,246,248,
        3,6,3,0,247,245,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,
        1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,252,254,5,291,0,0,253,252,
        1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,256,5,0,0,1,256,1,1,
        0,0,0,257,259,3,6,3,0,258,260,5,291,0,0,259,258,1,0,0,0,259,260,
        1,0,0,0,260,261,1,0,0,0,261,262,5,0,0,1,262,3,1,0,0,0,263,264,3,
        58,29,0,264,265,5,0,0,1,265,5,1,0,0,0,266,640,3,14,7,0,267,269,5,
        142,0,0,268,270,7,0,0,0,269,268,1,0,0,0,269,270,1,0,0,0,270,281,
        1,0,0,0,271,278,3,234,117,0,272,274,5,293,0,0,273,272,1,0,0,0,273,
        274,1,0,0,0,274,275,1,0,0,0,275,277,3,234,117,0,276,273,1,0,0,0,
        277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,282,1,0,0,0,
        280,278,1,0,0,0,281,271,1,0,0,0,281,282,1,0,0,0,282,640,1,0,0,0,
        283,284,5,143,0,0,284,295,5,146,0,0,285,292,3,234,117,0,286,288,
        5,293,0,0,287,286,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,291,
        3,234,117,0,290,287,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,
        293,1,0,0,0,293,296,1,0,0,0,294,292,1,0,0,0,295,285,1,0,0,0,295,
        296,1,0,0,0,296,640,1,0,0,0,297,299,5,144,0,0,298,300,7,0,0,0,299,
        298,1,0,0,0,299,300,1,0,0,0,300,640,1,0,0,0,301,303,5,67,0,0,302,
        304,7,0,0,0,303,302,1,0,0,0,303,304,1,0,0,0,304,640,1,0,0,0,305,
        314,5,175,0,0,306,315,5,164,0,0,307,315,5,166,0,0,308,310,3,206,
        103,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,1,0,0,0,311,312,1,
        0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,314,306,1,0,0,0,314,307,1,
        0,0,0,314,311,1,0,0,0,315,316,1,0,0,0,316,640,3,6,3,0,317,318,5,
        193,0,0,318,319,5,96,0,0,319,321,3,224,112,0,320,322,3,200,100,0,
        321,320,1,0,0,0,321,322,1,0,0,0,322,640,1,0,0,0,323,324,5,194,0,
        0,324,325,5,96,0,0,325,640,3,224,112,0,326,327,5,209,0,0,327,328,
        3,44,22,0,328,329,5,215,0,0,329,334,3,158,79,0,330,331,5,293,0,0,
        331,333,3,158,79,0,332,330,1,0,0,0,333,336,1,0,0,0,334,332,1,0,0,
        0,334,335,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,337,339,3,32,16,
        0,338,337,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,342,3,34,17,
        0,341,340,1,0,0,0,341,342,1,0,0,0,342,640,1,0,0,0,343,344,5,208,
        0,0,344,345,5,3,0,0,345,347,3,44,22,0,346,348,3,32,16,0,347,346,
        1,0,0,0,347,348,1,0,0,0,348,640,1,0,0,0,349,354,5,184,0,0,350,351,
        5,146,0,0,351,352,5,149,0,0,352,355,5,150,0,0,353,355,5,147,0,0,
        354,350,1,0,0,0,354,353,1,0,0,0,355,640,1,0,0,0,356,357,5,184,0,
        0,357,358,5,94,0,0,358,359,5,96,0,0,359,640,3,50,25,0,360,361,5,
        184,0,0,361,364,5,185,0,0,362,363,7,1,0,0,363,365,3,116,58,0,364,
        362,1,0,0,0,364,365,1,0,0,0,365,369,1,0,0,0,366,367,5,26,0,0,367,
        370,3,92,46,0,368,370,3,32,16,0,369,366,1,0,0,0,369,368,1,0,0,0,
        369,370,1,0,0,0,370,640,1,0,0,0,371,372,5,184,0,0,372,376,5,186,
        0,0,373,374,5,26,0,0,374,377,3,92,46,0,375,377,3,32,16,0,376,373,
        1,0,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,640,1,0,0,0,378,379,
        5,184,0,0,379,380,5,188,0,0,380,381,7,1,0,0,381,384,3,116,58,0,382,
        383,7,1,0,0,383,385,3,116,58,0,384,382,1,0,0,0,384,385,1,0,0,0,385,
        389,1,0,0,0,386,387,5,26,0,0,387,390,3,92,46,0,388,390,3,32,16,0,
        389,386,1,0,0,0,389,388,1,0,0,0,389,390,1,0,0,0,390,640,1,0,0,0,
        391,394,5,184,0,0,392,395,3,116,58,0,393,395,5,7,0,0,394,392,1,0,
        0,0,394,393,1,0,0,0,395,640,1,0,0,0,396,640,3,10,5,0,397,398,5,216,
        0,0,398,399,5,139,0,0,399,404,3,68,34,0,400,401,5,293,0,0,401,403,
        3,68,34,0,402,400,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,
        1,0,0,0,405,640,1,0,0,0,406,404,1,0,0,0,407,411,5,215,0,0,408,409,
        5,140,0,0,409,410,5,148,0,0,410,412,5,5,0,0,411,408,1,0,0,0,411,
        412,1,0,0,0,412,413,1,0,0,0,413,414,5,146,0,0,414,419,3,234,117,
        0,415,416,5,293,0,0,416,418,3,234,117,0,417,415,1,0,0,0,418,421,
        1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,640,1,0,0,0,421,419,
        1,0,0,0,422,424,5,215,0,0,423,425,7,2,0,0,424,423,1,0,0,0,424,425,
        1,0,0,0,425,426,1,0,0,0,426,427,5,140,0,0,427,430,5,1,0,0,428,431,
        5,217,0,0,429,431,3,130,65,0,430,428,1,0,0,0,430,429,1,0,0,0,431,
        640,1,0,0,0,432,433,5,216,0,0,433,434,5,140,0,0,434,640,5,1,0,0,
        435,437,5,215,0,0,436,438,7,2,0,0,437,436,1,0,0,0,437,438,1,0,0,
        0,438,439,1,0,0,0,439,440,3,116,58,0,440,450,7,3,0,0,441,451,5,217,
        0,0,442,447,3,228,114,0,443,444,5,293,0,0,444,446,3,228,114,0,445,
        443,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,
        451,1,0,0,0,449,447,1,0,0,0,450,441,1,0,0,0,450,442,1,0,0,0,451,
        640,1,0,0,0,452,453,5,215,0,0,453,455,5,139,0,0,454,456,7,4,0,0,
        455,454,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,462,3,226,113,
        0,458,459,5,293,0,0,459,461,3,226,113,0,460,458,1,0,0,0,461,464,
        1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,640,1,0,0,0,464,462,
        1,0,0,0,465,466,5,215,0,0,466,467,5,48,0,0,467,471,5,49,0,0,468,
        472,5,141,0,0,469,472,5,217,0,0,470,472,3,92,46,0,471,468,1,0,0,
        0,471,469,1,0,0,0,471,470,1,0,0,0,472,640,1,0,0,0,473,476,5,106,
        0,0,474,477,5,7,0,0,475,477,3,82,41,0,476,474,1,0,0,0,476,475,1,
        0,0,0,477,640,1,0,0,0,478,479,5,205,0,0,479,480,5,206,0,0,480,492,
        3,50,25,0,481,482,5,295,0,0,482,487,3,124,62,0,483,484,5,293,0,0,
        484,486,3,124,62,0,485,483,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,
        0,487,488,1,0,0,0,488,490,1,0,0,0,489,487,1,0,0,0,490,491,5,296,
        0,0,491,493,1,0,0,0,492,481,1,0,0,0,492,493,1,0,0,0,493,494,1,0,
        0,0,494,496,3,148,74,0,495,497,3,150,75,0,496,495,1,0,0,0,496,497,
        1,0,0,0,497,499,1,0,0,0,498,500,3,34,17,0,499,498,1,0,0,0,499,500,
        1,0,0,0,500,640,1,0,0,0,501,502,5,195,0,0,502,503,5,104,0,0,503,
        509,3,116,58,0,504,510,5,7,0,0,505,510,5,254,0,0,506,507,5,96,0,
        0,507,510,3,224,112,0,508,510,3,122,61,0,509,504,1,0,0,0,509,505,
        1,0,0,0,509,506,1,0,0,0,509,508,1,0,0,0,510,512,1,0,0,0,511,513,
        3,200,100,0,512,511,1,0,0,0,512,513,1,0,0,0,513,640,1,0,0,0,514,
        515,5,218,0,0,515,527,3,48,24,0,516,517,5,295,0,0,517,522,3,124,
        62,0,518,519,5,293,0,0,519,521,3,124,62,0,520,518,1,0,0,0,521,524,
        1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,525,1,0,0,0,524,522,
        1,0,0,0,525,526,5,296,0,0,526,528,1,0,0,0,527,516,1,0,0,0,527,528,
        1,0,0,0,528,529,1,0,0,0,529,530,5,3,0,0,530,532,3,58,29,0,531,533,
        3,200,100,0,532,531,1,0,0,0,532,533,1,0,0,0,533,536,1,0,0,0,534,
        535,5,252,0,0,535,537,5,253,0,0,536,534,1,0,0,0,536,537,1,0,0,0,
        537,640,1,0,0,0,538,539,5,218,0,0,539,541,3,48,24,0,540,542,3,156,
        78,0,541,540,1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,545,3,32,
        16,0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,548,5,4,
        0,0,547,549,5,11,0,0,548,547,1,0,0,0,548,549,1,0,0,0,549,550,1,0,
        0,0,550,552,3,58,29,0,551,553,3,200,100,0,552,551,1,0,0,0,552,553,
        1,0,0,0,553,640,1,0,0,0,554,640,3,8,4,0,555,561,5,247,0,0,556,562,
        3,122,61,0,557,559,5,7,0,0,558,560,5,250,0,0,559,558,1,0,0,0,559,
        560,1,0,0,0,560,562,1,0,0,0,561,556,1,0,0,0,561,557,1,0,0,0,562,
        567,1,0,0,0,563,564,5,79,0,0,564,565,3,232,116,0,565,566,3,114,57,
        0,566,568,1,0,0,0,567,563,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,
        0,569,570,5,4,0,0,570,640,3,122,61,0,571,577,5,248,0,0,572,578,3,
        122,61,0,573,575,5,7,0,0,574,576,5,250,0,0,575,574,1,0,0,0,575,576,
        1,0,0,0,576,578,1,0,0,0,577,572,1,0,0,0,577,573,1,0,0,0,578,583,
        1,0,0,0,579,580,5,79,0,0,580,581,3,232,116,0,581,582,3,114,57,0,
        582,584,1,0,0,0,583,579,1,0,0,0,583,584,1,0,0,0,584,585,1,0,0,0,
        585,586,5,4,0,0,586,640,3,122,61,0,587,593,5,249,0,0,588,594,3,122,
        61,0,589,591,5,7,0,0,590,592,5,250,0,0,591,590,1,0,0,0,591,592,1,
        0,0,0,592,594,1,0,0,0,593,588,1,0,0,0,593,589,1,0,0,0,594,599,1,
        0,0,0,595,596,5,79,0,0,596,597,3,232,116,0,597,598,3,114,57,0,598,
        600,1,0,0,0,599,595,1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,
        602,5,3,0,0,602,640,3,122,61,0,603,640,3,160,80,0,604,606,5,10,0,
        0,605,607,5,239,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,610,1,0,
        0,0,608,611,5,7,0,0,609,611,3,132,66,0,610,608,1,0,0,0,610,609,1,
        0,0,0,611,640,1,0,0,0,612,640,5,164,0,0,613,614,5,167,0,0,614,640,
        7,5,0,0,615,616,5,260,0,0,616,617,3,124,62,0,617,618,3,240,120,0,
        618,621,5,261,0,0,619,620,7,6,0,0,620,622,5,267,0,0,621,619,1,0,
        0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,624,5,47,0,0,624,625,3,16,
        8,0,625,640,1,0,0,0,626,628,5,35,0,0,627,629,3,238,119,0,628,627,
        1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,0,630,632,7,1,0,0,631,630,
        1,0,0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,640,3,124,62,0,634,637,
        5,111,0,0,635,638,3,124,62,0,636,638,5,7,0,0,637,635,1,0,0,0,637,
        636,1,0,0,0,638,640,1,0,0,0,639,266,1,0,0,0,639,267,1,0,0,0,639,
        283,1,0,0,0,639,297,1,0,0,0,639,301,1,0,0,0,639,305,1,0,0,0,639,
        317,1,0,0,0,639,323,1,0,0,0,639,326,1,0,0,0,639,343,1,0,0,0,639,
        349,1,0,0,0,639,356,1,0,0,0,639,360,1,0,0,0,639,371,1,0,0,0,639,
        378,1,0,0,0,639,391,1,0,0,0,639,396,1,0,0,0,639,397,1,0,0,0,639,
        407,1,0,0,0,639,422,1,0,0,0,639,432,1,0,0,0,639,435,1,0,0,0,639,
        452,1,0,0,0,639,465,1,0,0,0,639,473,1,0,0,0,639,478,1,0,0,0,639,
        501,1,0,0,0,639,514,1,0,0,0,639,538,1,0,0,0,639,554,1,0,0,0,639,
        555,1,0,0,0,639,571,1,0,0,0,639,587,1,0,0,0,639,603,1,0,0,0,639,
        604,1,0,0,0,639,612,1,0,0,0,639,613,1,0,0,0,639,615,1,0,0,0,639,
        626,1,0,0,0,639,634,1,0,0,0,640,7,1,0,0,0,641,642,5,196,0,0,642,
        643,5,95,0,0,643,646,5,96,0,0,644,645,5,68,0,0,645,647,5,24,0,0,
        646,644,1,0,0,0,646,647,1,0,0,0,647,648,1,0,0,0,648,717,3,50,25,
        0,649,650,5,196,0,0,650,653,5,96,0,0,651,652,5,68,0,0,652,654,5,
        24,0,0,653,651,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,717,3,
        50,25,0,656,657,5,196,0,0,657,658,5,197,0,0,658,717,3,116,58,0,659,
        660,5,196,0,0,660,661,5,103,0,0,661,717,3,124,62,0,662,663,5,196,
        0,0,663,664,5,104,0,0,664,717,3,116,58,0,665,666,5,196,0,0,666,669,
        5,161,0,0,667,668,5,68,0,0,668,670,5,24,0,0,669,667,1,0,0,0,669,
        670,1,0,0,0,670,671,1,0,0,0,671,672,3,116,58,0,672,681,5,295,0,0,
        673,678,3,162,81,0,674,675,5,293,0,0,675,677,3,162,81,0,676,674,
        1,0,0,0,677,680,1,0,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,682,
        1,0,0,0,680,678,1,0,0,0,681,673,1,0,0,0,681,682,1,0,0,0,682,683,
        1,0,0,0,683,684,5,296,0,0,684,717,1,0,0,0,685,686,5,196,0,0,686,
        689,7,7,0,0,687,688,5,68,0,0,688,690,5,24,0,0,689,687,1,0,0,0,689,
        690,1,0,0,0,690,691,1,0,0,0,691,717,3,124,62,0,692,693,5,196,0,0,
        693,696,5,192,0,0,694,695,5,68,0,0,695,697,5,24,0,0,696,694,1,0,
        0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,717,3,114,57,0,699,700,5,
        196,0,0,700,701,5,233,0,0,701,717,3,124,62,0,702,703,5,196,0,0,703,
        706,5,255,0,0,704,705,5,68,0,0,705,707,5,24,0,0,706,704,1,0,0,0,
        706,707,1,0,0,0,707,708,1,0,0,0,708,717,3,124,62,0,709,710,5,196,
        0,0,710,713,5,256,0,0,711,712,5,68,0,0,712,714,5,24,0,0,713,711,
        1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,717,3,124,62,0,716,641,
        1,0,0,0,716,649,1,0,0,0,716,656,1,0,0,0,716,659,1,0,0,0,716,662,
        1,0,0,0,716,665,1,0,0,0,716,685,1,0,0,0,716,692,1,0,0,0,716,699,
        1,0,0,0,716,702,1,0,0,0,716,709,1,0,0,0,717,9,1,0,0,0,718,719,5,
        105,0,0,719,720,5,96,0,0,720,721,3,164,82,0,721,726,3,180,90,0,722,
        723,5,293,0,0,723,725,3,180,90,0,724,722,1,0,0,0,725,728,1,0,0,0,
        726,724,1,0,0,0,726,727,1,0,0,0,727,894,1,0,0,0,728,726,1,0,0,0,
        729,730,5,105,0,0,730,731,5,96,0,0,731,732,3,164,82,0,732,737,3,
        182,91,0,733,734,5,293,0,0,734,736,3,182,91,0,735,733,1,0,0,0,736,
        739,1,0,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,894,1,0,0,0,739,
        737,1,0,0,0,740,741,5,105,0,0,741,742,5,96,0,0,742,743,3,164,82,
        0,743,744,5,196,0,0,744,745,5,172,0,0,745,746,3,124,62,0,746,894,
        1,0,0,0,747,748,5,105,0,0,748,749,5,96,0,0,749,769,3,164,82,0,750,
        751,5,215,0,0,751,752,5,295,0,0,752,753,3,202,101,0,753,754,5,296,
        0,0,754,770,1,0,0,0,755,767,5,216,0,0,756,757,5,295,0,0,757,762,
        3,124,62,0,758,759,5,293,0,0,759,761,3,124,62,0,760,758,1,0,0,0,
        761,764,1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,765,1,0,0,0,
        764,762,1,0,0,0,765,766,5,296,0,0,766,768,1,0,0,0,767,756,1,0,0,
        0,767,768,1,0,0,0,768,770,1,0,0,0,769,750,1,0,0,0,769,755,1,0,0,
        0,770,894,1,0,0,0,771,772,5,105,0,0,772,773,5,95,0,0,773,774,5,96,
        0,0,774,794,3,164,82,0,775,776,5,215,0,0,776,777,5,295,0,0,777,778,
        3,202,101,0,778,779,5,296,0,0,779,795,1,0,0,0,780,792,5,216,0,0,
        781,782,5,295,0,0,782,787,3,124,62,0,783,784,5,293,0,0,784,786,3,
        124,62,0,785,783,1,0,0,0,786,789,1,0,0,0,787,785,1,0,0,0,787,788,
        1,0,0,0,788,790,1,0,0,0,789,787,1,0,0,0,790,791,5,296,0,0,791,793,
        1,0,0,0,792,781,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,794,775,
        1,0,0,0,794,780,1,0,0,0,795,894,1,0,0,0,796,798,5,105,0,0,797,799,
        5,95,0,0,798,797,1,0,0,0,798,799,1,0,0,0,799,800,1,0,0,0,800,801,
        5,96,0,0,801,802,3,164,82,0,802,803,7,8,0,0,803,894,1,0,0,0,804,
        806,5,105,0,0,805,807,5,95,0,0,806,805,1,0,0,0,806,807,1,0,0,0,807,
        808,1,0,0,0,808,809,5,96,0,0,809,810,3,164,82,0,810,811,5,112,0,
        0,811,812,5,4,0,0,812,813,3,116,58,0,813,894,1,0,0,0,814,816,5,105,
        0,0,815,817,5,95,0,0,816,815,1,0,0,0,816,817,1,0,0,0,817,818,1,0,
        0,0,818,819,5,96,0,0,819,820,3,164,82,0,820,822,5,112,0,0,821,823,
        5,109,0,0,822,821,1,0,0,0,822,823,1,0,0,0,823,824,1,0,0,0,824,825,
        3,96,48,0,825,826,5,4,0,0,826,827,3,96,48,0,827,894,1,0,0,0,828,
        830,5,105,0,0,829,831,5,95,0,0,830,829,1,0,0,0,830,831,1,0,0,0,831,
        832,1,0,0,0,832,833,5,96,0,0,833,834,3,164,82,0,834,835,5,113,0,
        0,835,836,3,184,92,0,836,894,1,0,0,0,837,838,5,105,0,0,838,839,5,
        102,0,0,839,840,5,113,0,0,840,841,5,119,0,0,841,894,5,120,0,0,842,
        843,5,105,0,0,843,844,5,102,0,0,844,845,5,97,0,0,845,846,5,96,0,
        0,846,847,3,116,58,0,847,848,5,4,0,0,848,850,3,116,58,0,849,851,
        3,200,100,0,850,849,1,0,0,0,850,851,1,0,0,0,851,894,1,0,0,0,852,
        853,5,105,0,0,853,854,5,102,0,0,854,855,5,101,0,0,855,894,3,58,29,
        0,856,857,5,105,0,0,857,858,5,102,0,0,858,859,5,98,0,0,859,860,5,
        99,0,0,860,894,5,100,0,0,861,862,5,105,0,0,862,863,7,7,0,0,863,864,
        3,124,62,0,864,865,5,215,0,0,865,866,5,295,0,0,866,867,3,202,101,
        0,867,868,5,296,0,0,868,894,1,0,0,0,869,870,5,105,0,0,870,871,5,
        255,0,0,871,872,3,124,62,0,872,873,7,9,0,0,873,874,5,96,0,0,874,
        876,3,116,58,0,875,877,5,286,0,0,876,875,1,0,0,0,876,877,1,0,0,0,
        877,885,1,0,0,0,878,879,5,293,0,0,879,881,3,116,58,0,880,882,5,286,
        0,0,881,880,1,0,0,0,881,882,1,0,0,0,882,884,1,0,0,0,883,878,1,0,
        0,0,884,887,1,0,0,0,885,883,1,0,0,0,885,886,1,0,0,0,886,894,1,0,
        0,0,887,885,1,0,0,0,888,889,5,105,0,0,889,890,5,256,0,0,890,891,
        3,124,62,0,891,892,3,166,83,0,892,894,1,0,0,0,893,718,1,0,0,0,893,
        729,1,0,0,0,893,740,1,0,0,0,893,747,1,0,0,0,893,771,1,0,0,0,893,
        796,1,0,0,0,893,804,1,0,0,0,893,814,1,0,0,0,893,828,1,0,0,0,893,
        837,1,0,0,0,893,842,1,0,0,0,893,852,1,0,0,0,893,856,1,0,0,0,893,
        861,1,0,0,0,893,869,1,0,0,0,893,888,1,0,0,0,894,11,1,0,0,0,895,896,
        5,295,0,0,896,897,3,14,7,0,897,898,5,296,0,0,898,905,1,0,0,0,899,
        905,3,14,7,0,900,901,5,295,0,0,901,902,3,12,6,0,902,903,5,296,0,
        0,903,905,1,0,0,0,904,895,1,0,0,0,904,899,1,0,0,0,904,900,1,0,0,
        0,905,13,1,0,0,0,906,908,3,54,27,0,907,906,1,0,0,0,907,908,1,0,0,
        0,908,909,1,0,0,0,909,910,3,16,8,0,910,15,1,0,0,0,911,922,3,22,11,
        0,912,913,5,16,0,0,913,914,5,15,0,0,914,919,3,26,13,0,915,916,5,
        293,0,0,916,918,3,26,13,0,917,915,1,0,0,0,918,921,1,0,0,0,919,917,
        1,0,0,0,919,920,1,0,0,0,920,923,1,0,0,0,921,919,1,0,0,0,922,912,
        1,0,0,0,922,923,1,0,0,0,923,936,1,0,0,0,924,926,3,18,9,0,925,924,
        1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,0,927,929,3,20,10,0,928,927,
        1,0,0,0,928,929,1,0,0,0,929,937,1,0,0,0,930,932,3,20,10,0,931,930,
        1,0,0,0,931,932,1,0,0,0,932,934,1,0,0,0,933,935,3,18,9,0,934,933,
        1,0,0,0,934,935,1,0,0,0,935,937,1,0,0,0,936,925,1,0,0,0,936,931,
        1,0,0,0,937,17,1,0,0,0,938,941,5,18,0,0,939,942,3,78,39,0,940,942,
        5,7,0,0,941,939,1,0,0,0,941,940,1,0,0,0,942,950,1,0,0,0,943,944,
        5,35,0,0,944,945,7,10,0,0,945,946,3,78,39,0,946,947,7,11,0,0,947,
        948,5,107,0,0,948,950,1,0,0,0,949,938,1,0,0,0,949,943,1,0,0,0,950,
        19,1,0,0,0,951,952,5,19,0,0,952,954,3,78,39,0,953,955,7,11,0,0,954,
        953,1,0,0,0,954,955,1,0,0,0,955,21,1,0,0,0,956,957,6,11,-1,0,957,
        963,3,28,14,0,958,959,3,28,14,0,959,960,7,12,0,0,960,961,3,28,14,
        0,961,963,1,0,0,0,962,956,1,0,0,0,962,958,1,0,0,0,963,972,1,0,0,
        0,964,965,10,1,0,0,965,967,5,198,0,0,966,968,3,24,12,0,967,966,1,
        0,0,0,967,968,1,0,0,0,968,969,1,0,0,0,969,971,3,22,11,2,970,964,
        1,0,0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,0,973,23,1,
        0,0,0,974,972,1,0,0,0,975,976,7,13,0,0,976,25,1,0,0,0,977,979,3,
        58,29,0,978,980,7,14,0,0,979,978,1,0,0,0,979,980,1,0,0,0,980,983,
        1,0,0,0,981,982,5,34,0,0,982,984,7,15,0,0,983,981,1,0,0,0,983,984,
        1,0,0,0,984,27,1,0,0,0,985,987,5,2,0,0,986,988,3,24,12,0,987,986,
        1,0,0,0,987,988,1,0,0,0,988,989,1,0,0,0,989,994,3,30,15,0,990,991,
        5,293,0,0,991,993,3,30,15,0,992,990,1,0,0,0,993,996,1,0,0,0,994,
        992,1,0,0,0,994,995,1,0,0,0,995,1006,1,0,0,0,996,994,1,0,0,0,997,
        998,5,3,0,0,998,1003,3,38,19,0,999,1000,5,293,0,0,1000,1002,3,38,
        19,0,1001,999,1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,0,0,1003,1004,
        1,0,0,0,1004,1007,1,0,0,0,1005,1003,1,0,0,0,1006,997,1,0,0,0,1006,
        1007,1,0,0,0,1007,1009,1,0,0,0,1008,1010,3,32,16,0,1009,1008,1,0,
        0,0,1009,1010,1,0,0,0,1010,1021,1,0,0,0,1011,1012,5,14,0,0,1012,
        1013,5,15,0,0,1013,1018,3,58,29,0,1014,1015,5,293,0,0,1015,1017,
        3,58,29,0,1016,1014,1,0,0,0,1017,1020,1,0,0,0,1018,1016,1,0,0,0,
        1018,1019,1,0,0,0,1019,1022,1,0,0,0,1020,1018,1,0,0,0,1021,1011,
        1,0,0,0,1021,1022,1,0,0,0,1022,1025,1,0,0,0,1023,1024,5,17,0,0,1024,
        1026,3,60,30,0,1025,1023,1,0,0,0,1025,1026,1,0,0,0,1026,1036,1,0,
        0,0,1027,1028,5,81,0,0,1028,1033,3,104,52,0,1029,1030,5,293,0,0,
        1030,1032,3,104,52,0,1031,1029,1,0,0,0,1032,1035,1,0,0,0,1033,1031,
        1,0,0,0,1033,1034,1,0,0,0,1034,1037,1,0,0,0,1035,1033,1,0,0,0,1036,
        1027,1,0,0,0,1036,1037,1,0,0,0,1037,1048,1,0,0,0,1038,1039,5,207,
        0,0,1039,1044,3,154,77,0,1040,1041,5,293,0,0,1041,1043,3,154,77,
        0,1042,1040,1,0,0,0,1043,1046,1,0,0,0,1044,1042,1,0,0,0,1044,1045,
        1,0,0,0,1045,1048,1,0,0,0,1046,1044,1,0,0,0,1047,985,1,0,0,0,1047,
        1038,1,0,0,0,1048,29,1,0,0,0,1049,1054,3,58,29,0,1050,1052,5,5,0,
        0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,1053,1,0,0,0,1053,1055,
        3,124,62,0,1054,1051,1,0,0,0,1054,1055,1,0,0,0,1055,1062,1,0,0,0,
        1056,1057,3,116,58,0,1057,1058,5,294,0,0,1058,1059,5,286,0,0,1059,
        1062,1,0,0,0,1060,1062,5,286,0,0,1061,1049,1,0,0,0,1061,1056,1,0,
        0,0,1061,1060,1,0,0,0,1062,31,1,0,0,0,1063,1064,5,13,0,0,1064,1065,
        3,60,30,0,1065,33,1,0,0,0,1066,1067,5,228,0,0,1067,1072,3,30,15,
        0,1068,1069,5,293,0,0,1069,1071,3,30,15,0,1070,1068,1,0,0,0,1071,
        1074,1,0,0,0,1072,1070,1,0,0,0,1072,1073,1,0,0,0,1073,35,1,0,0,0,
        1074,1072,1,0,0,0,1075,1076,5,224,0,0,1076,1077,5,295,0,0,1077,1078,
        3,32,16,0,1078,1079,5,296,0,0,1079,37,1,0,0,0,1080,1081,6,19,-1,
        0,1081,1082,3,44,22,0,1082,1101,1,0,0,0,1083,1097,10,2,0,0,1084,
        1085,5,71,0,0,1085,1086,5,70,0,0,1086,1098,3,44,22,0,1087,1088,3,
        40,20,0,1088,1089,5,70,0,0,1089,1090,3,38,19,0,1090,1091,3,42,21,
        0,1091,1098,1,0,0,0,1092,1093,5,77,0,0,1093,1094,3,40,20,0,1094,
        1095,5,70,0,0,1095,1096,3,44,22,0,1096,1098,1,0,0,0,1097,1084,1,
        0,0,0,1097,1087,1,0,0,0,1097,1092,1,0,0,0,1098,1100,1,0,0,0,1099,
        1083,1,0,0,0,1100,1103,1,0,0,0,1101,1099,1,0,0,0,1101,1102,1,0,0,
        0,1102,39,1,0,0,0,1103,1101,1,0,0,0,1104,1106,5,73,0,0,1105,1104,
        1,0,0,0,1105,1106,1,0,0,0,1106,1120,1,0,0,0,1107,1109,5,74,0,0,1108,
        1110,5,72,0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,1120,1,0,
        0,0,1111,1113,5,75,0,0,1112,1114,5,72,0,0,1113,1112,1,0,0,0,1113,
        1114,1,0,0,0,1114,1120,1,0,0,0,1115,1117,5,76,0,0,1116,1118,5,72,
        0,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1120,1,0,0,0,1119,1105,
        1,0,0,0,1119,1107,1,0,0,0,1119,1111,1,0,0,0,1119,1115,1,0,0,0,1120,
        41,1,0,0,0,1121,1122,5,79,0,0,1122,1136,3,60,30,0,1123,1124,5,78,
        0,0,1124,1125,5,295,0,0,1125,1130,3,124,62,0,1126,1127,5,293,0,0,
        1127,1129,3,124,62,0,1128,1126,1,0,0,0,1129,1132,1,0,0,0,1130,1128,
        1,0,0,0,1130,1131,1,0,0,0,1131,1133,1,0,0,0,1132,1130,1,0,0,0,1133,
        1134,5,296,0,0,1134,1136,1,0,0,0,1135,1121,1,0,0,0,1135,1123,1,0,
        0,0,1136,43,1,0,0,0,1137,1145,3,46,23,0,1138,1140,5,5,0,0,1139,1138,
        1,0,0,0,1139,1140,1,0,0,0,1140,1141,1,0,0,0,1141,1143,3,124,62,0,
        1142,1144,3,52,26,0,1143,1142,1,0,0,0,1143,1144,1,0,0,0,1144,1146,
        1,0,0,0,1145,1139,1,0,0,0,1145,1146,1,0,0,0,1146,45,1,0,0,0,1147,
        1157,3,50,25,0,1148,1149,5,295,0,0,1149,1150,3,14,7,0,1150,1151,
        5,296,0,0,1151,1157,1,0,0,0,1152,1153,5,295,0,0,1153,1154,3,38,19,
        0,1154,1155,5,296,0,0,1155,1157,1,0,0,0,1156,1147,1,0,0,0,1156,1148,
        1,0,0,0,1156,1152,1,0,0,0,1157,47,1,0,0,0,1158,1171,3,116,58,0,1159,
        1160,5,82,0,0,1160,1161,5,295,0,0,1161,1166,3,158,79,0,1162,1163,
        5,293,0,0,1163,1165,3,158,79,0,1164,1162,1,0,0,0,1165,1168,1,0,0,
        0,1166,1164,1,0,0,0,1166,1167,1,0,0,0,1167,1169,1,0,0,0,1168,1166,
        1,0,0,0,1169,1170,5,296,0,0,1170,1172,1,0,0,0,1171,1159,1,0,0,0,
        1171,1172,1,0,0,0,1172,49,1,0,0,0,1173,1189,3,116,58,0,1174,1175,
        3,116,58,0,1175,1177,5,295,0,0,1176,1178,3,66,33,0,1177,1176,1,0,
        0,0,1177,1178,1,0,0,0,1178,1183,1,0,0,0,1179,1180,5,293,0,0,1180,
        1182,3,66,33,0,1181,1179,1,0,0,0,1182,1185,1,0,0,0,1183,1181,1,0,
        0,0,1183,1184,1,0,0,0,1184,1186,1,0,0,0,1185,1183,1,0,0,0,1186,1187,
        5,296,0,0,1187,1189,1,0,0,0,1188,1173,1,0,0,0,1188,1174,1,0,0,0,
        1189,51,1,0,0,0,1190,1191,5,295,0,0,1191,1196,3,124,62,0,1192,1193,
        5,293,0,0,1193,1195,3,124,62,0,1194,1192,1,0,0,0,1195,1198,1,0,0,
        0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,1199,1,0,0,0,1198,1196,
        1,0,0,0,1199,1200,5,296,0,0,1200,53,1,0,0,0,1201,1202,5,91,0,0,1202,
        1207,3,56,28,0,1203,1204,5,293,0,0,1204,1206,3,56,28,0,1205,1203,
        1,0,0,0,1206,1209,1,0,0,0,1207,1205,1,0,0,0,1207,1208,1,0,0,0,1208,
        55,1,0,0,0,1209,1207,1,0,0,0,1210,1212,3,124,62,0,1211,1213,3,52,
        26,0,1212,1211,1,0,0,0,1212,1213,1,0,0,0,1213,1214,1,0,0,0,1214,
        1215,5,5,0,0,1215,1216,5,295,0,0,1216,1217,3,14,7,0,1217,1218,5,
        296,0,0,1218,57,1,0,0,0,1219,1220,3,60,30,0,1220,59,1,0,0,0,1221,
        1222,6,30,-1,0,1222,1239,3,62,31,0,1223,1224,5,23,0,0,1224,1239,
        3,60,30,4,1225,1226,5,242,0,0,1226,1227,5,295,0,0,1227,1228,3,210,
        105,0,1228,1229,5,293,0,0,1229,1230,3,68,34,0,1230,1236,5,296,0,
        0,1231,1232,5,78,0,0,1232,1234,3,124,62,0,1233,1235,3,200,100,0,
        1234,1233,1,0,0,0,1234,1235,1,0,0,0,1235,1237,1,0,0,0,1236,1231,
        1,0,0,0,1236,1237,1,0,0,0,1237,1239,1,0,0,0,1238,1221,1,0,0,0,1238,
        1223,1,0,0,0,1238,1225,1,0,0,0,1239,1248,1,0,0,0,1240,1241,10,3,
        0,0,1241,1242,5,21,0,0,1242,1247,3,60,30,4,1243,1244,10,2,0,0,1244,
        1245,5,20,0,0,1245,1247,3,60,30,3,1246,1240,1,0,0,0,1246,1243,1,
        0,0,0,1247,1250,1,0,0,0,1248,1246,1,0,0,0,1248,1249,1,0,0,0,1249,
        61,1,0,0,0,1250,1248,1,0,0,0,1251,1253,3,66,33,0,1252,1254,3,64,
        32,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,63,1,0,0,0,1255,1256,
        3,98,49,0,1256,1257,3,66,33,0,1257,1324,1,0,0,0,1258,1259,3,98,49,
        0,1259,1260,3,100,50,0,1260,1261,3,68,34,0,1261,1324,1,0,0,0,1262,
        1264,5,23,0,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,1264,1265,1,0,
        0,0,1265,1266,5,25,0,0,1266,1267,3,66,33,0,1267,1268,5,21,0,0,1268,
        1269,3,66,33,0,1269,1324,1,0,0,0,1270,1272,5,23,0,0,1271,1270,1,
        0,0,0,1271,1272,1,0,0,0,1272,1273,1,0,0,0,1273,1274,5,22,0,0,1274,
        1275,5,295,0,0,1275,1280,3,58,29,0,1276,1277,5,293,0,0,1277,1279,
        3,58,29,0,1278,1276,1,0,0,0,1279,1282,1,0,0,0,1280,1278,1,0,0,0,
        1280,1281,1,0,0,0,1281,1283,1,0,0,0,1282,1280,1,0,0,0,1283,1284,
        5,296,0,0,1284,1324,1,0,0,0,1285,1287,5,23,0,0,1286,1285,1,0,0,0,
        1286,1287,1,0,0,0,1287,1288,1,0,0,0,1288,1289,5,22,0,0,1289,1324,
        3,72,36,0,1290,1292,5,23,0,0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,
        1292,1293,1,0,0,0,1293,1294,7,16,0,0,1294,1297,3,66,33,0,1295,1296,
        5,39,0,0,1296,1298,3,74,37,0,1297,1295,1,0,0,0,1297,1298,1,0,0,0,
        1298,1324,1,0,0,0,1299,1301,5,23,0,0,1300,1299,1,0,0,0,1300,1301,
        1,0,0,0,1301,1302,1,0,0,0,1302,1303,7,16,0,0,1303,1304,3,100,50,
        0,1304,1305,5,295,0,0,1305,1306,3,66,33,0,1306,1309,5,296,0,0,1307,
        1308,5,39,0,0,1308,1310,3,66,33,0,1309,1307,1,0,0,0,1309,1310,1,
        0,0,0,1310,1324,1,0,0,0,1311,1313,5,28,0,0,1312,1314,5,23,0,0,1313,
        1312,1,0,0,0,1313,1314,1,0,0,0,1314,1315,1,0,0,0,1315,1324,5,29,
        0,0,1316,1318,5,28,0,0,1317,1319,5,23,0,0,1318,1317,1,0,0,0,1318,
        1319,1,0,0,0,1319,1320,1,0,0,0,1320,1321,5,12,0,0,1321,1322,5,3,
        0,0,1322,1324,3,66,33,0,1323,1255,1,0,0,0,1323,1258,1,0,0,0,1323,
        1263,1,0,0,0,1323,1271,1,0,0,0,1323,1286,1,0,0,0,1323,1291,1,0,0,
        0,1323,1300,1,0,0,0,1323,1311,1,0,0,0,1323,1316,1,0,0,0,1324,65,
        1,0,0,0,1325,1326,6,33,-1,0,1326,1333,3,68,34,0,1327,1328,7,17,0,
        0,1328,1333,3,66,33,6,1329,1330,3,186,93,0,1330,1331,3,92,46,0,1331,
        1333,1,0,0,0,1332,1325,1,0,0,0,1332,1327,1,0,0,0,1332,1329,1,0,0,
        0,1333,1348,1,0,0,0,1334,1335,10,5,0,0,1335,1336,7,18,0,0,1336,1347,
        3,66,33,6,1337,1338,10,4,0,0,1338,1339,7,17,0,0,1339,1347,3,66,33,
        5,1340,1341,10,3,0,0,1341,1342,7,19,0,0,1342,1347,3,66,33,4,1343,
        1344,10,2,0,0,1344,1345,5,289,0,0,1345,1347,3,66,33,3,1346,1334,
        1,0,0,0,1346,1337,1,0,0,0,1346,1340,1,0,0,0,1346,1343,1,0,0,0,1347,
        1350,1,0,0,0,1348,1346,1,0,0,0,1348,1349,1,0,0,0,1349,67,1,0,0,0,
        1350,1348,1,0,0,0,1351,1352,6,34,-1,0,1352,1420,3,74,37,0,1353,1420,
        3,70,35,0,1354,1355,3,116,58,0,1355,1356,5,295,0,0,1356,1357,5,286,
        0,0,1357,1359,5,296,0,0,1358,1360,3,36,18,0,1359,1358,1,0,0,0,1359,
        1360,1,0,0,0,1360,1362,1,0,0,0,1361,1363,3,106,53,0,1362,1361,1,
        0,0,0,1362,1363,1,0,0,0,1363,1420,1,0,0,0,1364,1420,3,124,62,0,1365,
        1366,3,116,58,0,1366,1378,5,295,0,0,1367,1369,3,24,12,0,1368,1367,
        1,0,0,0,1368,1369,1,0,0,0,1369,1370,1,0,0,0,1370,1375,3,58,29,0,
        1371,1372,5,293,0,0,1372,1374,3,58,29,0,1373,1371,1,0,0,0,1374,1377,
        1,0,0,0,1375,1373,1,0,0,0,1375,1376,1,0,0,0,1376,1379,1,0,0,0,1377,
        1375,1,0,0,0,1378,1368,1,0,0,0,1378,1379,1,0,0,0,1379,1380,1,0,0,
        0,1380,1382,5,296,0,0,1381,1383,3,36,18,0,1382,1381,1,0,0,0,1382,
        1383,1,0,0,0,1383,1386,1,0,0,0,1384,1385,7,20,0,0,1385,1387,5,34,
        0,0,1386,1384,1,0,0,0,1386,1387,1,0,0,0,1387,1389,1,0,0,0,1388,1390,
        3,106,53,0,1389,1388,1,0,0,0,1389,1390,1,0,0,0,1390,1420,1,0,0,0,
        1391,1420,3,72,36,0,1392,1393,5,295,0,0,1393,1394,3,68,34,0,1394,
        1395,5,296,0,0,1395,1396,5,294,0,0,1396,1397,3,124,62,0,1397,1420,
        1,0,0,0,1398,1399,5,295,0,0,1399,1400,3,58,29,0,1400,1401,5,296,
        0,0,1401,1420,1,0,0,0,1402,1403,5,24,0,0,1403,1404,5,295,0,0,1404,
        1405,3,14,7,0,1405,1406,5,296,0,0,1406,1420,1,0,0,0,1407,1412,3,
        124,62,0,1408,1409,5,294,0,0,1409,1411,3,124,62,0,1410,1408,1,0,
        0,0,1411,1414,1,0,0,0,1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,1420,
        1,0,0,0,1414,1412,1,0,0,0,1415,1417,5,232,0,0,1416,1415,1,0,0,0,
        1416,1417,1,0,0,0,1417,1418,1,0,0,0,1418,1420,5,301,0,0,1419,1351,
        1,0,0,0,1419,1353,1,0,0,0,1419,1354,1,0,0,0,1419,1364,1,0,0,0,1419,
        1365,1,0,0,0,1419,1391,1,0,0,0,1419,1392,1,0,0,0,1419,1398,1,0,0,
        0,1419,1402,1,0,0,0,1419,1407,1,0,0,0,1419,1416,1,0,0,0,1420,1446,
        1,0,0,0,1421,1422,10,2,0,0,1422,1423,5,6,0,0,1423,1424,5,48,0,0,
        1424,1425,5,49,0,0,1425,1445,3,68,34,3,1426,1427,10,6,0,0,1427,1428,
        5,299,0,0,1428,1429,3,66,33,0,1429,1430,5,300,0,0,1430,1445,1,0,
        0,0,1431,1432,10,5,0,0,1432,1434,5,299,0,0,1433,1435,3,66,33,0,1434,
        1433,1,0,0,0,1434,1435,1,0,0,0,1435,1436,1,0,0,0,1436,1438,5,292,
        0,0,1437,1439,3,66,33,0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,
        1440,1,0,0,0,1440,1445,5,300,0,0,1441,1442,10,3,0,0,1442,1443,5,
        290,0,0,1443,1445,3,186,93,0,1444,1421,1,0,0,0,1444,1426,1,0,0,0,
        1444,1431,1,0,0,0,1444,1441,1,0,0,0,1445,1448,1,0,0,0,1446,1444,
        1,0,0,0,1446,1447,1,0,0,0,1447,69,1,0,0,0,1448,1446,1,0,0,0,1449,
        1566,5,56,0,0,1450,1455,5,57,0,0,1451,1452,5,295,0,0,1452,1453,3,
        144,72,0,1453,1454,5,296,0,0,1454,1456,1,0,0,0,1455,1451,1,0,0,0,
        1455,1456,1,0,0,0,1456,1566,1,0,0,0,1457,1462,5,58,0,0,1458,1459,
        5,295,0,0,1459,1460,3,144,72,0,1460,1461,5,296,0,0,1461,1463,1,0,
        0,0,1462,1458,1,0,0,0,1462,1463,1,0,0,0,1463,1566,1,0,0,0,1464,1566,
        5,59,0,0,1465,1566,7,21,0,0,1466,1566,5,61,0,0,1467,1468,5,74,0,
        0,1468,1469,5,295,0,0,1469,1470,3,58,29,0,1470,1471,5,293,0,0,1471,
        1472,3,58,29,0,1472,1473,5,296,0,0,1473,1566,1,0,0,0,1474,1475,5,
        75,0,0,1475,1476,5,295,0,0,1476,1477,3,58,29,0,1477,1478,5,293,0,
        0,1478,1479,3,58,29,0,1479,1480,5,296,0,0,1480,1566,1,0,0,0,1481,
        1482,5,42,0,0,1482,1483,5,295,0,0,1483,1484,3,58,29,0,1484,1485,
        5,3,0,0,1485,1488,3,58,29,0,1486,1487,5,47,0,0,1487,1489,3,58,29,
        0,1488,1486,1,0,0,0,1488,1489,1,0,0,0,1489,1490,1,0,0,0,1490,1491,
        5,296,0,0,1491,1566,1,0,0,0,1492,1493,5,43,0,0,1493,1501,5,295,0,
        0,1494,1496,7,22,0,0,1495,1494,1,0,0,0,1495,1496,1,0,0,0,1496,1498,
        1,0,0,0,1497,1499,3,58,29,0,1498,1497,1,0,0,0,1498,1499,1,0,0,0,
        1499,1500,1,0,0,0,1500,1502,5,3,0,0,1501,1495,1,0,0,0,1501,1502,
        1,0,0,0,1502,1503,1,0,0,0,1503,1504,3,58,29,0,1504,1505,5,296,0,
        0,1505,1566,1,0,0,0,1506,1507,5,62,0,0,1507,1508,5,295,0,0,1508,
        1509,3,130,65,0,1509,1510,5,3,0,0,1510,1511,3,58,29,0,1511,1512,
        5,296,0,0,1512,1566,1,0,0,0,1513,1514,5,182,0,0,1514,1515,5,295,
        0,0,1515,1516,3,58,29,0,1516,1517,5,5,0,0,1517,1518,3,186,93,0,1518,
        1519,5,296,0,0,1519,1566,1,0,0,0,1520,1521,5,183,0,0,1521,1522,5,
        295,0,0,1522,1523,3,58,29,0,1523,1524,5,5,0,0,1524,1525,3,186,93,
        0,1525,1526,5,296,0,0,1526,1566,1,0,0,0,1527,1528,5,63,0,0,1528,
        1530,3,58,29,0,1529,1531,3,102,51,0,1530,1529,1,0,0,0,1531,1532,
        1,0,0,0,1532,1530,1,0,0,0,1532,1533,1,0,0,0,1533,1536,1,0,0,0,1534,
        1535,5,66,0,0,1535,1537,3,58,29,0,1536,1534,1,0,0,0,1536,1537,1,
        0,0,0,1537,1538,1,0,0,0,1538,1539,5,67,0,0,1539,1566,1,0,0,0,1540,
        1542,5,63,0,0,1541,1543,3,102,51,0,1542,1541,1,0,0,0,1543,1544,1,
        0,0,0,1544,1542,1,0,0,0,1544,1545,1,0,0,0,1545,1548,1,0,0,0,1546,
        1547,5,66,0,0,1547,1549,3,58,29,0,1548,1546,1,0,0,0,1548,1549,1,
        0,0,0,1549,1550,1,0,0,0,1550,1551,5,67,0,0,1551,1566,1,0,0,0,1552,
        1553,5,68,0,0,1553,1554,5,295,0,0,1554,1555,3,58,29,0,1555,1556,
        5,293,0,0,1556,1559,3,58,29,0,1557,1558,5,293,0,0,1558,1560,3,58,
        29,0,1559,1557,1,0,0,0,1559,1560,1,0,0,0,1560,1561,1,0,0,0,1561,
        1562,5,296,0,0,1562,1566,1,0,0,0,1563,1564,5,232,0,0,1564,1566,3,
        72,36,0,1565,1449,1,0,0,0,1565,1450,1,0,0,0,1565,1457,1,0,0,0,1565,
        1464,1,0,0,0,1565,1465,1,0,0,0,1565,1466,1,0,0,0,1565,1467,1,0,0,
        0,1565,1474,1,0,0,0,1565,1481,1,0,0,0,1565,1492,1,0,0,0,1565,1506,
        1,0,0,0,1565,1513,1,0,0,0,1565,1520,1,0,0,0,1565,1527,1,0,0,0,1565,
        1540,1,0,0,0,1565,1552,1,0,0,0,1565,1563,1,0,0,0,1566,71,1,0,0,0,
        1567,1568,5,295,0,0,1568,1569,3,14,7,0,1569,1570,5,296,0,0,1570,
        73,1,0,0,0,1571,1600,3,76,38,0,1572,1574,5,232,0,0,1573,1572,1,0,
        0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1584,5,299,0,0,1576,
        1581,3,58,29,0,1577,1578,5,293,0,0,1578,1580,3,58,29,0,1579,1577,
        1,0,0,0,1580,1583,1,0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,
        1585,1,0,0,0,1583,1581,1,0,0,0,1584,1576,1,0,0,0,1584,1585,1,0,0,
        0,1585,1586,1,0,0,0,1586,1600,5,300,0,0,1587,1596,5,297,0,0,1588,
        1593,3,146,73,0,1589,1590,5,293,0,0,1590,1592,3,146,73,0,1591,1589,
        1,0,0,0,1592,1595,1,0,0,0,1593,1591,1,0,0,0,1593,1594,1,0,0,0,1594,
        1597,1,0,0,0,1595,1593,1,0,0,0,1596,1588,1,0,0,0,1596,1597,1,0,0,
        0,1597,1598,1,0,0,0,1598,1600,5,298,0,0,1599,1571,1,0,0,0,1599,1573,
        1,0,0,0,1599,1587,1,0,0,0,1600,75,1,0,0,0,1601,1610,3,86,43,0,1602,
        1610,3,136,68,0,1603,1610,3,88,44,0,1604,1610,3,92,46,0,1605,1610,
        3,134,67,0,1606,1610,3,140,70,0,1607,1610,3,94,47,0,1608,1610,3,
        84,42,0,1609,1601,1,0,0,0,1609,1602,1,0,0,0,1609,1603,1,0,0,0,1609,
        1604,1,0,0,0,1609,1605,1,0,0,0,1609,1606,1,0,0,0,1609,1607,1,0,0,
        0,1609,1608,1,0,0,0,1610,77,1,0,0,0,1611,1633,3,84,42,0,1612,1633,
        3,144,72,0,1613,1633,3,86,43,0,1614,1615,3,74,37,0,1615,1616,5,290,
        0,0,1616,1617,3,186,93,0,1617,1633,1,0,0,0,1618,1619,5,182,0,0,1619,
        1620,5,295,0,0,1620,1621,3,58,29,0,1621,1622,5,5,0,0,1622,1623,3,
        186,93,0,1623,1624,5,296,0,0,1624,1633,1,0,0,0,1625,1626,5,183,0,
        0,1626,1627,5,295,0,0,1627,1628,3,58,29,0,1628,1629,5,5,0,0,1629,
        1630,3,186,93,0,1630,1631,5,296,0,0,1631,1633,1,0,0,0,1632,1611,
        1,0,0,0,1632,1612,1,0,0,0,1632,1613,1,0,0,0,1632,1614,1,0,0,0,1632,
        1618,1,0,0,0,1632,1625,1,0,0,0,1633,79,1,0,0,0,1634,1637,3,84,42,
        0,1635,1637,3,124,62,0,1636,1634,1,0,0,0,1636,1635,1,0,0,0,1637,
        81,1,0,0,0,1638,1641,3,84,42,0,1639,1641,3,92,46,0,1640,1638,1,0,
        0,0,1640,1639,1,0,0,0,1641,83,1,0,0,0,1642,1643,5,303,0,0,1643,1646,
        3,144,72,0,1644,1646,5,302,0,0,1645,1642,1,0,0,0,1645,1644,1,0,0,
        0,1646,85,1,0,0,0,1647,1648,5,29,0,0,1648,87,1,0,0,0,1649,1650,5,
        308,0,0,1650,89,1,0,0,0,1651,1655,5,316,0,0,1652,1654,5,320,0,0,
        1653,1652,1,0,0,0,1654,1657,1,0,0,0,1655,1653,1,0,0,0,1655,1656,
        1,0,0,0,1656,1658,1,0,0,0,1657,1655,1,0,0,0,1658,1659,5,321,0,0,
        1659,91,1,0,0,0,1660,1663,5,307,0,0,1661,1663,3,90,45,0,1662,1660,
        1,0,0,0,1662,1661,1,0,0,0,1663,93,1,0,0,0,1664,1665,5,309,0,0,1665,
        95,1,0,0,0,1666,1667,6,48,-1,0,1667,1668,3,116,58,0,1668,1676,1,
        0,0,0,1669,1670,10,2,0,0,1670,1671,5,299,0,0,1671,1672,3,66,33,0,
        1672,1673,5,300,0,0,1673,1675,1,0,0,0,1674,1669,1,0,0,0,1675,1678,
        1,0,0,0,1676,1674,1,0,0,0,1676,1677,1,0,0,0,1677,97,1,0,0,0,1678,
        1676,1,0,0,0,1679,1680,7,23,0,0,1680,99,1,0,0,0,1681,1682,7,24,0,
        0,1682,101,1,0,0,0,1683,1684,5,64,0,0,1684,1685,3,58,29,0,1685,1686,
        5,65,0,0,1686,1687,3,58,29,0,1687,103,1,0,0,0,1688,1689,3,124,62,
        0,1689,1690,5,5,0,0,1690,1691,3,108,54,0,1691,105,1,0,0,0,1692,1693,
        5,80,0,0,1693,1694,3,108,54,0,1694,107,1,0,0,0,1695,1729,3,124,62,
        0,1696,1698,5,295,0,0,1697,1699,3,124,62,0,1698,1697,1,0,0,0,1698,
        1699,1,0,0,0,1699,1710,1,0,0,0,1700,1701,5,82,0,0,1701,1702,5,15,
        0,0,1702,1707,3,58,29,0,1703,1704,5,293,0,0,1704,1706,3,58,29,0,
        1705,1703,1,0,0,0,1706,1709,1,0,0,0,1707,1705,1,0,0,0,1707,1708,
        1,0,0,0,1708,1711,1,0,0,0,1709,1707,1,0,0,0,1710,1700,1,0,0,0,1710,
        1711,1,0,0,0,1711,1722,1,0,0,0,1712,1713,5,16,0,0,1713,1714,5,15,
        0,0,1714,1719,3,26,13,0,1715,1716,5,293,0,0,1716,1718,3,26,13,0,
        1717,1715,1,0,0,0,1718,1721,1,0,0,0,1719,1717,1,0,0,0,1719,1720,
        1,0,0,0,1720,1723,1,0,0,0,1721,1719,1,0,0,0,1722,1712,1,0,0,0,1722,
        1723,1,0,0,0,1723,1725,1,0,0,0,1724,1726,3,110,55,0,1725,1724,1,
        0,0,0,1725,1726,1,0,0,0,1726,1727,1,0,0,0,1727,1729,5,296,0,0,1728,
        1695,1,0,0,0,1728,1696,1,0,0,0,1729,109,1,0,0,0,1730,1731,5,84,0,
        0,1731,1747,3,112,56,0,1732,1733,5,85,0,0,1733,1747,3,112,56,0,1734,
        1735,5,84,0,0,1735,1736,5,25,0,0,1736,1737,3,112,56,0,1737,1738,
        5,21,0,0,1738,1739,3,112,56,0,1739,1747,1,0,0,0,1740,1741,5,85,0,
        0,1741,1742,5,25,0,0,1742,1743,3,112,56,0,1743,1744,5,21,0,0,1744,
        1745,3,112,56,0,1745,1747,1,0,0,0,1746,1730,1,0,0,0,1746,1732,1,
        0,0,0,1746,1734,1,0,0,0,1746,1740,1,0,0,0,1747,111,1,0,0,0,1748,
        1749,5,86,0,0,1749,1758,5,87,0,0,1750,1751,5,86,0,0,1751,1758,5,
        88,0,0,1752,1753,5,89,0,0,1753,1758,5,90,0,0,1754,1755,3,58,29,0,
        1755,1756,7,25,0,0,1756,1758,1,0,0,0,1757,1748,1,0,0,0,1757,1750,
        1,0,0,0,1757,1752,1,0,0,0,1757,1754,1,0,0,0,1758,113,1,0,0,0,1759,
        1764,3,116,58,0,1760,1761,5,293,0,0,1761,1763,3,116,58,0,1762,1760,
        1,0,0,0,1763,1766,1,0,0,0,1764,1762,1,0,0,0,1764,1765,1,0,0,0,1765,
        115,1,0,0,0,1766,1764,1,0,0,0,1767,1772,3,124,62,0,1768,1769,5,294,
        0,0,1769,1771,3,124,62,0,1770,1768,1,0,0,0,1771,1774,1,0,0,0,1772,
        1770,1,0,0,0,1772,1773,1,0,0,0,1773,117,1,0,0,0,1774,1772,1,0,0,
        0,1775,1779,3,120,60,0,1776,1778,3,120,60,0,1777,1776,1,0,0,0,1778,
        1781,1,0,0,0,1779,1777,1,0,0,0,1779,1780,1,0,0,0,1780,119,1,0,0,
        0,1781,1779,1,0,0,0,1782,1784,3,124,62,0,1783,1785,3,76,38,0,1784,
        1783,1,0,0,0,1784,1785,1,0,0,0,1785,121,1,0,0,0,1786,1791,3,124,
        62,0,1787,1788,5,293,0,0,1788,1790,3,124,62,0,1789,1787,1,0,0,0,
        1790,1793,1,0,0,0,1791,1789,1,0,0,0,1791,1792,1,0,0,0,1792,123,1,
        0,0,0,1793,1791,1,0,0,0,1794,1797,3,126,63,0,1795,1797,3,128,64,
        0,1796,1794,1,0,0,0,1796,1795,1,0,0,0,1797,125,1,0,0,0,1798,1802,
        5,312,0,0,1799,1802,3,242,121,0,1800,1802,5,313,0,0,1801,1798,1,
        0,0,0,1801,1799,1,0,0,0,1801,1800,1,0,0,0,1802,127,1,0,0,0,1803,
        1806,5,314,0,0,1804,1806,5,315,0,0,1805,1803,1,0,0,0,1805,1804,1,
        0,0,0,1806,129,1,0,0,0,1807,1810,3,124,62,0,1808,1810,3,92,46,0,
        1809,1807,1,0,0,0,1809,1808,1,0,0,0,1810,131,1,0,0,0,1811,1815,3,
        124,62,0,1812,1815,3,116,58,0,1813,1815,3,92,46,0,1814,1811,1,0,
        0,0,1814,1812,1,0,0,0,1814,1813,1,0,0,0,1815,133,1,0,0,0,1816,1819,
        3,142,71,0,1817,1819,3,144,72,0,1818,1816,1,0,0,0,1818,1817,1,0,
        0,0,1819,135,1,0,0,0,1820,1822,5,69,0,0,1821,1823,7,17,0,0,1822,
        1821,1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1825,3,92,
        46,0,1825,1828,3,138,69,0,1826,1827,5,4,0,0,1827,1829,3,138,69,0,
        1828,1826,1,0,0,0,1828,1829,1,0,0,0,1829,137,1,0,0,0,1830,1831,7,
        26,0,0,1831,139,1,0,0,0,1832,1833,7,27,0,0,1833,141,1,0,0,0,1834,
        1835,5,311,0,0,1835,143,1,0,0,0,1836,1837,5,310,0,0,1837,145,1,0,
        0,0,1838,1839,3,124,62,0,1839,1840,5,273,0,0,1840,1841,3,58,29,0,
        1841,147,1,0,0,0,1842,1848,3,14,7,0,1843,1844,5,295,0,0,1844,1845,
        3,14,7,0,1845,1846,5,296,0,0,1846,1848,1,0,0,0,1847,1842,1,0,0,0,
        1847,1843,1,0,0,0,1848,149,1,0,0,0,1849,1850,5,79,0,0,1850,1852,
        5,212,0,0,1851,1853,3,152,76,0,1852,1851,1,0,0,0,1852,1853,1,0,0,
        0,1853,1854,1,0,0,0,1854,1855,5,213,0,0,1855,1871,5,214,0,0,1856,
        1857,5,79,0,0,1857,1858,5,212,0,0,1858,1859,3,152,76,0,1859,1860,
        5,213,0,0,1860,1861,5,209,0,0,1861,1862,5,215,0,0,1862,1867,3,158,
        79,0,1863,1864,5,293,0,0,1864,1866,3,158,79,0,1865,1863,1,0,0,0,
        1866,1869,1,0,0,0,1867,1865,1,0,0,0,1867,1868,1,0,0,0,1868,1871,
        1,0,0,0,1869,1867,1,0,0,0,1870,1849,1,0,0,0,1870,1856,1,0,0,0,1871,
        151,1,0,0,0,1872,1873,5,295,0,0,1873,1878,3,96,48,0,1874,1875,5,
        293,0,0,1875,1877,3,96,48,0,1876,1874,1,0,0,0,1877,1880,1,0,0,0,
        1878,1876,1,0,0,0,1878,1879,1,0,0,0,1879,1881,1,0,0,0,1880,1878,
        1,0,0,0,1881,1882,5,296,0,0,1882,153,1,0,0,0,1883,1884,5,295,0,0,
        1884,1889,3,58,29,0,1885,1886,5,293,0,0,1886,1888,3,58,29,0,1887,
        1885,1,0,0,0,1888,1891,1,0,0,0,1889,1887,1,0,0,0,1889,1890,1,0,0,
        0,1890,1892,1,0,0,0,1891,1889,1,0,0,0,1892,1893,5,296,0,0,1893,155,
        1,0,0,0,1894,1895,5,295,0,0,1895,1900,3,68,34,0,1896,1897,5,293,
        0,0,1897,1899,3,68,34,0,1898,1896,1,0,0,0,1899,1902,1,0,0,0,1900,
        1898,1,0,0,0,1900,1901,1,0,0,0,1901,1903,1,0,0,0,1902,1900,1,0,0,
        0,1903,1904,5,296,0,0,1904,157,1,0,0,0,1905,1906,3,68,34,0,1906,
        1907,5,273,0,0,1907,1908,3,58,29,0,1908,159,1,0,0,0,1909,1910,5,
        94,0,0,1910,1914,5,96,0,0,1911,1912,5,68,0,0,1912,1913,5,23,0,0,
        1913,1915,5,24,0,0,1914,1911,1,0,0,0,1914,1915,1,0,0,0,1915,1916,
        1,0,0,0,1916,1917,3,50,25,0,1917,1918,5,295,0,0,1918,1923,3,176,
        88,0,1919,1920,5,293,0,0,1920,1922,3,176,88,0,1921,1919,1,0,0,0,
        1922,1925,1,0,0,0,1923,1921,1,0,0,0,1923,1924,1,0,0,0,1924,1926,
        1,0,0,0,1925,1923,1,0,0,0,1926,1927,5,296,0,0,1927,1929,3,168,84,
        0,1928,1930,3,200,100,0,1929,1928,1,0,0,0,1929,1930,1,0,0,0,1930,
        2076,1,0,0,0,1931,1932,5,94,0,0,1932,1933,5,96,0,0,1933,1934,3,50,
        25,0,1934,1935,5,5,0,0,1935,1936,3,148,74,0,1936,2076,1,0,0,0,1937,
        1938,5,94,0,0,1938,1939,5,95,0,0,1939,1940,5,96,0,0,1940,1942,3,
        50,25,0,1941,1943,3,174,87,0,1942,1941,1,0,0,0,1942,1943,1,0,0,0,
        1943,1945,1,0,0,0,1944,1946,3,200,100,0,1945,1944,1,0,0,0,1945,1946,
        1,0,0,0,1946,2076,1,0,0,0,1947,1948,5,94,0,0,1948,1949,5,103,0,0,
        1949,1950,3,124,62,0,1950,1951,5,177,0,0,1951,1953,3,124,62,0,1952,
        1954,3,200,100,0,1953,1952,1,0,0,0,1953,1954,1,0,0,0,1954,2076,1,
        0,0,0,1955,1956,5,94,0,0,1956,1957,5,104,0,0,1957,1961,3,116,58,
        0,1958,1962,5,7,0,0,1959,1960,5,96,0,0,1960,1962,3,224,112,0,1961,
        1958,1,0,0,0,1961,1959,1,0,0,0,1962,1964,1,0,0,0,1963,1965,3,200,
        100,0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,1965,2076,1,0,0,0,1966,
        1967,5,94,0,0,1967,1968,5,233,0,0,1968,1971,3,124,62,0,1969,1970,
        5,234,0,0,1970,1972,3,124,62,0,1971,1969,1,0,0,0,1971,1972,1,0,0,
        0,1972,1974,1,0,0,0,1973,1975,5,91,0,0,1974,1973,1,0,0,0,1974,1975,
        1,0,0,0,1975,1976,1,0,0,0,1976,1977,5,295,0,0,1977,1982,3,214,107,
        0,1978,1979,5,293,0,0,1979,1981,3,214,107,0,1980,1978,1,0,0,0,1981,
        1984,1,0,0,0,1982,1980,1,0,0,0,1982,1983,1,0,0,0,1983,1985,1,0,0,
        0,1984,1982,1,0,0,0,1985,1986,5,296,0,0,1986,2076,1,0,0,0,1987,1990,
        5,94,0,0,1988,1989,5,20,0,0,1989,1991,5,160,0,0,1990,1988,1,0,0,
        0,1990,1991,1,0,0,0,1991,1992,1,0,0,0,1992,1993,5,161,0,0,1993,1994,
        3,116,58,0,1994,2003,5,295,0,0,1995,2000,3,162,81,0,1996,1997,5,
        293,0,0,1997,1999,3,162,81,0,1998,1996,1,0,0,0,1999,2002,1,0,0,0,
        2000,1998,1,0,0,0,2000,2001,1,0,0,0,2001,2004,1,0,0,0,2002,2000,
        1,0,0,0,2003,1995,1,0,0,0,2003,2004,1,0,0,0,2004,2005,1,0,0,0,2005,
        2006,5,296,0,0,2006,2007,5,158,0,0,2007,2008,3,186,93,0,2008,2009,
        5,162,0,0,2009,2010,3,80,40,0,2010,2011,5,5,0,0,2011,2012,3,82,41,
        0,2012,2076,1,0,0,0,2013,2014,5,94,0,0,2014,2015,7,7,0,0,2015,2029,
        3,124,62,0,2016,2028,3,200,100,0,2017,2019,5,91,0,0,2018,2017,1,
        0,0,0,2018,2019,1,0,0,0,2019,2021,1,0,0,0,2020,2022,5,295,0,0,2021,
        2020,1,0,0,0,2021,2022,1,0,0,0,2022,2023,1,0,0,0,2023,2025,3,118,
        59,0,2024,2026,5,296,0,0,2025,2024,1,0,0,0,2025,2026,1,0,0,0,2026,
        2028,1,0,0,0,2027,2016,1,0,0,0,2027,2018,1,0,0,0,2028,2030,1,0,0,
        0,2029,2027,1,0,0,0,2029,2030,1,0,0,0,2030,2076,1,0,0,0,2031,2034,
        5,94,0,0,2032,2033,5,20,0,0,2033,2035,5,160,0,0,2034,2032,1,0,0,
        0,2034,2035,1,0,0,0,2035,2036,1,0,0,0,2036,2037,5,192,0,0,2037,2038,
        3,116,58,0,2038,2039,5,5,0,0,2039,2040,3,12,6,0,2040,2076,1,0,0,
        0,2041,2042,5,94,0,0,2042,2043,5,255,0,0,2043,2063,3,124,62,0,2044,
        2045,5,47,0,0,2045,2046,5,7,0,0,2046,2064,5,185,0,0,2047,2048,5,
        47,0,0,2048,2049,5,96,0,0,2049,2051,3,116,58,0,2050,2052,5,286,0,
        0,2051,2050,1,0,0,0,2051,2052,1,0,0,0,2052,2060,1,0,0,0,2053,2054,
        5,293,0,0,2054,2056,3,116,58,0,2055,2057,5,286,0,0,2056,2055,1,0,
        0,0,2056,2057,1,0,0,0,2057,2059,1,0,0,0,2058,2053,1,0,0,0,2059,2062,
        1,0,0,0,2060,2058,1,0,0,0,2060,2061,1,0,0,0,2061,2064,1,0,0,0,2062,
        2060,1,0,0,0,2063,2044,1,0,0,0,2063,2047,1,0,0,0,2063,2064,1,0,0,
        0,2064,2076,1,0,0,0,2065,2066,5,94,0,0,2066,2067,5,256,0,0,2067,
        2068,3,124,62,0,2068,2069,5,257,0,0,2069,2070,3,58,29,0,2070,2071,
        5,255,0,0,2071,2073,3,122,61,0,2072,2074,3,200,100,0,2073,2072,1,
        0,0,0,2073,2074,1,0,0,0,2074,2076,1,0,0,0,2075,1909,1,0,0,0,2075,
        1931,1,0,0,0,2075,1937,1,0,0,0,2075,1947,1,0,0,0,2075,1955,1,0,0,
        0,2075,1966,1,0,0,0,2075,1987,1,0,0,0,2075,2013,1,0,0,0,2075,2031,
        1,0,0,0,2075,2041,1,0,0,0,2075,2065,1,0,0,0,2076,161,1,0,0,0,2077,
        2079,3,124,62,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,
        0,0,0,2080,2081,3,186,93,0,2081,163,1,0,0,0,2082,2083,5,107,0,0,
        2083,2086,3,116,58,0,2084,2086,3,48,24,0,2085,2082,1,0,0,0,2085,
        2084,1,0,0,0,2086,165,1,0,0,0,2087,2088,7,28,0,0,2088,167,1,0,0,
        0,2089,2091,3,170,85,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,
        2093,1,0,0,0,2092,2094,3,172,86,0,2093,2092,1,0,0,0,2093,2094,1,
        0,0,0,2094,2102,1,0,0,0,2095,2097,3,172,86,0,2096,2095,1,0,0,0,2096,
        2097,1,0,0,0,2097,2099,1,0,0,0,2098,2100,3,170,85,0,2099,2098,1,
        0,0,0,2099,2100,1,0,0,0,2100,2102,1,0,0,0,2101,2090,1,0,0,0,2101,
        2096,1,0,0,0,2102,169,1,0,0,0,2103,2104,5,238,0,0,2104,2105,5,15,
        0,0,2105,2106,3,156,78,0,2106,171,1,0,0,0,2107,2113,5,219,0,0,2108,
        2109,5,15,0,0,2109,2110,5,295,0,0,2110,2111,3,68,34,0,2111,2112,
        5,296,0,0,2112,2114,1,0,0,0,2113,2108,1,0,0,0,2113,2114,1,0,0,0,
        2114,2119,1,0,0,0,2115,2116,5,206,0,0,2116,2117,3,78,39,0,2117,2118,
        5,220,0,0,2118,2120,1,0,0,0,2119,2115,1,0,0,0,2119,2120,1,0,0,0,
        2120,173,1,0,0,0,2121,2122,5,219,0,0,2122,2123,5,206,0,0,2123,2124,
        3,78,39,0,2124,2125,5,220,0,0,2125,175,1,0,0,0,2126,2140,3,178,89,
        0,2127,2128,3,196,98,0,2128,2129,3,156,78,0,2129,2140,1,0,0,0,2130,
        2131,5,226,0,0,2131,2132,3,124,62,0,2132,2133,5,78,0,0,2133,2134,
        3,124,62,0,2134,2136,3,156,78,0,2135,2137,3,200,100,0,2136,2135,
        1,0,0,0,2136,2137,1,0,0,0,2137,2140,1,0,0,0,2138,2140,3,198,99,0,
        2139,2126,1,0,0,0,2139,2127,1,0,0,0,2139,2130,1,0,0,0,2139,2138,
        1,0,0,0,2140,177,1,0,0,0,2141,2143,3,124,62,0,2142,2144,3,186,93,
        0,2143,2142,1,0,0,0,2143,2144,1,0,0,0,2144,2148,1,0,0,0,2145,2147,
        3,194,97,0,2146,2145,1,0,0,0,2147,2150,1,0,0,0,2148,2146,1,0,0,0,
        2148,2149,1,0,0,0,2149,179,1,0,0,0,2150,2148,1,0,0,0,2151,2153,5,
        108,0,0,2152,2154,5,109,0,0,2153,2152,1,0,0,0,2153,2154,1,0,0,0,
        2154,2155,1,0,0,0,2155,2157,3,96,48,0,2156,2158,3,186,93,0,2157,
        2156,1,0,0,0,2157,2158,1,0,0,0,2158,2162,1,0,0,0,2159,2161,3,194,
        97,0,2160,2159,1,0,0,0,2161,2164,1,0,0,0,2162,2160,1,0,0,0,2162,
        2163,1,0,0,0,2163,181,1,0,0,0,2164,2162,1,0,0,0,2165,2167,5,196,
        0,0,2166,2168,5,109,0,0,2167,2166,1,0,0,0,2167,2168,1,0,0,0,2168,
        2171,1,0,0,0,2169,2170,5,68,0,0,2170,2172,5,24,0,0,2171,2169,1,0,
        0,0,2171,2172,1,0,0,0,2172,2173,1,0,0,0,2173,2174,3,96,48,0,2174,
        183,1,0,0,0,2175,2176,5,114,0,0,2176,2177,5,115,0,0,2177,2178,3,
        78,39,0,2178,2179,5,3,0,0,2179,2180,3,82,41,0,2180,2181,5,4,0,0,
        2181,2182,3,82,41,0,2182,2208,1,0,0,0,2183,2184,5,116,0,0,2184,2185,
        5,117,0,0,2185,2186,5,115,0,0,2186,2187,3,78,39,0,2187,2188,5,79,
        0,0,2188,2189,3,82,41,0,2189,2208,1,0,0,0,2190,2191,5,83,0,0,2191,
        2192,5,117,0,0,2192,2193,5,115,0,0,2193,2194,3,78,39,0,2194,2195,
        5,79,0,0,2195,2197,3,82,41,0,2196,2198,3,200,100,0,2197,2196,1,0,
        0,0,2197,2198,1,0,0,0,2198,2208,1,0,0,0,2199,2200,5,118,0,0,2200,
        2201,5,115,0,0,2201,2202,3,78,39,0,2202,2203,5,79,0,0,2203,2205,
        3,82,41,0,2204,2206,3,200,100,0,2205,2204,1,0,0,0,2205,2206,1,0,
        0,0,2206,2208,1,0,0,0,2207,2175,1,0,0,0,2207,2183,1,0,0,0,2207,2190,
        1,0,0,0,2207,2199,1,0,0,0,2208,185,1,0,0,0,2209,2210,6,93,-1,0,2210,
        2222,3,188,94,0,2211,2212,5,295,0,0,2212,2217,3,144,72,0,2213,2214,
        5,293,0,0,2214,2216,3,144,72,0,2215,2213,1,0,0,0,2216,2219,1,0,0,
        0,2217,2215,1,0,0,0,2217,2218,1,0,0,0,2218,2220,1,0,0,0,2219,2217,
        1,0,0,0,2220,2221,5,296,0,0,2221,2223,1,0,0,0,2222,2211,1,0,0,0,
        2222,2223,1,0,0,0,2223,2231,1,0,0,0,2224,2231,3,192,96,0,2225,2226,
        5,232,0,0,2226,2227,5,295,0,0,2227,2228,3,186,93,0,2228,2229,5,296,
        0,0,2229,2231,1,0,0,0,2230,2209,1,0,0,0,2230,2224,1,0,0,0,2230,2225,
        1,0,0,0,2231,2236,1,0,0,0,2232,2233,10,1,0,0,2233,2235,5,301,0,0,
        2234,2232,1,0,0,0,2235,2238,1,0,0,0,2236,2234,1,0,0,0,2236,2237,
        1,0,0,0,2237,187,1,0,0,0,2238,2236,1,0,0,0,2239,2242,3,190,95,0,
        2240,2242,3,124,62,0,2241,2239,1,0,0,0,2241,2240,1,0,0,0,2242,189,
        1,0,0,0,2243,2244,5,128,0,0,2244,2261,5,129,0,0,2245,2246,5,130,
        0,0,2246,2247,5,92,0,0,2247,2248,5,48,0,0,2248,2261,5,49,0,0,2249,
        2250,5,130,0,0,2250,2251,5,91,0,0,2251,2252,5,48,0,0,2252,2261,5,
        49,0,0,2253,2254,5,48,0,0,2254,2255,5,91,0,0,2255,2256,5,48,0,0,
        2256,2261,5,49,0,0,2257,2258,5,132,0,0,2258,2261,5,134,0,0,2259,
        2261,5,133,0,0,2260,2243,1,0,0,0,2260,2245,1,0,0,0,2260,2249,1,0,
        0,0,2260,2253,1,0,0,0,2260,2257,1,0,0,0,2260,2259,1,0,0,0,2261,191,
        1,0,0,0,2262,2266,5,135,0,0,2263,2264,5,295,0,0,2264,2265,7,29,0,
        0,2265,2267,5,296,0,0,2266,2263,1,0,0,0,2266,2267,1,0,0,0,2267,2280,
        1,0,0,0,2268,2269,5,5,0,0,2269,2270,5,295,0,0,2270,2275,3,178,89,
        0,2271,2272,5,293,0,0,2272,2274,3,178,89,0,2273,2271,1,0,0,0,2274,
        2277,1,0,0,0,2275,2273,1,0,0,0,2275,2276,1,0,0,0,2276,2278,1,0,0,
        0,2277,2275,1,0,0,0,2278,2279,5,296,0,0,2279,2281,1,0,0,0,2280,2268,
        1,0,0,0,2280,2281,1,0,0,0,2281,193,1,0,0,0,2282,2314,3,196,98,0,
        2283,2284,5,23,0,0,2284,2314,5,29,0,0,2285,2314,5,29,0,0,2286,2287,
        5,226,0,0,2287,2288,5,78,0,0,2288,2290,3,124,62,0,2289,2291,3,200,
        100,0,2290,2289,1,0,0,0,2290,2291,1,0,0,0,2291,2314,1,0,0,0,2292,
        2293,5,226,0,0,2293,2314,5,222,0,0,2294,2295,5,227,0,0,2295,2314,
        3,200,100,0,2296,2297,5,172,0,0,2297,2299,3,124,62,0,2298,2296,1,
        0,0,0,2298,2299,1,0,0,0,2299,2300,1,0,0,0,2300,2301,5,217,0,0,2301,
        2314,3,58,29,0,2302,2303,5,172,0,0,2303,2305,3,124,62,0,2304,2302,
        1,0,0,0,2304,2305,1,0,0,0,2305,2308,1,0,0,0,2306,2307,5,243,0,0,
        2307,2309,5,244,0,0,2308,2306,1,0,0,0,2308,2309,1,0,0,0,2309,2310,
        1,0,0,0,2310,2311,5,5,0,0,2311,2314,3,58,29,0,2312,2314,3,198,99,
        0,2313,2282,1,0,0,0,2313,2283,1,0,0,0,2313,2285,1,0,0,0,2313,2286,
        1,0,0,0,2313,2292,1,0,0,0,2313,2294,1,0,0,0,2313,2298,1,0,0,0,2313,
        2304,1,0,0,0,2313,2312,1,0,0,0,2314,195,1,0,0,0,2315,2316,5,172,
        0,0,2316,2318,3,124,62,0,2317,2315,1,0,0,0,2317,2318,1,0,0,0,2318,
        2319,1,0,0,0,2319,2320,5,221,0,0,2320,197,1,0,0,0,2321,2322,5,172,
        0,0,2322,2324,3,124,62,0,2323,2321,1,0,0,0,2323,2324,1,0,0,0,2324,
        2325,1,0,0,0,2325,2326,5,173,0,0,2326,2327,5,295,0,0,2327,2328,3,
        60,30,0,2328,2329,5,296,0,0,2329,199,1,0,0,0,2330,2331,5,91,0,0,
        2331,2332,5,295,0,0,2332,2333,3,202,101,0,2333,2334,5,296,0,0,2334,
        201,1,0,0,0,2335,2340,3,204,102,0,2336,2337,5,293,0,0,2337,2339,
        3,204,102,0,2338,2336,1,0,0,0,2339,2342,1,0,0,0,2340,2338,1,0,0,
        0,2340,2341,1,0,0,0,2341,203,1,0,0,0,2342,2340,1,0,0,0,2343,2344,
        3,124,62,0,2344,2345,5,273,0,0,2345,2346,3,58,29,0,2346,205,1,0,
        0,0,2347,2348,5,295,0,0,2348,2353,3,208,104,0,2349,2350,5,293,0,
        0,2350,2352,3,208,104,0,2351,2349,1,0,0,0,2352,2355,1,0,0,0,2353,
        2351,1,0,0,0,2353,2354,1,0,0,0,2354,2356,1,0,0,0,2355,2353,1,0,0,
        0,2356,2357,5,296,0,0,2357,207,1,0,0,0,2358,2360,7,30,0,0,2359,2361,
        3,140,70,0,2360,2359,1,0,0,0,2360,2361,1,0,0,0,2361,209,1,0,0,0,
        2362,2375,3,212,106,0,2363,2364,5,295,0,0,2364,2369,3,212,106,0,
        2365,2366,5,293,0,0,2366,2368,3,212,106,0,2367,2365,1,0,0,0,2368,
        2371,1,0,0,0,2369,2367,1,0,0,0,2369,2370,1,0,0,0,2370,2372,1,0,0,
        0,2371,2369,1,0,0,0,2372,2373,5,296,0,0,2373,2375,1,0,0,0,2374,2362,
        1,0,0,0,2374,2363,1,0,0,0,2375,211,1,0,0,0,2376,2378,3,96,48,0,2377,
        2379,3,76,38,0,2378,2377,1,0,0,0,2378,2379,1,0,0,0,2379,213,1,0,
        0,0,2380,2385,3,216,108,0,2381,2385,3,218,109,0,2382,2385,3,220,
        110,0,2383,2385,3,204,102,0,2384,2380,1,0,0,0,2384,2381,1,0,0,0,
        2384,2382,1,0,0,0,2384,2383,1,0,0,0,2385,215,1,0,0,0,2386,2387,5,
        235,0,0,2387,2388,3,222,111,0,2388,217,1,0,0,0,2389,2390,5,236,0,
        0,2390,2391,5,295,0,0,2391,2396,3,222,111,0,2392,2393,5,293,0,0,
        2393,2395,3,222,111,0,2394,2392,1,0,0,0,2395,2398,1,0,0,0,2396,2394,
        1,0,0,0,2396,2397,1,0,0,0,2397,2399,1,0,0,0,2398,2396,1,0,0,0,2399,
        2400,5,296,0,0,2400,219,1,0,0,0,2401,2402,5,237,0,0,2402,2403,5,
        295,0,0,2403,2408,3,222,111,0,2404,2405,5,293,0,0,2405,2407,3,222,
        111,0,2406,2404,1,0,0,0,2407,2410,1,0,0,0,2408,2406,1,0,0,0,2408,
        2409,1,0,0,0,2409,2411,1,0,0,0,2410,2408,1,0,0,0,2411,2412,5,296,
        0,0,2412,221,1,0,0,0,2413,2415,3,124,62,0,2414,2416,3,200,100,0,
        2415,2414,1,0,0,0,2415,2416,1,0,0,0,2416,223,1,0,0,0,2417,2422,3,
        48,24,0,2418,2419,5,293,0,0,2419,2421,3,48,24,0,2420,2418,1,0,0,
        0,2421,2424,1,0,0,0,2422,2420,1,0,0,0,2422,2423,1,0,0,0,2423,225,
        1,0,0,0,2424,2422,1,0,0,0,2425,2426,3,68,34,0,2426,2427,7,3,0,0,
        2427,2428,3,58,29,0,2428,227,1,0,0,0,2429,2435,3,92,46,0,2430,2435,
        3,140,70,0,2431,2435,3,134,67,0,2432,2435,3,124,62,0,2433,2435,3,
        230,115,0,2434,2429,1,0,0,0,2434,2430,1,0,0,0,2434,2431,1,0,0,0,
        2434,2432,1,0,0,0,2434,2433,1,0,0,0,2435,229,1,0,0,0,2436,2437,5,
        79,0,0,2437,231,1,0,0,0,2438,2439,7,31,0,0,2439,233,1,0,0,0,2440,
        2441,5,149,0,0,2441,2442,5,150,0,0,2442,2454,3,236,118,0,2443,2444,
        5,155,0,0,2444,2448,5,156,0,0,2445,2446,5,155,0,0,2446,2448,5,107,
        0,0,2447,2443,1,0,0,0,2447,2445,1,0,0,0,2448,2454,1,0,0,0,2449,2451,
        5,23,0,0,2450,2449,1,0,0,0,2450,2451,1,0,0,0,2451,2452,1,0,0,0,2452,
        2454,5,157,0,0,2453,2440,1,0,0,0,2453,2447,1,0,0,0,2453,2450,1,0,
        0,0,2454,235,1,0,0,0,2455,2463,5,151,0,0,2456,2457,5,152,0,0,2457,
        2463,5,155,0,0,2458,2459,5,155,0,0,2459,2463,5,153,0,0,2460,2461,
        5,155,0,0,2461,2463,5,154,0,0,2462,2455,1,0,0,0,2462,2456,1,0,0,
        0,2462,2458,1,0,0,0,2462,2460,1,0,0,0,2463,237,1,0,0,0,2464,2488,
        5,38,0,0,2465,2488,5,272,0,0,2466,2488,5,36,0,0,2467,2488,5,37,0,
        0,2468,2469,5,268,0,0,2469,2488,3,144,72,0,2470,2472,5,271,0,0,2471,
        2473,5,285,0,0,2472,2471,1,0,0,0,2472,2473,1,0,0,0,2473,2474,1,0,
        0,0,2474,2488,3,144,72,0,2475,2488,3,144,72,0,2476,2488,5,7,0,0,
        2477,2488,5,269,0,0,2478,2479,5,269,0,0,2479,2488,3,144,72,0,2480,
        2481,5,269,0,0,2481,2488,5,7,0,0,2482,2488,5,270,0,0,2483,2484,5,
        270,0,0,2484,2488,3,144,72,0,2485,2486,5,270,0,0,2486,2488,5,7,0,
        0,2487,2464,1,0,0,0,2487,2465,1,0,0,0,2487,2466,1,0,0,0,2487,2467,
        1,0,0,0,2487,2468,1,0,0,0,2487,2470,1,0,0,0,2487,2475,1,0,0,0,2487,
        2476,1,0,0,0,2487,2477,1,0,0,0,2487,2478,1,0,0,0,2487,2480,1,0,0,
        0,2487,2482,1,0,0,0,2487,2483,1,0,0,0,2487,2485,1,0,0,0,2488,239,
        1,0,0,0,2489,2497,5,262,0,0,2490,2497,5,264,0,0,2491,2497,5,263,
        0,0,2492,2494,5,265,0,0,2493,2492,1,0,0,0,2493,2494,1,0,0,0,2494,
        2495,1,0,0,0,2495,2497,5,266,0,0,2496,2489,1,0,0,0,2496,2490,1,0,
        0,0,2496,2491,1,0,0,0,2496,2493,1,0,0,0,2497,2500,1,0,0,0,2498,2496,
        1,0,0,0,2498,2499,1,0,0,0,2499,241,1,0,0,0,2500,2498,1,0,0,0,2501,
        2502,7,32,0,0,2502,243,1,0,0,0,324,249,253,259,269,273,278,281,287,
        292,295,299,303,311,314,321,334,338,341,347,354,364,369,376,384,
        389,394,404,411,419,424,430,437,447,450,455,462,471,476,487,492,
        496,499,509,512,522,527,532,536,541,544,548,552,559,561,567,575,
        577,583,591,593,599,606,610,621,628,631,637,639,646,653,669,678,
        681,689,696,706,713,716,726,737,762,767,769,787,792,794,798,806,
        816,822,830,850,876,881,885,893,904,907,919,922,925,928,931,934,
        936,941,949,954,962,967,972,979,983,987,994,1003,1006,1009,1018,
        1021,1025,1033,1036,1044,1047,1051,1054,1061,1072,1097,1101,1105,
        1109,1113,1117,1119,1130,1135,1139,1143,1145,1156,1166,1171,1177,
        1183,1188,1196,1207,1212,1234,1236,1238,1246,1248,1253,1263,1271,
        1280,1286,1291,1297,1300,1309,1313,1318,1323,1332,1346,1348,1359,
        1362,1368,1375,1378,1382,1386,1389,1412,1416,1419,1434,1438,1444,
        1446,1455,1462,1488,1495,1498,1501,1532,1536,1544,1548,1559,1565,
        1573,1581,1584,1593,1596,1599,1609,1632,1636,1640,1645,1655,1662,
        1676,1698,1707,1710,1719,1722,1725,1728,1746,1757,1764,1772,1779,
        1784,1791,1796,1801,1805,1809,1814,1818,1822,1828,1847,1852,1867,
        1870,1878,1889,1900,1914,1923,1929,1942,1945,1953,1961,1964,1971,
        1974,1982,1990,2000,2003,2018,2021,2025,2027,2029,2034,2051,2056,
        2060,2063,2073,2075,2078,2085,2090,2093,2096,2099,2101,2113,2119,
        2136,2139,2143,2148,2153,2157,2162,2167,2171,2197,2205,2207,2217,
        2222,2230,2236,2241,2260,2266,2275,2280,2290,2298,2304,2308,2313,
        2317,2323,2340,2353,2360,2369,2374,2378,2384,2396,2408,2415,2422,
        2434,2447,2450,2453,2462,2472,2487,2493,2496,2498
    ]

class SqlBaseParser ( Parser ):

    grammarFileName = "SqlBaseParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'AUTHORIZATION'", "'SELECT'", "'FROM'", 
                     "'TO'", "'AS'", "'AT'", "'ALL'", "'ANY'", "'SOME'", 
                     "'DEALLOCATE'", "'DIRECTORY'", "'DISTINCT'", "'WHERE'", 
                     "'GROUP'", "'BY'", "'ORDER'", "'HAVING'", "'LIMIT'", 
                     "'OFFSET'", "'OR'", "'AND'", "'IN'", "'NOT'", "'EXISTS'", 
                     "'BETWEEN'", "'LIKE'", "'ILIKE'", "'IS'", "'NULL'", 
                     "'TRUE'", "'FALSE'", "'IGNORE'", "'RESPECT'", "'NULLS'", 
                     "'FETCH'", "'FIRST'", "'LAST'", "'NEXT'", "'ESCAPE'", 
                     "'ASC'", "'DESC'", "'SUBSTRING'", "'TRIM'", "'LEADING'", 
                     "'TRAILING'", "'BOTH'", "'FOR'", "'TIME'", "'ZONE'", 
                     "'YEAR'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", 
                     "'SECOND'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'CURRENT_SCHEMA'", "'CURRENT_USER'", "'SESSION_USER'", 
                     "'EXTRACT'", "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", 
                     "'END'", "'IF'", "'INTERVAL'", "'JOIN'", "'CROSS'", 
                     "'OUTER'", "'INNER'", "'LEFT'", "'RIGHT'", "'FULL'", 
                     "'NATURAL'", "'USING'", "'ON'", "'OVER'", "'WINDOW'", 
                     "'PARTITION'", "'PROMOTE'", "'RANGE'", "'ROWS'", "'UNBOUNDED'", 
                     "'PRECEDING'", "'FOLLOWING'", "'CURRENT'", "'ROW'", 
                     "'WITH'", "'WITHOUT'", "'RECURSIVE'", "'CREATE'", "'BLOB'", 
                     "'TABLE'", "'SWAP'", "'GC'", "'DANGLING'", "'ARTIFACTS'", 
                     "'DECOMMISSION'", "'CLUSTER'", "'REPOSITORY'", "'SNAPSHOT'", 
                     "'ALTER'", "'KILL'", "'ONLY'", "'ADD'", "'COLUMN'", 
                     "'OPEN'", "'CLOSE'", "'RENAME'", "'REROUTE'", "'MOVE'", 
                     "'SHARD'", "'ALLOCATE'", "'REPLICA'", "'CANCEL'", "'RETRY'", 
                     "'FAILED'", "'BOOLEAN'", "'BYTE'", "'SHORT'", "'INTEGER'", 
                     "'INT'", "'LONG'", "'FLOAT'", "'DOUBLE'", "'PRECISION'", 
                     "'TIMESTAMP'", "'IP'", "'CHARACTER'", "'\"CHAR\"'", 
                     "'VARYING'", "'OBJECT'", "'STRING'", "'GEO_POINT'", 
                     "'GEO_SHAPE'", "'GLOBAL'", "'SESSION'", "'LOCAL'", 
                     "'BEGIN'", "'START'", "'COMMIT'", "'WORK'", "'TRANSACTION'", 
                     "'TRANSACTION_ISOLATION'", "'CHARACTERISTICS'", "'ISOLATION'", 
                     "'LEVEL'", "'SERIALIZABLE'", "'REPEATABLE'", "'COMMITTED'", 
                     "'UNCOMMITTED'", "'READ'", "'WRITE'", "'DEFERRABLE'", 
                     "'RETURNS'", "'CALLED'", "'REPLACE'", "'FUNCTION'", 
                     "'LANGUAGE'", "'INPUT'", "'ANALYZE'", "'COSTS'", "'VERBOSE'", 
                     "'DISCARD'", "'PLANS'", "'SEQUENCES'", "'TEMPORARY'", 
                     "'TEMP'", "'CONSTRAINT'", "'CHECK'", "'DESCRIBE'", 
                     "'EXPLAIN'", "'FORMAT'", "'TYPE'", "'TEXT'", "'GRAPHVIZ'", 
                     "'LOGICAL'", "'DISTRIBUTED'", "'CAST'", "'TRY_CAST'", 
                     "'SHOW'", "'TABLES'", "'SCHEMAS'", "'CATALOGS'", "'COLUMNS'", 
                     "'PARTITIONS'", "'FUNCTIONS'", "'MATERIALIZED'", "'VIEW'", 
                     "'OPTIMIZE'", "'REFRESH'", "'RESTORE'", "'DROP'", "'ALIAS'", 
                     "'UNION'", "'EXCEPT'", "'INTERSECT'", "'SYSTEM'", "'BERNOULLI'", 
                     "'TABLESAMPLE'", "'STRATIFY'", "'INSERT'", "'INTO'", 
                     "'VALUES'", "'DELETE'", "'UPDATE'", "'KEY'", "'DUPLICATE'", 
                     "'CONFLICT'", "'DO'", "'NOTHING'", "'SET'", "'RESET'", 
                     "'DEFAULT'", "'COPY'", "'CLUSTERED'", "'SHARDS'", "'PRIMARY KEY'", 
                     "'OFF'", "'FULLTEXT'", "'FILTER'", "'PLAIN'", "'INDEX'", 
                     "'STORAGE'", "'RETURNING'", "'DYNAMIC'", "'STRICT'", 
                     "'IGNORED'", "'ARRAY'", "'ANALYZER'", "'EXTENDS'", 
                     "'TOKENIZER'", "'TOKEN_FILTERS'", "'CHAR_FILTERS'", 
                     "'PARTITIONED'", "'PREPARE'", "'TRANSIENT'", "'PERSISTENT'", 
                     "'MATCH'", "'GENERATED'", "'ALWAYS'", "'USER'", "'ROLE'", 
                     "'GRANT'", "'DENY'", "'REVOKE'", "'PRIVILEGES'", "'SCHEMA'", 
                     "'RETURN'", "'SUMMARY'", "'METADATA'", "'PUBLICATION'", 
                     "'SUBSCRIPTION'", "'CONNECTION'", "'ENABLE'", "'DISABLE'", 
                     "'DECLARE'", "'CURSOR'", "'ASENSITIVE'", "'INSENSITIVE'", 
                     "'BINARY'", "'NO'", "'SCROLL'", "'HOLD'", "'ABSOLUTE'", 
                     "'FORWARD'", "'BACKWARD'", "'RELATIVE'", "'PRIOR'", 
                     "'='", "<INVALID>", "'<'", "'<='", "'>'", "'>='", "'<<'", 
                     "'~'", "'!~'", "'~*'", "'!~*'", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'||'", "'::'", "';'", "':'", "','", 
                     "'.'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'[]'", 
                     "'?'", "'$'", "'&'", "'|'", "'#'" ]

    symbolicNames = [ "<INVALID>", "AUTHORIZATION", "SELECT", "FROM", "TO", 
                      "AS", "AT", "ALL", "ANY", "SOME", "DEALLOCATE", "DIRECTORY", 
                      "DISTINCT", "WHERE", "GROUP", "BY", "ORDER", "HAVING", 
                      "LIMIT", "OFFSET", "OR", "AND", "IN", "NOT", "EXISTS", 
                      "BETWEEN", "LIKE", "ILIKE", "IS", "NULL", "TRUE", 
                      "FALSE", "IGNORE", "RESPECT", "NULLS", "FETCH", "FIRST", 
                      "LAST", "NEXT", "ESCAPE", "ASC", "DESC", "SUBSTRING", 
                      "TRIM", "LEADING", "TRAILING", "BOTH", "FOR", "TIME", 
                      "ZONE", "YEAR", "MONTH", "DAY", "HOUR", "MINUTE", 
                      "SECOND", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "CURRENT_SCHEMA", "CURRENT_USER", "SESSION_USER", 
                      "EXTRACT", "CASE", "WHEN", "THEN", "ELSE", "END", 
                      "IF", "INTERVAL", "JOIN", "CROSS", "OUTER", "INNER", 
                      "LEFT", "RIGHT", "FULL", "NATURAL", "USING", "ON", 
                      "OVER", "WINDOW", "PARTITION", "PROMOTE", "RANGE", 
                      "ROWS", "UNBOUNDED", "PRECEDING", "FOLLOWING", "CURRENT", 
                      "ROW", "WITH", "WITHOUT", "RECURSIVE", "CREATE", "BLOB", 
                      "TABLE", "SWAP", "GC", "DANGLING", "ARTIFACTS", "DECOMMISSION", 
                      "CLUSTER", "REPOSITORY", "SNAPSHOT", "ALTER", "KILL", 
                      "ONLY", "ADD", "COLUMN", "OPEN", "CLOSE", "RENAME", 
                      "REROUTE", "MOVE", "SHARD", "ALLOCATE", "REPLICA", 
                      "CANCEL", "RETRY", "FAILED", "BOOLEAN", "BYTE", "SHORT", 
                      "INTEGER", "INT", "LONG", "FLOAT", "DOUBLE", "PRECISION", 
                      "TIMESTAMP", "IP", "CHARACTER", "CHAR_SPECIAL", "VARYING", 
                      "OBJECT", "STRING_TYPE", "GEO_POINT", "GEO_SHAPE", 
                      "GLOBAL", "SESSION", "LOCAL", "BEGIN", "START", "COMMIT", 
                      "WORK", "TRANSACTION", "TRANSACTION_ISOLATION", "CHARACTERISTICS", 
                      "ISOLATION", "LEVEL", "SERIALIZABLE", "REPEATABLE", 
                      "COMMITTED", "UNCOMMITTED", "READ", "WRITE", "DEFERRABLE", 
                      "RETURNS", "CALLED", "REPLACE", "FUNCTION", "LANGUAGE", 
                      "INPUT", "ANALYZE", "COSTS", "VERBOSE", "DISCARD", 
                      "PLANS", "SEQUENCES", "TEMPORARY", "TEMP", "CONSTRAINT", 
                      "CHECK", "DESCRIBE", "EXPLAIN", "FORMAT", "TYPE", 
                      "TEXT", "GRAPHVIZ", "LOGICAL", "DISTRIBUTED", "CAST", 
                      "TRY_CAST", "SHOW", "TABLES", "SCHEMAS", "CATALOGS", 
                      "COLUMNS", "PARTITIONS", "FUNCTIONS", "MATERIALIZED", 
                      "VIEW", "OPTIMIZE", "REFRESH", "RESTORE", "DROP", 
                      "ALIAS", "UNION", "EXCEPT", "INTERSECT", "SYSTEM", 
                      "BERNOULLI", "TABLESAMPLE", "STRATIFY", "INSERT", 
                      "INTO", "VALUES", "DELETE", "UPDATE", "KEY", "DUPLICATE", 
                      "CONFLICT", "DO", "NOTHING", "SET", "RESET", "DEFAULT", 
                      "COPY", "CLUSTERED", "SHARDS", "PRIMARY_KEY", "OFF", 
                      "FULLTEXT", "FILTER", "PLAIN", "INDEX", "STORAGE", 
                      "RETURNING", "DYNAMIC", "STRICT", "IGNORED", "ARRAY", 
                      "ANALYZER", "EXTENDS", "TOKENIZER", "TOKEN_FILTERS", 
                      "CHAR_FILTERS", "PARTITIONED", "PREPARE", "TRANSIENT", 
                      "PERSISTENT", "MATCH", "GENERATED", "ALWAYS", "USER", 
                      "ROLE", "GRANT", "DENY", "REVOKE", "PRIVILEGES", "SCHEMA", 
                      "RETURN", "SUMMARY", "METADATA", "PUBLICATION", "SUBSCRIPTION", 
                      "CONNECTION", "ENABLE", "DISABLE", "DECLARE", "CURSOR", 
                      "ASENSITIVE", "INSENSITIVE", "BINARY", "NO", "SCROLL", 
                      "HOLD", "ABSOLUTE", "FORWARD", "BACKWARD", "RELATIVE", 
                      "PRIOR", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "LLT", 
                      "REGEX_MATCH", "REGEX_NO_MATCH", "REGEX_MATCH_CI", 
                      "REGEX_NO_MATCH_CI", "PLUS", "MINUS", "ASTERISK", 
                      "SLASH", "PERCENT", "CONCAT", "CAST_OPERATOR", "SEMICOLON", 
                      "COLON", "COMMA", "DOT", "OPEN_ROUND_BRACKET", "CLOSE_ROUND_BRACKET", 
                      "OPEN_CURLY_BRACKET", "CLOSE_CURLY_BRACKET", "OPEN_SQUARE_BRACKET", 
                      "CLOSE_SQUARE_BRACKET", "EMPTY_SQUARE_BRACKET", "QUESTION", 
                      "DOLLAR", "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", 
                      "STRING", "ESCAPED_STRING", "BIT_STRING", "INTEGER_VALUE", 
                      "DECIMAL_VALUE", "IDENTIFIER", "DIGIT_IDENTIFIER", 
                      "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", "BEGIN_DOLLAR_QUOTED_STRING", 
                      "COMMENT", "WS", "UNRECOGNIZED", "DOLLAR_QUOTED_STRING_BODY", 
                      "END_DOLLAR_QUOTED_STRING" ]

    RULE_statements = 0
    RULE_singleStatement = 1
    RULE_singleExpression = 2
    RULE_statement = 3
    RULE_dropStmt = 4
    RULE_alterStmt = 5
    RULE_queryOptParens = 6
    RULE_query = 7
    RULE_queryNoWith = 8
    RULE_limitClause = 9
    RULE_offsetClause = 10
    RULE_queryTerm = 11
    RULE_setQuant = 12
    RULE_sortItem = 13
    RULE_querySpec = 14
    RULE_selectItem = 15
    RULE_where = 16
    RULE_returning = 17
    RULE_filter = 18
    RULE_relation = 19
    RULE_joinType = 20
    RULE_joinCriteria = 21
    RULE_aliasedRelation = 22
    RULE_relationPrimary = 23
    RULE_tableWithPartition = 24
    RULE_table = 25
    RULE_aliasedColumns = 26
    RULE_with = 27
    RULE_namedQuery = 28
    RULE_expr = 29
    RULE_booleanExpression = 30
    RULE_predicated = 31
    RULE_predicate = 32
    RULE_valueExpression = 33
    RULE_primaryExpression = 34
    RULE_explicitFunction = 35
    RULE_subqueryExpression = 36
    RULE_parameterOrLiteral = 37
    RULE_parameterOrSimpleLiteral = 38
    RULE_parameterOrInteger = 39
    RULE_parameterOrIdent = 40
    RULE_parameterOrString = 41
    RULE_parameterExpr = 42
    RULE_nullLiteral = 43
    RULE_escapedCharsStringLiteral = 44
    RULE_dollarQuotedStringLiteral = 45
    RULE_stringLiteral = 46
    RULE_bitString = 47
    RULE_subscriptSafe = 48
    RULE_cmpOp = 49
    RULE_setCmpQuantifier = 50
    RULE_whenClause = 51
    RULE_namedWindow = 52
    RULE_over = 53
    RULE_windowDefinition = 54
    RULE_windowFrame = 55
    RULE_frameBound = 56
    RULE_qnames = 57
    RULE_qname = 58
    RULE_spaceSeparatedIdents = 59
    RULE_identWithOrWithoutValue = 60
    RULE_idents = 61
    RULE_ident = 62
    RULE_unquotedIdent = 63
    RULE_quotedIdent = 64
    RULE_stringLiteralOrIdentifier = 65
    RULE_stringLiteralOrIdentifierOrQname = 66
    RULE_numericLiteral = 67
    RULE_intervalLiteral = 68
    RULE_intervalField = 69
    RULE_booleanLiteral = 70
    RULE_decimalLiteral = 71
    RULE_integerLiteral = 72
    RULE_objectKeyValue = 73
    RULE_insertSource = 74
    RULE_onConflict = 75
    RULE_conflictTarget = 76
    RULE_values = 77
    RULE_columns = 78
    RULE_assignment = 79
    RULE_createStmt = 80
    RULE_functionArgument = 81
    RULE_alterTableDefinition = 82
    RULE_alterSubscriptionMode = 83
    RULE_partitionedByOrClusteredInto = 84
    RULE_partitionedBy = 85
    RULE_clusteredBy = 86
    RULE_blobClusteredInto = 87
    RULE_tableElement = 88
    RULE_columnDefinition = 89
    RULE_addColumnDefinition = 90
    RULE_dropColumnDefinition = 91
    RULE_rerouteOption = 92
    RULE_dataType = 93
    RULE_baseDataType = 94
    RULE_definedDataType = 95
    RULE_objectTypeDefinition = 96
    RULE_columnConstraint = 97
    RULE_primaryKeyContraint = 98
    RULE_checkConstraint = 99
    RULE_withProperties = 100
    RULE_genericProperties = 101
    RULE_genericProperty = 102
    RULE_explainOptions = 103
    RULE_explainOption = 104
    RULE_matchPredicateIdents = 105
    RULE_matchPredicateIdent = 106
    RULE_analyzerElement = 107
    RULE_tokenizer = 108
    RULE_tokenFilters = 109
    RULE_charFilters = 110
    RULE_namedProperties = 111
    RULE_tableWithPartitions = 112
    RULE_setGlobalAssignment = 113
    RULE_setExpr = 114
    RULE_on = 115
    RULE_securable = 116
    RULE_transactionMode = 117
    RULE_isolationLevel = 118
    RULE_direction = 119
    RULE_declareCursorParams = 120
    RULE_nonReserved = 121

    ruleNames =  [ "statements", "singleStatement", "singleExpression", 
                   "statement", "dropStmt", "alterStmt", "queryOptParens", 
                   "query", "queryNoWith", "limitClause", "offsetClause", 
                   "queryTerm", "setQuant", "sortItem", "querySpec", "selectItem", 
                   "where", "returning", "filter", "relation", "joinType", 
                   "joinCriteria", "aliasedRelation", "relationPrimary", 
                   "tableWithPartition", "table", "aliasedColumns", "with", 
                   "namedQuery", "expr", "booleanExpression", "predicated", 
                   "predicate", "valueExpression", "primaryExpression", 
                   "explicitFunction", "subqueryExpression", "parameterOrLiteral", 
                   "parameterOrSimpleLiteral", "parameterOrInteger", "parameterOrIdent", 
                   "parameterOrString", "parameterExpr", "nullLiteral", 
                   "escapedCharsStringLiteral", "dollarQuotedStringLiteral", 
                   "stringLiteral", "bitString", "subscriptSafe", "cmpOp", 
                   "setCmpQuantifier", "whenClause", "namedWindow", "over", 
                   "windowDefinition", "windowFrame", "frameBound", "qnames", 
                   "qname", "spaceSeparatedIdents", "identWithOrWithoutValue", 
                   "idents", "ident", "unquotedIdent", "quotedIdent", "stringLiteralOrIdentifier", 
                   "stringLiteralOrIdentifierOrQname", "numericLiteral", 
                   "intervalLiteral", "intervalField", "booleanLiteral", 
                   "decimalLiteral", "integerLiteral", "objectKeyValue", 
                   "insertSource", "onConflict", "conflictTarget", "values", 
                   "columns", "assignment", "createStmt", "functionArgument", 
                   "alterTableDefinition", "alterSubscriptionMode", "partitionedByOrClusteredInto", 
                   "partitionedBy", "clusteredBy", "blobClusteredInto", 
                   "tableElement", "columnDefinition", "addColumnDefinition", 
                   "dropColumnDefinition", "rerouteOption", "dataType", 
                   "baseDataType", "definedDataType", "objectTypeDefinition", 
                   "columnConstraint", "primaryKeyContraint", "checkConstraint", 
                   "withProperties", "genericProperties", "genericProperty", 
                   "explainOptions", "explainOption", "matchPredicateIdents", 
                   "matchPredicateIdent", "analyzerElement", "tokenizer", 
                   "tokenFilters", "charFilters", "namedProperties", "tableWithPartitions", 
                   "setGlobalAssignment", "setExpr", "on", "securable", 
                   "transactionMode", "isolationLevel", "direction", "declareCursorParams", 
                   "nonReserved" ]

    EOF = Token.EOF
    AUTHORIZATION=1
    SELECT=2
    FROM=3
    TO=4
    AS=5
    AT=6
    ALL=7
    ANY=8
    SOME=9
    DEALLOCATE=10
    DIRECTORY=11
    DISTINCT=12
    WHERE=13
    GROUP=14
    BY=15
    ORDER=16
    HAVING=17
    LIMIT=18
    OFFSET=19
    OR=20
    AND=21
    IN=22
    NOT=23
    EXISTS=24
    BETWEEN=25
    LIKE=26
    ILIKE=27
    IS=28
    NULL=29
    TRUE=30
    FALSE=31
    IGNORE=32
    RESPECT=33
    NULLS=34
    FETCH=35
    FIRST=36
    LAST=37
    NEXT=38
    ESCAPE=39
    ASC=40
    DESC=41
    SUBSTRING=42
    TRIM=43
    LEADING=44
    TRAILING=45
    BOTH=46
    FOR=47
    TIME=48
    ZONE=49
    YEAR=50
    MONTH=51
    DAY=52
    HOUR=53
    MINUTE=54
    SECOND=55
    CURRENT_DATE=56
    CURRENT_TIME=57
    CURRENT_TIMESTAMP=58
    CURRENT_SCHEMA=59
    CURRENT_USER=60
    SESSION_USER=61
    EXTRACT=62
    CASE=63
    WHEN=64
    THEN=65
    ELSE=66
    END=67
    IF=68
    INTERVAL=69
    JOIN=70
    CROSS=71
    OUTER=72
    INNER=73
    LEFT=74
    RIGHT=75
    FULL=76
    NATURAL=77
    USING=78
    ON=79
    OVER=80
    WINDOW=81
    PARTITION=82
    PROMOTE=83
    RANGE=84
    ROWS=85
    UNBOUNDED=86
    PRECEDING=87
    FOLLOWING=88
    CURRENT=89
    ROW=90
    WITH=91
    WITHOUT=92
    RECURSIVE=93
    CREATE=94
    BLOB=95
    TABLE=96
    SWAP=97
    GC=98
    DANGLING=99
    ARTIFACTS=100
    DECOMMISSION=101
    CLUSTER=102
    REPOSITORY=103
    SNAPSHOT=104
    ALTER=105
    KILL=106
    ONLY=107
    ADD=108
    COLUMN=109
    OPEN=110
    CLOSE=111
    RENAME=112
    REROUTE=113
    MOVE=114
    SHARD=115
    ALLOCATE=116
    REPLICA=117
    CANCEL=118
    RETRY=119
    FAILED=120
    BOOLEAN=121
    BYTE=122
    SHORT=123
    INTEGER=124
    INT=125
    LONG=126
    FLOAT=127
    DOUBLE=128
    PRECISION=129
    TIMESTAMP=130
    IP=131
    CHARACTER=132
    CHAR_SPECIAL=133
    VARYING=134
    OBJECT=135
    STRING_TYPE=136
    GEO_POINT=137
    GEO_SHAPE=138
    GLOBAL=139
    SESSION=140
    LOCAL=141
    BEGIN=142
    START=143
    COMMIT=144
    WORK=145
    TRANSACTION=146
    TRANSACTION_ISOLATION=147
    CHARACTERISTICS=148
    ISOLATION=149
    LEVEL=150
    SERIALIZABLE=151
    REPEATABLE=152
    COMMITTED=153
    UNCOMMITTED=154
    READ=155
    WRITE=156
    DEFERRABLE=157
    RETURNS=158
    CALLED=159
    REPLACE=160
    FUNCTION=161
    LANGUAGE=162
    INPUT=163
    ANALYZE=164
    COSTS=165
    VERBOSE=166
    DISCARD=167
    PLANS=168
    SEQUENCES=169
    TEMPORARY=170
    TEMP=171
    CONSTRAINT=172
    CHECK=173
    DESCRIBE=174
    EXPLAIN=175
    FORMAT=176
    TYPE=177
    TEXT=178
    GRAPHVIZ=179
    LOGICAL=180
    DISTRIBUTED=181
    CAST=182
    TRY_CAST=183
    SHOW=184
    TABLES=185
    SCHEMAS=186
    CATALOGS=187
    COLUMNS=188
    PARTITIONS=189
    FUNCTIONS=190
    MATERIALIZED=191
    VIEW=192
    OPTIMIZE=193
    REFRESH=194
    RESTORE=195
    DROP=196
    ALIAS=197
    UNION=198
    EXCEPT=199
    INTERSECT=200
    SYSTEM=201
    BERNOULLI=202
    TABLESAMPLE=203
    STRATIFY=204
    INSERT=205
    INTO=206
    VALUES=207
    DELETE=208
    UPDATE=209
    KEY=210
    DUPLICATE=211
    CONFLICT=212
    DO=213
    NOTHING=214
    SET=215
    RESET=216
    DEFAULT=217
    COPY=218
    CLUSTERED=219
    SHARDS=220
    PRIMARY_KEY=221
    OFF=222
    FULLTEXT=223
    FILTER=224
    PLAIN=225
    INDEX=226
    STORAGE=227
    RETURNING=228
    DYNAMIC=229
    STRICT=230
    IGNORED=231
    ARRAY=232
    ANALYZER=233
    EXTENDS=234
    TOKENIZER=235
    TOKEN_FILTERS=236
    CHAR_FILTERS=237
    PARTITIONED=238
    PREPARE=239
    TRANSIENT=240
    PERSISTENT=241
    MATCH=242
    GENERATED=243
    ALWAYS=244
    USER=245
    ROLE=246
    GRANT=247
    DENY=248
    REVOKE=249
    PRIVILEGES=250
    SCHEMA=251
    RETURN=252
    SUMMARY=253
    METADATA=254
    PUBLICATION=255
    SUBSCRIPTION=256
    CONNECTION=257
    ENABLE=258
    DISABLE=259
    DECLARE=260
    CURSOR=261
    ASENSITIVE=262
    INSENSITIVE=263
    BINARY=264
    NO=265
    SCROLL=266
    HOLD=267
    ABSOLUTE=268
    FORWARD=269
    BACKWARD=270
    RELATIVE=271
    PRIOR=272
    EQ=273
    NEQ=274
    LT=275
    LTE=276
    GT=277
    GTE=278
    LLT=279
    REGEX_MATCH=280
    REGEX_NO_MATCH=281
    REGEX_MATCH_CI=282
    REGEX_NO_MATCH_CI=283
    PLUS=284
    MINUS=285
    ASTERISK=286
    SLASH=287
    PERCENT=288
    CONCAT=289
    CAST_OPERATOR=290
    SEMICOLON=291
    COLON=292
    COMMA=293
    DOT=294
    OPEN_ROUND_BRACKET=295
    CLOSE_ROUND_BRACKET=296
    OPEN_CURLY_BRACKET=297
    CLOSE_CURLY_BRACKET=298
    OPEN_SQUARE_BRACKET=299
    CLOSE_SQUARE_BRACKET=300
    EMPTY_SQUARE_BRACKET=301
    QUESTION=302
    DOLLAR=303
    BITWISE_AND=304
    BITWISE_OR=305
    BITWISE_XOR=306
    STRING=307
    ESCAPED_STRING=308
    BIT_STRING=309
    INTEGER_VALUE=310
    DECIMAL_VALUE=311
    IDENTIFIER=312
    DIGIT_IDENTIFIER=313
    QUOTED_IDENTIFIER=314
    BACKQUOTED_IDENTIFIER=315
    BEGIN_DOLLAR_QUOTED_STRING=316
    COMMENT=317
    WS=318
    UNRECOGNIZED=319
    DOLLAR_QUOTED_STRING_BODY=320
    END_DOLLAR_QUOTED_STRING=321

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.StatementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.StatementContext,i)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SEMICOLON)
            else:
                return self.getToken(SqlBaseParser.SEMICOLON, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)




    def statements(self):

        localctx = SqlBaseParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.statement()
            self.state = 249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 245
                    self.match(SqlBaseParser.SEMICOLON)
                    self.state = 246
                    self.statement() 
                self.state = 251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 252
                self.match(SqlBaseParser.SEMICOLON)


            self.state = 255
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def SEMICOLON(self):
            return self.getToken(SqlBaseParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStatement" ):
                listener.enterSingleStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStatement" ):
                listener.exitSingleStatement(self)




    def singleStatement(self):

        localctx = SqlBaseParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.statement()
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==291:
                self.state = 258
                self.match(SqlBaseParser.SEMICOLON)


            self.state = 261
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def EOF(self):
            return self.getToken(SqlBaseParser.EOF, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_singleExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleExpression" ):
                listener.enterSingleExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleExpression" ):
                listener.exitSingleExpression(self)




    def singleExpression(self):

        localctx = SqlBaseParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.expr()
            self.state = 264
            self.match(SqlBaseParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(SqlBaseParser.StatementContext,0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)
        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)
        def explainOptions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExplainOptionsContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExplainOptionsContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplain" ):
                listener.enterExplain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplain" ):
                listener.exitExplain(self)


    class SetTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransactionModeContext,i)

        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def CHARACTERISTICS(self):
            return self.getToken(SqlBaseParser.CHARACTERISTICS, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransaction" ):
                listener.enterSetTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransaction" ):
                listener.exitSetTransaction(self)


    class DropContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dropStmt(self):
            return self.getTypedRuleContext(SqlBaseParser.DropStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop" ):
                listener.enterDrop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop" ):
                listener.exitDrop(self)


    class DiscardContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(SqlBaseParser.DISCARD, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PLANS(self):
            return self.getToken(SqlBaseParser.PLANS, 0)
        def SEQUENCES(self):
            return self.getToken(SqlBaseParser.SEQUENCES, 0)
        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)
        def TEMP(self):
            return self.getToken(SqlBaseParser.TEMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiscard" ):
                listener.enterDiscard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiscard" ):
                listener.exitDiscard(self)


    class StartTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransactionModeContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)


    class DeclareContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECLARE(self):
            return self.getToken(SqlBaseParser.DECLARE, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def declareCursorParams(self):
            return self.getTypedRuleContext(SqlBaseParser.DeclareCursorParamsContext,0)

        def CURSOR(self):
            return self.getToken(SqlBaseParser.CURSOR, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)

        def HOLD(self):
            return self.getToken(SqlBaseParser.HOLD, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare" ):
                listener.enterDeclare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare" ):
                listener.exitDeclare(self)


    class DeallocateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.prepStmt = None # StringLiteralOrIdentifierOrQnameContext
            self.copyFrom(ctx)

        def DEALLOCATE(self):
            return self.getToken(SqlBaseParser.DEALLOCATE, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)
        def stringLiteralOrIdentifierOrQname(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralOrIdentifierOrQnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocate" ):
                listener.enterDeallocate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocate" ):
                listener.exitDeallocate(self)


    class CommitContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)
        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)


    class UpdateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)
        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AssignmentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def returning(self):
            return self.getTypedRuleContext(SqlBaseParser.ReturningContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate" ):
                listener.enterUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate" ):
                listener.exitUpdate(self)


    class InsertContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(SqlBaseParser.INSERT, 0)
        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def insertSource(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertSourceContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def onConflict(self):
            return self.getTypedRuleContext(SqlBaseParser.OnConflictContext,0)

        def returning(self):
            return self.getTypedRuleContext(SqlBaseParser.ReturningContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert" ):
                listener.enterInsert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert" ):
                listener.exitInsert(self)


    class DeleteContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(SqlBaseParser.DELETE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)

        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete" ):
                listener.enterDelete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete" ):
                listener.exitDelete(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTables" ):
                listener.enterShowTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTables" ):
                listener.exitShowTables(self)


    class SetGlobalContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)
        def setGlobalAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SetGlobalAssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SetGlobalAssignmentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def PERSISTENT(self):
            return self.getToken(SqlBaseParser.PERSISTENT, 0)
        def TRANSIENT(self):
            return self.getToken(SqlBaseParser.TRANSIENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetGlobal" ):
                listener.enterSetGlobal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetGlobal" ):
                listener.exitSetGlobal(self)


    class CopyToContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None # ExprContext
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(SqlBaseParser.COPY, 0)
        def tableWithPartition(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionContext,0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def columns(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnsContext,0)

        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def DIRECTORY(self):
            return self.getToken(SqlBaseParser.DIRECTORY, 0)
        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyTo" ):
                listener.enterCopyTo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyTo" ):
                listener.exitCopyTo(self)


    class ShowSessionParameterContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSessionParameter" ):
                listener.enterShowSessionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSessionParameter" ):
                listener.exitShowSessionParameter(self)


    class DefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault" ):
                listener.enterDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault" ):
                listener.exitDefault(self)


    class OptimizeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTIMIZE(self):
            return self.getToken(SqlBaseParser.OPTIMIZE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableWithPartitions(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionsContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimize" ):
                listener.enterOptimize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimize" ):
                listener.exitOptimize(self)


    class ResetGlobalContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)
        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetGlobal" ):
                listener.enterResetGlobal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetGlobal" ):
                listener.exitResetGlobal(self)


    class RevokePrivilegeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.privileges = None # IdentsContext
            self.users = None # IdentsContext
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(SqlBaseParser.REVOKE, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def idents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentsContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentsContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def securable(self):
            return self.getTypedRuleContext(SqlBaseParser.SecurableContext,0)

        def qnames(self):
            return self.getTypedRuleContext(SqlBaseParser.QnamesContext,0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokePrivilege" ):
                listener.enterRevokePrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokePrivilege" ):
                listener.exitRevokePrivilege(self)


    class SetTimeZoneContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTimeZone" ):
                listener.enterSetTimeZone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTimeZone" ):
                listener.exitSetTimeZone(self)


    class CreateContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createStmt(self):
            return self.getTypedRuleContext(SqlBaseParser.CreateStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateTable" ):
                listener.enterShowCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateTable" ):
                listener.exitShowCreateTable(self)


    class ShowSchemasContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.pattern = None # StringLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemas" ):
                listener.enterShowSchemas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemas" ):
                listener.exitShowSchemas(self)


    class CloseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(SqlBaseParser.CLOSE, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClose" ):
                listener.enterClose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClose" ):
                listener.exitClose(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.tableName = None # QnameContext
            self.schema = None # QnameContext
            self.pattern = None # StringLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.FROM)
            else:
                return self.getToken(SqlBaseParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.IN)
            else:
                return self.getToken(SqlBaseParser.IN, i)
        def qname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QnameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QnameContext,i)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)


    class AlterContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def alterStmt(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterStmtContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter" ):
                listener.enterAlter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter" ):
                listener.exitAlter(self)


    class SetContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)
        def setExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SetExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SetExprContext,i)

        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet" ):
                listener.enterSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet" ):
                listener.exitSet(self)


    class RestoreContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.metatypes = None # IdentsContext
            self.copyFrom(ctx)

        def RESTORE(self):
            return self.getToken(SqlBaseParser.RESTORE, 0)
        def SNAPSHOT(self):
            return self.getToken(SqlBaseParser.SNAPSHOT, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def METADATA(self):
            return self.getToken(SqlBaseParser.METADATA, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableWithPartitions(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionsContext,0)

        def idents(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentsContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestore" ):
                listener.enterRestore(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestore" ):
                listener.exitRestore(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableWithPartitions(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefreshTable" ):
                listener.enterRefreshTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefreshTable" ):
                listener.exitRefreshTable(self)


    class GrantPrivilegeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.priviliges = None # IdentsContext
            self.users = None # IdentsContext
            self.copyFrom(ctx)

        def GRANT(self):
            return self.getToken(SqlBaseParser.GRANT, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def idents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentsContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentsContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def securable(self):
            return self.getTypedRuleContext(SqlBaseParser.SecurableContext,0)

        def qnames(self):
            return self.getTypedRuleContext(SqlBaseParser.QnamesContext,0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantPrivilege" ):
                listener.enterGrantPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantPrivilege" ):
                listener.exitGrantPrivilege(self)


    class DenyPrivilegeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.priviliges = None # IdentsContext
            self.users = None # IdentsContext
            self.copyFrom(ctx)

        def DENY(self):
            return self.getToken(SqlBaseParser.DENY, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def idents(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentsContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentsContext,i)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def securable(self):
            return self.getTypedRuleContext(SqlBaseParser.SecurableContext,0)

        def qnames(self):
            return self.getTypedRuleContext(SqlBaseParser.QnamesContext,0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDenyPrivilege" ):
                listener.enterDenyPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDenyPrivilege" ):
                listener.exitDenyPrivilege(self)


    class SetSessionAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.username = None # StringLiteralOrIdentifierContext
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def SESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SESSION)
            else:
                return self.getToken(SqlBaseParser.SESSION, i)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)
        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)
        def stringLiteralOrIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralOrIdentifierContext,0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetSessionAuthorization" ):
                listener.enterSetSessionAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetSessionAuthorization" ):
                listener.exitSetSessionAuthorization(self)


    class KillContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.jobId = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def KILL(self):
            return self.getToken(SqlBaseParser.KILL, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def parameterOrString(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKill" ):
                listener.enterKill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKill" ):
                listener.exitKill(self)


    class CopyFromContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.path = None # ExprContext
            self.copyFrom(ctx)

        def COPY(self):
            return self.getToken(SqlBaseParser.COPY, 0)
        def tableWithPartition(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)

        def RETURN(self):
            return self.getToken(SqlBaseParser.RETURN, 0)
        def SUMMARY(self):
            return self.getToken(SqlBaseParser.SUMMARY, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyFrom" ):
                listener.enterCopyFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyFrom" ):
                listener.exitCopyFrom(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze" ):
                listener.enterAnalyze(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze" ):
                listener.exitAnalyze(self)


    class FetchContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def direction(self):
            return self.getTypedRuleContext(SqlBaseParser.DirectionContext,0)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch" ):
                listener.enterFetch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch" ):
                listener.exitFetch(self)


    class ShowTransactionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)
        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)
        def TRANSACTION_ISOLATION(self):
            return self.getToken(SqlBaseParser.TRANSACTION_ISOLATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowTransaction" ):
                listener.enterShowTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowTransaction" ):
                listener.exitShowTransaction(self)


    class ResetSessionAuthorizationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)
        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSessionAuthorization" ):
                listener.enterResetSessionAuthorization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSessionAuthorization" ):
                listener.exitResetSessionAuthorization(self)


    class BeginContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BEGIN(self):
            return self.getToken(SqlBaseParser.BEGIN, 0)
        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TransactionModeContext,i)

        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)
        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin" ):
                listener.enterBegin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin" ):
                listener.exitBegin(self)



    def statement(self):

        localctx = SqlBaseParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 266
                self.query()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.BeginContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 267
                self.match(SqlBaseParser.BEGIN)
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145 or _la==146:
                    self.state = 268
                    _la = self._input.LA(1)
                    if not(_la==145 or _la==146):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23 or ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 321) != 0):
                    self.state = 271
                    self.transactionMode()
                    self.state = 278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==23 or ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 321) != 0) or _la==293:
                        self.state = 273
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==293:
                            self.state = 272
                            self.match(SqlBaseParser.COMMA)


                        self.state = 275
                        self.transactionMode()
                        self.state = 280
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 3:
                localctx = SqlBaseParser.StartTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 283
                self.match(SqlBaseParser.START)
                self.state = 284
                self.match(SqlBaseParser.TRANSACTION)
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23 or ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 321) != 0):
                    self.state = 285
                    self.transactionMode()
                    self.state = 292
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==23 or ((((_la - 149)) & ~0x3f) == 0 and ((1 << (_la - 149)) & 321) != 0) or _la==293:
                        self.state = 287
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==293:
                            self.state = 286
                            self.match(SqlBaseParser.COMMA)


                        self.state = 289
                        self.transactionMode()
                        self.state = 294
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CommitContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 297
                self.match(SqlBaseParser.COMMIT)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145 or _la==146:
                    self.state = 298
                    _la = self._input.LA(1)
                    if not(_la==145 or _la==146):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.CommitContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 301
                self.match(SqlBaseParser.END)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145 or _la==146:
                    self.state = 302
                    _la = self._input.LA(1)
                    if not(_la==145 or _la==146):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 305
                self.match(SqlBaseParser.EXPLAIN)
                self.state = 314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 306
                    self.match(SqlBaseParser.ANALYZE)
                    pass

                elif la_ == 2:
                    self.state = 307
                    self.match(SqlBaseParser.VERBOSE)
                    pass

                elif la_ == 3:
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==295:
                        self.state = 308
                        self.explainOptions()
                        self.state = 313
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 316
                self.statement()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.OptimizeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 317
                self.match(SqlBaseParser.OPTIMIZE)
                self.state = 318
                self.match(SqlBaseParser.TABLE)
                self.state = 319
                self.tableWithPartitions()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 320
                    self.withProperties()


                pass

            elif la_ == 8:
                localctx = SqlBaseParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 323
                self.match(SqlBaseParser.REFRESH)
                self.state = 324
                self.match(SqlBaseParser.TABLE)
                self.state = 325
                self.tableWithPartitions()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.UpdateContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 326
                self.match(SqlBaseParser.UPDATE)
                self.state = 327
                self.aliasedRelation()
                self.state = 328
                self.match(SqlBaseParser.SET)
                self.state = 329
                self.assignment()
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 330
                    self.match(SqlBaseParser.COMMA)
                    self.state = 331
                    self.assignment()
                    self.state = 336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 337
                    self.where()


                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==228:
                    self.state = 340
                    self.returning()


                pass

            elif la_ == 10:
                localctx = SqlBaseParser.DeleteContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 343
                self.match(SqlBaseParser.DELETE)
                self.state = 344
                self.match(SqlBaseParser.FROM)
                self.state = 345
                self.aliasedRelation()
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 346
                    self.where()


                pass

            elif la_ == 11:
                localctx = SqlBaseParser.ShowTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 349
                self.match(SqlBaseParser.SHOW)
                self.state = 354
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [146]:
                    self.state = 350
                    self.match(SqlBaseParser.TRANSACTION)
                    self.state = 351
                    self.match(SqlBaseParser.ISOLATION)
                    self.state = 352
                    self.match(SqlBaseParser.LEVEL)
                    pass
                elif token in [147]:
                    self.state = 353
                    self.match(SqlBaseParser.TRANSACTION_ISOLATION)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                localctx = SqlBaseParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 356
                self.match(SqlBaseParser.SHOW)
                self.state = 357
                self.match(SqlBaseParser.CREATE)
                self.state = 358
                self.match(SqlBaseParser.TABLE)
                self.state = 359
                self.table()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 360
                self.match(SqlBaseParser.SHOW)
                self.state = 361
                self.match(SqlBaseParser.TABLES)
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==22:
                    self.state = 362
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==22):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 363
                    self.qname()


                self.state = 369
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 366
                    self.match(SqlBaseParser.LIKE)
                    self.state = 367
                    localctx.pattern = self.stringLiteral()
                    pass
                elif token in [13]:
                    self.state = 368
                    self.where()
                    pass
                elif token in [-1, 291]:
                    pass
                else:
                    pass
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.ShowSchemasContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 371
                self.match(SqlBaseParser.SHOW)
                self.state = 372
                self.match(SqlBaseParser.SCHEMAS)
                self.state = 376
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 373
                    self.match(SqlBaseParser.LIKE)
                    self.state = 374
                    localctx.pattern = self.stringLiteral()
                    pass
                elif token in [13]:
                    self.state = 375
                    self.where()
                    pass
                elif token in [-1, 291]:
                    pass
                else:
                    pass
                pass

            elif la_ == 15:
                localctx = SqlBaseParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 378
                self.match(SqlBaseParser.SHOW)
                self.state = 379
                self.match(SqlBaseParser.COLUMNS)
                self.state = 380
                _la = self._input.LA(1)
                if not(_la==3 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 381
                localctx.tableName = self.qname()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==22:
                    self.state = 382
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==22):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 383
                    localctx.schema = self.qname()


                self.state = 389
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [26]:
                    self.state = 386
                    self.match(SqlBaseParser.LIKE)
                    self.state = 387
                    localctx.pattern = self.stringLiteral()
                    pass
                elif token in [13]:
                    self.state = 388
                    self.where()
                    pass
                elif token in [-1, 291]:
                    pass
                else:
                    pass
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.ShowSessionParameterContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 391
                self.match(SqlBaseParser.SHOW)
                self.state = 394
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313, 314, 315]:
                    self.state = 392
                    self.qname()
                    pass
                elif token in [7]:
                    self.state = 393
                    self.match(SqlBaseParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 17:
                localctx = SqlBaseParser.AlterContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 396
                self.alterStmt()
                pass

            elif la_ == 18:
                localctx = SqlBaseParser.ResetGlobalContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 397
                self.match(SqlBaseParser.RESET)
                self.state = 398
                self.match(SqlBaseParser.GLOBAL)
                self.state = 399
                self.primaryExpression(0)
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 400
                    self.match(SqlBaseParser.COMMA)
                    self.state = 401
                    self.primaryExpression(0)
                    self.state = 406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 19:
                localctx = SqlBaseParser.SetTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 407
                self.match(SqlBaseParser.SET)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==140:
                    self.state = 408
                    self.match(SqlBaseParser.SESSION)
                    self.state = 409
                    self.match(SqlBaseParser.CHARACTERISTICS)
                    self.state = 410
                    self.match(SqlBaseParser.AS)


                self.state = 413
                self.match(SqlBaseParser.TRANSACTION)
                self.state = 414
                self.transactionMode()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 415
                    self.match(SqlBaseParser.COMMA)
                    self.state = 416
                    self.transactionMode()
                    self.state = 421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 20:
                localctx = SqlBaseParser.SetSessionAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 422
                self.match(SqlBaseParser.SET)
                self.state = 424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 423
                    _la = self._input.LA(1)
                    if not(_la==140 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 426
                self.match(SqlBaseParser.SESSION)
                self.state = 427
                self.match(SqlBaseParser.AUTHORIZATION)
                self.state = 430
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [217]:
                    self.state = 428
                    self.match(SqlBaseParser.DEFAULT)
                    pass
                elif token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 307, 312, 313, 314, 315, 316]:
                    self.state = 429
                    localctx.username = self.stringLiteralOrIdentifier()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                localctx = SqlBaseParser.ResetSessionAuthorizationContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 432
                self.match(SqlBaseParser.RESET)
                self.state = 433
                self.match(SqlBaseParser.SESSION)
                self.state = 434
                self.match(SqlBaseParser.AUTHORIZATION)
                pass

            elif la_ == 22:
                localctx = SqlBaseParser.SetContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 435
                self.match(SqlBaseParser.SET)
                self.state = 437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 436
                    _la = self._input.LA(1)
                    if not(_la==140 or _la==141):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 439
                self.qname()
                self.state = 440
                _la = self._input.LA(1)
                if not(_la==4 or _la==273):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 450
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [217]:
                    self.state = 441
                    self.match(SqlBaseParser.DEFAULT)
                    pass
                elif token in [1, 4, 6, 10, 27, 30, 31, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 307, 310, 311, 312, 313, 314, 315, 316]:
                    self.state = 442
                    self.setExpr()
                    self.state = 447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 443
                        self.match(SqlBaseParser.COMMA)
                        self.state = 444
                        self.setExpr()
                        self.state = 449
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                localctx = SqlBaseParser.SetGlobalContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 452
                self.match(SqlBaseParser.SET)
                self.state = 453
                self.match(SqlBaseParser.GLOBAL)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==240 or _la==241:
                    self.state = 454
                    _la = self._input.LA(1)
                    if not(_la==240 or _la==241):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 457
                self.setGlobalAssignment()
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 458
                    self.match(SqlBaseParser.COMMA)
                    self.state = 459
                    self.setGlobalAssignment()
                    self.state = 464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 24:
                localctx = SqlBaseParser.SetTimeZoneContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 465
                self.match(SqlBaseParser.SET)
                self.state = 466
                self.match(SqlBaseParser.TIME)
                self.state = 467
                self.match(SqlBaseParser.ZONE)
                self.state = 471
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [141]:
                    self.state = 468
                    self.match(SqlBaseParser.LOCAL)
                    pass
                elif token in [217]:
                    self.state = 469
                    self.match(SqlBaseParser.DEFAULT)
                    pass
                elif token in [307, 316]:
                    self.state = 470
                    self.stringLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 25:
                localctx = SqlBaseParser.KillContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 473
                self.match(SqlBaseParser.KILL)
                self.state = 476
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 474
                    self.match(SqlBaseParser.ALL)
                    pass
                elif token in [302, 303, 307, 316]:
                    self.state = 475
                    localctx.jobId = self.parameterOrString()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 26:
                localctx = SqlBaseParser.InsertContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 478
                self.match(SqlBaseParser.INSERT)
                self.state = 479
                self.match(SqlBaseParser.INTO)
                self.state = 480
                self.table()
                self.state = 492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 481
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 482
                    self.ident()
                    self.state = 487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 483
                        self.match(SqlBaseParser.COMMA)
                        self.state = 484
                        self.ident()
                        self.state = 489
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 490
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                self.state = 494
                self.insertSource()
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 495
                    self.onConflict()


                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==228:
                    self.state = 498
                    self.returning()


                pass

            elif la_ == 27:
                localctx = SqlBaseParser.RestoreContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 501
                self.match(SqlBaseParser.RESTORE)
                self.state = 502
                self.match(SqlBaseParser.SNAPSHOT)
                self.state = 503
                self.qname()
                self.state = 509
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 504
                    self.match(SqlBaseParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 505
                    self.match(SqlBaseParser.METADATA)
                    pass

                elif la_ == 3:
                    self.state = 506
                    self.match(SqlBaseParser.TABLE)
                    self.state = 507
                    self.tableWithPartitions()
                    pass

                elif la_ == 4:
                    self.state = 508
                    localctx.metatypes = self.idents()
                    pass


                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 511
                    self.withProperties()


                pass

            elif la_ == 28:
                localctx = SqlBaseParser.CopyFromContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 514
                self.match(SqlBaseParser.COPY)
                self.state = 515
                self.tableWithPartition()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==295:
                    self.state = 516
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 517
                    self.ident()
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 518
                        self.match(SqlBaseParser.COMMA)
                        self.state = 519
                        self.ident()
                        self.state = 524
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 525
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                self.state = 529
                self.match(SqlBaseParser.FROM)
                self.state = 530
                localctx.path = self.expr()
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 531
                    self.withProperties()


                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==252:
                    self.state = 534
                    self.match(SqlBaseParser.RETURN)
                    self.state = 535
                    self.match(SqlBaseParser.SUMMARY)


                pass

            elif la_ == 29:
                localctx = SqlBaseParser.CopyToContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 538
                self.match(SqlBaseParser.COPY)
                self.state = 539
                self.tableWithPartition()
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==295:
                    self.state = 540
                    self.columns()


                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13:
                    self.state = 543
                    self.where()


                self.state = 546
                self.match(SqlBaseParser.TO)
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 547
                    self.match(SqlBaseParser.DIRECTORY)


                self.state = 550
                localctx.path = self.expr()
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 551
                    self.withProperties()


                pass

            elif la_ == 30:
                localctx = SqlBaseParser.DropContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 554
                self.dropStmt()
                pass

            elif la_ == 31:
                localctx = SqlBaseParser.GrantPrivilegeContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 555
                self.match(SqlBaseParser.GRANT)
                self.state = 561
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313, 314, 315]:
                    self.state = 556
                    localctx.priviliges = self.idents()
                    pass
                elif token in [7]:
                    self.state = 557
                    self.match(SqlBaseParser.ALL)
                    self.state = 559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==250:
                        self.state = 558
                        self.match(SqlBaseParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 563
                    self.match(SqlBaseParser.ON)
                    self.state = 564
                    self.securable()
                    self.state = 565
                    self.qnames()


                self.state = 569
                self.match(SqlBaseParser.TO)
                self.state = 570
                localctx.users = self.idents()
                pass

            elif la_ == 32:
                localctx = SqlBaseParser.DenyPrivilegeContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 571
                self.match(SqlBaseParser.DENY)
                self.state = 577
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313, 314, 315]:
                    self.state = 572
                    localctx.priviliges = self.idents()
                    pass
                elif token in [7]:
                    self.state = 573
                    self.match(SqlBaseParser.ALL)
                    self.state = 575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==250:
                        self.state = 574
                        self.match(SqlBaseParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 579
                    self.match(SqlBaseParser.ON)
                    self.state = 580
                    self.securable()
                    self.state = 581
                    self.qnames()


                self.state = 585
                self.match(SqlBaseParser.TO)
                self.state = 586
                localctx.users = self.idents()
                pass

            elif la_ == 33:
                localctx = SqlBaseParser.RevokePrivilegeContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 587
                self.match(SqlBaseParser.REVOKE)
                self.state = 593
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313, 314, 315]:
                    self.state = 588
                    localctx.privileges = self.idents()
                    pass
                elif token in [7]:
                    self.state = 589
                    self.match(SqlBaseParser.ALL)
                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==250:
                        self.state = 590
                        self.match(SqlBaseParser.PRIVILEGES)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 595
                    self.match(SqlBaseParser.ON)
                    self.state = 596
                    self.securable()
                    self.state = 597
                    self.qnames()


                self.state = 601
                self.match(SqlBaseParser.FROM)
                self.state = 602
                localctx.users = self.idents()
                pass

            elif la_ == 34:
                localctx = SqlBaseParser.CreateContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 603
                self.createStmt()
                pass

            elif la_ == 35:
                localctx = SqlBaseParser.DeallocateContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 604
                self.match(SqlBaseParser.DEALLOCATE)
                self.state = 606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 605
                    self.match(SqlBaseParser.PREPARE)


                self.state = 610
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 608
                    self.match(SqlBaseParser.ALL)
                    pass
                elif token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 307, 312, 313, 314, 315, 316]:
                    self.state = 609
                    localctx.prepStmt = self.stringLiteralOrIdentifierOrQname()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 36:
                localctx = SqlBaseParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 612
                self.match(SqlBaseParser.ANALYZE)
                pass

            elif la_ == 37:
                localctx = SqlBaseParser.DiscardContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 613
                self.match(SqlBaseParser.DISCARD)
                self.state = 614
                _la = self._input.LA(1)
                if not(_la==7 or ((((_la - 168)) & ~0x3f) == 0 and ((1 << (_la - 168)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 38:
                localctx = SqlBaseParser.DeclareContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 615
                self.match(SqlBaseParser.DECLARE)
                self.state = 616
                self.ident()
                self.state = 617
                self.declareCursorParams()
                self.state = 618
                self.match(SqlBaseParser.CURSOR)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91 or _la==92:
                    self.state = 619
                    _la = self._input.LA(1)
                    if not(_la==91 or _la==92):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 620
                    self.match(SqlBaseParser.HOLD)


                self.state = 623
                self.match(SqlBaseParser.FOR)
                self.state = 624
                self.queryNoWith()
                pass

            elif la_ == 39:
                localctx = SqlBaseParser.FetchContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 626
                self.match(SqlBaseParser.FETCH)
                self.state = 628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 627
                    self.direction()


                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3 or _la==22:
                    self.state = 630
                    _la = self._input.LA(1)
                    if not(_la==3 or _la==22):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 633
                self.ident()
                pass

            elif la_ == 40:
                localctx = SqlBaseParser.CloseContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 634
                self.match(SqlBaseParser.CLOSE)
                self.state = 637
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313, 314, 315]:
                    self.state = 635
                    self.ident()
                    pass
                elif token in [7]:
                    self.state = 636
                    self.match(SqlBaseParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dropStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DropRepositoryContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def REPOSITORY(self):
            return self.getToken(SqlBaseParser.REPOSITORY, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRepository" ):
                listener.enterDropRepository(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRepository" ):
                listener.exitDropRepository(self)


    class DropRoleContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)


    class DropSubscriptionContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SUBSCRIPTION(self):
            return self.getToken(SqlBaseParser.SUBSCRIPTION, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSubscription" ):
                listener.enterDropSubscription(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSubscription" ):
                listener.exitDropSubscription(self)


    class DropBlobTableContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropBlobTable" ):
                listener.enterDropBlobTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropBlobTable" ):
                listener.exitDropBlobTable(self)


    class DropSnapshotContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def SNAPSHOT(self):
            return self.getToken(SqlBaseParser.SNAPSHOT, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropSnapshot" ):
                listener.enterDropSnapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropSnapshot" ):
                listener.exitDropSnapshot(self)


    class DropFunctionContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.name = None # QnameContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def functionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FunctionArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FunctionArgumentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)


    class DropAnalyzerContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def ANALYZER(self):
            return self.getToken(SqlBaseParser.ANALYZER, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropAnalyzer" ):
                listener.enterDropAnalyzer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropAnalyzer" ):
                listener.exitDropAnalyzer(self)


    class DropAliasContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def ALIAS(self):
            return self.getToken(SqlBaseParser.ALIAS, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropAlias" ):
                listener.enterDropAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropAlias" ):
                listener.exitDropAlias(self)


    class DropPublicationContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def PUBLICATION(self):
            return self.getToken(SqlBaseParser.PUBLICATION, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropPublication" ):
                listener.enterDropPublication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropPublication" ):
                listener.exitDropPublication(self)


    class DropViewContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.names = None # QnamesContext
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def qnames(self):
            return self.getTypedRuleContext(SqlBaseParser.QnamesContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)


    class DropTableContext(DropStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DropStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)



    def dropStmt(self):

        localctx = SqlBaseParser.DropStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dropStmt)
        self._la = 0 # Token type
        try:
            self.state = 716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DropBlobTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                self.match(SqlBaseParser.DROP)
                self.state = 642
                self.match(SqlBaseParser.BLOB)
                self.state = 643
                self.match(SqlBaseParser.TABLE)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 644
                    self.match(SqlBaseParser.IF)
                    self.state = 645
                    self.match(SqlBaseParser.EXISTS)


                self.state = 648
                self.table()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 649
                self.match(SqlBaseParser.DROP)
                self.state = 650
                self.match(SqlBaseParser.TABLE)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 651
                    self.match(SqlBaseParser.IF)
                    self.state = 652
                    self.match(SqlBaseParser.EXISTS)


                self.state = 655
                self.table()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.DropAliasContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 656
                self.match(SqlBaseParser.DROP)
                self.state = 657
                self.match(SqlBaseParser.ALIAS)
                self.state = 658
                self.qname()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.DropRepositoryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 659
                self.match(SqlBaseParser.DROP)
                self.state = 660
                self.match(SqlBaseParser.REPOSITORY)
                self.state = 661
                self.ident()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.DropSnapshotContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 662
                self.match(SqlBaseParser.DROP)
                self.state = 663
                self.match(SqlBaseParser.SNAPSHOT)
                self.state = 664
                self.qname()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 665
                self.match(SqlBaseParser.DROP)
                self.state = 666
                self.match(SqlBaseParser.FUNCTION)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 667
                    self.match(SqlBaseParser.IF)
                    self.state = 668
                    self.match(SqlBaseParser.EXISTS)


                self.state = 671
                localctx.name = self.qname()
                self.state = 672
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -1718175795199) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 9221680432477634559) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & -8224347531254671) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 33776997205282815) != 0):
                    self.state = 673
                    self.functionArgument()
                    self.state = 678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 674
                        self.match(SqlBaseParser.COMMA)
                        self.state = 675
                        self.functionArgument()
                        self.state = 680
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 683
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.DropRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 685
                self.match(SqlBaseParser.DROP)
                self.state = 686
                _la = self._input.LA(1)
                if not(_la==245 or _la==246):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 687
                    self.match(SqlBaseParser.IF)
                    self.state = 688
                    self.match(SqlBaseParser.EXISTS)


                self.state = 691
                localctx.name = self.ident()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 692
                self.match(SqlBaseParser.DROP)
                self.state = 693
                self.match(SqlBaseParser.VIEW)
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 694
                    self.match(SqlBaseParser.IF)
                    self.state = 695
                    self.match(SqlBaseParser.EXISTS)


                self.state = 698
                localctx.names = self.qnames()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.DropAnalyzerContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 699
                self.match(SqlBaseParser.DROP)
                self.state = 700
                self.match(SqlBaseParser.ANALYZER)
                self.state = 701
                localctx.name = self.ident()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.DropPublicationContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 702
                self.match(SqlBaseParser.DROP)
                self.state = 703
                self.match(SqlBaseParser.PUBLICATION)
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 704
                    self.match(SqlBaseParser.IF)
                    self.state = 705
                    self.match(SqlBaseParser.EXISTS)


                self.state = 708
                localctx.name = self.ident()
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.DropSubscriptionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 709
                self.match(SqlBaseParser.DROP)
                self.state = 710
                self.match(SqlBaseParser.SUBSCRIPTION)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 711
                    self.match(SqlBaseParser.IF)
                    self.state = 712
                    self.match(SqlBaseParser.EXISTS)


                self.state = 715
                localctx.name = self.ident()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_alterStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AddColumnContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def addColumnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AddColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AddColumnDefinitionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumn" ):
                listener.enterAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumn" ):
                listener.exitAddColumn(self)


    class AlterClusterGCDanglingArtifactsContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def GC(self):
            return self.getToken(SqlBaseParser.GC, 0)
        def DANGLING(self):
            return self.getToken(SqlBaseParser.DANGLING, 0)
        def ARTIFACTS(self):
            return self.getToken(SqlBaseParser.ARTIFACTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterClusterGCDanglingArtifacts" ):
                listener.enterAlterClusterGCDanglingArtifacts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterClusterGCDanglingArtifacts" ):
                listener.exitAlterClusterGCDanglingArtifacts(self)


    class AlterTablePropertiesContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def genericProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.GenericPropertiesContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableProperties" ):
                listener.enterAlterTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableProperties" ):
                listener.exitAlterTableProperties(self)


    class AlterRoleContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def genericProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.GenericPropertiesContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterRole" ):
                listener.enterAlterRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterRole" ):
                listener.exitAlterRole(self)


    class DropColumnContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def dropColumnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.DropColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.DropColumnDefinitionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropColumn" ):
                listener.enterDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropColumn" ):
                listener.exitDropColumn(self)


    class DropCheckConstraintContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropCheckConstraint" ):
                listener.enterDropCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropCheckConstraint" ):
                listener.exitDropCheckConstraint(self)


    class AlterTableOpenCloseContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def OPEN(self):
            return self.getToken(SqlBaseParser.OPEN, 0)
        def CLOSE(self):
            return self.getToken(SqlBaseParser.CLOSE, 0)
        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableOpenClose" ):
                listener.enterAlterTableOpenClose(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableOpenClose" ):
                listener.exitAlterTableOpenClose(self)


    class AlterTableRenameTableContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableRenameTable" ):
                listener.enterAlterTableRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableRenameTable" ):
                listener.exitAlterTableRenameTable(self)


    class AlterPublicationContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def PUBLICATION(self):
            return self.getToken(SqlBaseParser.PUBLICATION, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QnameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QnameContext,i)

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)
        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)
        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ASTERISK)
            else:
                return self.getToken(SqlBaseParser.ASTERISK, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterPublication" ):
                listener.enterAlterPublication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterPublication" ):
                listener.exitAlterPublication(self)


    class AlterClusterDecommissionNodeContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.node = None # ExprContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def DECOMMISSION(self):
            return self.getToken(SqlBaseParser.DECOMMISSION, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterClusterDecommissionNode" ):
                listener.enterAlterClusterDecommissionNode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterClusterDecommissionNode" ):
                listener.exitAlterClusterDecommissionNode(self)


    class AlterClusterRerouteRetryFailedContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def REROUTE(self):
            return self.getToken(SqlBaseParser.REROUTE, 0)
        def RETRY(self):
            return self.getToken(SqlBaseParser.RETRY, 0)
        def FAILED(self):
            return self.getToken(SqlBaseParser.FAILED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterClusterRerouteRetryFailed" ):
                listener.enterAlterClusterRerouteRetryFailed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterClusterRerouteRetryFailed" ):
                listener.exitAlterClusterRerouteRetryFailed(self)


    class AlterBlobTablePropertiesContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def genericProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.GenericPropertiesContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def RESET(self):
            return self.getToken(SqlBaseParser.RESET, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterBlobTableProperties" ):
                listener.enterAlterBlobTableProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterBlobTableProperties" ):
                listener.exitAlterBlobTableProperties(self)


    class AlterTableRerouteContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def REROUTE(self):
            return self.getToken(SqlBaseParser.REROUTE, 0)
        def rerouteOption(self):
            return self.getTypedRuleContext(SqlBaseParser.RerouteOptionContext,0)

        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableReroute" ):
                listener.enterAlterTableReroute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableReroute" ):
                listener.exitAlterTableReroute(self)


    class AlterClusterSwapTableContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.source = None # QnameContext
            self.target = None # QnameContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)
        def SWAP(self):
            return self.getToken(SqlBaseParser.SWAP, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def qname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QnameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QnameContext,i)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterClusterSwapTable" ):
                listener.enterAlterClusterSwapTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterClusterSwapTable" ):
                listener.exitAlterClusterSwapTable(self)


    class AlterTableRenameColumnContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.source = None # SubscriptSafeContext
            self.target = None # SubscriptSafeContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def alterTableDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterTableDefinitionContext,0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def subscriptSafe(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SubscriptSafeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,i)

        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)
        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableRenameColumn" ):
                listener.enterAlterTableRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableRenameColumn" ):
                listener.exitAlterTableRenameColumn(self)


    class AlterSubscriptionContext(AlterStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(SqlBaseParser.ALTER, 0)
        def SUBSCRIPTION(self):
            return self.getToken(SqlBaseParser.SUBSCRIPTION, 0)
        def alterSubscriptionMode(self):
            return self.getTypedRuleContext(SqlBaseParser.AlterSubscriptionModeContext,0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSubscription" ):
                listener.enterAlterSubscription(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSubscription" ):
                listener.exitAlterSubscription(self)



    def alterStmt(self):

        localctx = SqlBaseParser.AlterStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_alterStmt)
        self._la = 0 # Token type
        try:
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.AddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 718
                self.match(SqlBaseParser.ALTER)
                self.state = 719
                self.match(SqlBaseParser.TABLE)
                self.state = 720
                self.alterTableDefinition()
                self.state = 721
                self.addColumnDefinition()
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 722
                    self.match(SqlBaseParser.COMMA)
                    self.state = 723
                    self.addColumnDefinition()
                    self.state = 728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = SqlBaseParser.DropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 729
                self.match(SqlBaseParser.ALTER)
                self.state = 730
                self.match(SqlBaseParser.TABLE)
                self.state = 731
                self.alterTableDefinition()
                self.state = 732
                self.dropColumnDefinition()
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 733
                    self.match(SqlBaseParser.COMMA)
                    self.state = 734
                    self.dropColumnDefinition()
                    self.state = 739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = SqlBaseParser.DropCheckConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 740
                self.match(SqlBaseParser.ALTER)
                self.state = 741
                self.match(SqlBaseParser.TABLE)
                self.state = 742
                self.alterTableDefinition()
                self.state = 743
                self.match(SqlBaseParser.DROP)
                self.state = 744
                self.match(SqlBaseParser.CONSTRAINT)
                self.state = 745
                self.ident()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.AlterTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 747
                self.match(SqlBaseParser.ALTER)
                self.state = 748
                self.match(SqlBaseParser.TABLE)
                self.state = 749
                self.alterTableDefinition()
                self.state = 769
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [215]:
                    self.state = 750
                    self.match(SqlBaseParser.SET)
                    self.state = 751
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 752
                    self.genericProperties()
                    self.state = 753
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                    pass
                elif token in [216]:
                    self.state = 755
                    self.match(SqlBaseParser.RESET)
                    self.state = 767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==295:
                        self.state = 756
                        self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                        self.state = 757
                        self.ident()
                        self.state = 762
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==293:
                            self.state = 758
                            self.match(SqlBaseParser.COMMA)
                            self.state = 759
                            self.ident()
                            self.state = 764
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 765
                        self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = SqlBaseParser.AlterBlobTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 771
                self.match(SqlBaseParser.ALTER)
                self.state = 772
                self.match(SqlBaseParser.BLOB)
                self.state = 773
                self.match(SqlBaseParser.TABLE)
                self.state = 774
                self.alterTableDefinition()
                self.state = 794
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [215]:
                    self.state = 775
                    self.match(SqlBaseParser.SET)
                    self.state = 776
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 777
                    self.genericProperties()
                    self.state = 778
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                    pass
                elif token in [216]:
                    self.state = 780
                    self.match(SqlBaseParser.RESET)
                    self.state = 792
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==295:
                        self.state = 781
                        self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                        self.state = 782
                        self.ident()
                        self.state = 787
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==293:
                            self.state = 783
                            self.match(SqlBaseParser.COMMA)
                            self.state = 784
                            self.ident()
                            self.state = 789
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 790
                        self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 6:
                localctx = SqlBaseParser.AlterTableOpenCloseContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 796
                self.match(SqlBaseParser.ALTER)
                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 797
                    self.match(SqlBaseParser.BLOB)


                self.state = 800
                self.match(SqlBaseParser.TABLE)
                self.state = 801
                self.alterTableDefinition()
                self.state = 802
                _la = self._input.LA(1)
                if not(_la==110 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.AlterTableRenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 804
                self.match(SqlBaseParser.ALTER)
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 805
                    self.match(SqlBaseParser.BLOB)


                self.state = 808
                self.match(SqlBaseParser.TABLE)
                self.state = 809
                self.alterTableDefinition()
                self.state = 810
                self.match(SqlBaseParser.RENAME)
                self.state = 811
                self.match(SqlBaseParser.TO)
                self.state = 812
                self.qname()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.AlterTableRenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 814
                self.match(SqlBaseParser.ALTER)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 815
                    self.match(SqlBaseParser.BLOB)


                self.state = 818
                self.match(SqlBaseParser.TABLE)
                self.state = 819
                self.alterTableDefinition()
                self.state = 820
                self.match(SqlBaseParser.RENAME)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==109:
                    self.state = 821
                    self.match(SqlBaseParser.COLUMN)


                self.state = 824
                localctx.source = self.subscriptSafe(0)
                self.state = 825
                self.match(SqlBaseParser.TO)
                self.state = 826
                localctx.target = self.subscriptSafe(0)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.AlterTableRerouteContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 828
                self.match(SqlBaseParser.ALTER)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==95:
                    self.state = 829
                    self.match(SqlBaseParser.BLOB)


                self.state = 832
                self.match(SqlBaseParser.TABLE)
                self.state = 833
                self.alterTableDefinition()
                self.state = 834
                self.match(SqlBaseParser.REROUTE)
                self.state = 835
                self.rerouteOption()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.AlterClusterRerouteRetryFailedContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 837
                self.match(SqlBaseParser.ALTER)
                self.state = 838
                self.match(SqlBaseParser.CLUSTER)
                self.state = 839
                self.match(SqlBaseParser.REROUTE)
                self.state = 840
                self.match(SqlBaseParser.RETRY)
                self.state = 841
                self.match(SqlBaseParser.FAILED)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.AlterClusterSwapTableContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 842
                self.match(SqlBaseParser.ALTER)
                self.state = 843
                self.match(SqlBaseParser.CLUSTER)
                self.state = 844
                self.match(SqlBaseParser.SWAP)
                self.state = 845
                self.match(SqlBaseParser.TABLE)
                self.state = 846
                localctx.source = self.qname()
                self.state = 847
                self.match(SqlBaseParser.TO)
                self.state = 848
                localctx.target = self.qname()
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 849
                    self.withProperties()


                pass

            elif la_ == 12:
                localctx = SqlBaseParser.AlterClusterDecommissionNodeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 852
                self.match(SqlBaseParser.ALTER)
                self.state = 853
                self.match(SqlBaseParser.CLUSTER)
                self.state = 854
                self.match(SqlBaseParser.DECOMMISSION)
                self.state = 855
                localctx.node = self.expr()
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.AlterClusterGCDanglingArtifactsContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 856
                self.match(SqlBaseParser.ALTER)
                self.state = 857
                self.match(SqlBaseParser.CLUSTER)
                self.state = 858
                self.match(SqlBaseParser.GC)
                self.state = 859
                self.match(SqlBaseParser.DANGLING)
                self.state = 860
                self.match(SqlBaseParser.ARTIFACTS)
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.AlterRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 861
                self.match(SqlBaseParser.ALTER)
                self.state = 862
                _la = self._input.LA(1)
                if not(_la==245 or _la==246):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 863
                localctx.name = self.ident()
                self.state = 864
                self.match(SqlBaseParser.SET)
                self.state = 865
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 866
                self.genericProperties()
                self.state = 867
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 15:
                localctx = SqlBaseParser.AlterPublicationContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 869
                self.match(SqlBaseParser.ALTER)
                self.state = 870
                self.match(SqlBaseParser.PUBLICATION)
                self.state = 871
                localctx.name = self.ident()

                self.state = 872
                _la = self._input.LA(1)
                if not(_la==108 or _la==196 or _la==215):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 873
                self.match(SqlBaseParser.TABLE)
                self.state = 874
                self.qname()
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==286:
                    self.state = 875
                    self.match(SqlBaseParser.ASTERISK)


                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 878
                    self.match(SqlBaseParser.COMMA)
                    self.state = 879
                    self.qname()
                    self.state = 881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==286:
                        self.state = 880
                        self.match(SqlBaseParser.ASTERISK)


                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 16:
                localctx = SqlBaseParser.AlterSubscriptionContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 888
                self.match(SqlBaseParser.ALTER)
                self.state = 889
                self.match(SqlBaseParser.SUBSCRIPTION)
                self.state = 890
                localctx.name = self.ident()
                self.state = 891
                self.alterSubscriptionMode()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOptParensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def queryOptParens(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOptParensContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryOptParens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryOptParens" ):
                listener.enterQueryOptParens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryOptParens" ):
                listener.exitQueryOptParens(self)




    def queryOptParens(self):

        localctx = SqlBaseParser.QueryOptParensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_queryOptParens)
        try:
            self.state = 904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 896
                self.query()
                self.state = 897
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 899
                self.query()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 900
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 901
                self.queryOptParens()
                self.state = 902
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryNoWith(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryNoWithContext,0)


        def with_(self):
            return self.getTypedRuleContext(SqlBaseParser.WithContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)




    def query(self):

        localctx = SqlBaseParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 906
                self.with_()


            self.state = 909
            self.queryNoWith()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,0)


        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def limitClause(self):
            return self.getTypedRuleContext(SqlBaseParser.LimitClauseContext,0)


        def offsetClause(self):
            return self.getTypedRuleContext(SqlBaseParser.OffsetClauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryNoWith

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryNoWith" ):
                listener.enterQueryNoWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryNoWith" ):
                listener.exitQueryNoWith(self)




    def queryNoWith(self):

        localctx = SqlBaseParser.QueryNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_queryNoWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.queryTerm(0)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 912
                self.match(SqlBaseParser.ORDER)
                self.state = 913
                self.match(SqlBaseParser.BY)
                self.state = 914
                self.sortItem()
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 915
                    self.match(SqlBaseParser.COMMA)
                    self.state = 916
                    self.sortItem()
                    self.state = 921
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18 or _la==35:
                    self.state = 924
                    self.limitClause()


                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 927
                    self.offsetClause()


                pass

            elif la_ == 2:
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==19:
                    self.state = 930
                    self.offsetClause()


                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==18 or _la==35:
                    self.state = 933
                    self.limitClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.limit = None # ParameterOrIntegerContext

        def LIMIT(self):
            return self.getToken(SqlBaseParser.LIMIT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)


        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = SqlBaseParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_limitClause)
        self._la = 0 # Token type
        try:
            self.state = 949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18]:
                self.enterOuterAlt(localctx, 1)
                self.state = 938
                self.match(SqlBaseParser.LIMIT)
                self.state = 941
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29, 30, 31, 69, 182, 183, 232, 297, 299, 302, 303, 307, 308, 309, 310, 311, 316]:
                    self.state = 939
                    localctx.limit = self.parameterOrInteger()
                    pass
                elif token in [7]:
                    self.state = 940
                    self.match(SqlBaseParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 943
                self.match(SqlBaseParser.FETCH)
                self.state = 944
                _la = self._input.LA(1)
                if not(_la==36 or _la==38):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

                self.state = 945
                localctx.limit = self.parameterOrInteger()
                self.state = 946
                _la = self._input.LA(1)
                if not(_la==85 or _la==90):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 947
                self.match(SqlBaseParser.ONLY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # ParameterOrIntegerContext

        def OFFSET(self):
            return self.getToken(SqlBaseParser.OFFSET, 0)

        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)


        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_offsetClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffsetClause" ):
                listener.enterOffsetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffsetClause" ):
                listener.exitOffsetClause(self)




    def offsetClause(self):

        localctx = SqlBaseParser.OffsetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_offsetClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(SqlBaseParser.OFFSET)
            self.state = 952
            localctx.offset = self.parameterOrInteger()
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85 or _la==90:
                self.state = 953
                _la = self._input.LA(1)
                if not(_la==85 or _la==90):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpec(self):
            return self.getTypedRuleContext(SqlBaseParser.QuerySpecContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryTermDefault" ):
                listener.enterQueryTermDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryTermDefault" ):
                listener.exitQueryTermDefault(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.first = None # QuerySpecContext
            self.operator = None # Token
            self.second = None # QuerySpecContext
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def querySpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QuerySpecContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QuerySpecContext,i)

        def INTERSECT(self):
            return self.getToken(SqlBaseParser.INTERSECT, 0)
        def EXCEPT(self):
            return self.getToken(SqlBaseParser.EXCEPT, 0)
        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QueryTermContext,i)

        def UNION(self):
            return self.getToken(SqlBaseParser.UNION, 0)
        def setQuant(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetOperation" ):
                listener.enterSetOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetOperation" ):
                listener.exitSetOperation(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.QueryTermDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 957
                self.querySpec()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SetOperationContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 958
                localctx.first = self.querySpec()
                self.state = 959
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==199 or _la==200):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 960
                localctx.second = self.querySpec()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 972
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.SetOperationContext(self, SqlBaseParser.QueryTermContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                    self.state = 964
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 965
                    localctx.operator = self.match(SqlBaseParser.UNION)
                    self.state = 967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==7 or _la==12:
                        self.state = 966
                        self.setQuant()


                    self.state = 969
                    localctx.right = self.queryTerm(2) 
                self.state = 974
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SetQuantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setQuant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetQuant" ):
                listener.enterSetQuant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetQuant" ):
                listener.exitSetQuant(self)




    def setQuant(self):

        localctx = SqlBaseParser.SetQuantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_setQuant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            _la = self._input.LA(1)
            if not(_la==7 or _la==12):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrdering = None # Token

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)

        def ASC(self):
            return self.getToken(SqlBaseParser.ASC, 0)

        def DESC(self):
            return self.getToken(SqlBaseParser.DESC, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_sortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortItem" ):
                listener.enterSortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortItem" ):
                listener.exitSortItem(self)




    def sortItem(self):

        localctx = SqlBaseParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.expr()
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40 or _la==41:
                self.state = 978
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==40 or _la==41):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 981
                self.match(SqlBaseParser.NULLS)
                self.state = 982
                localctx.nullOrdering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==36 or _la==37):
                    localctx.nullOrdering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_querySpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefaultQuerySpecContext(QuerySpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecContext
            super().__init__(parser)
            self.having = None # BooleanExpressionContext
            self._namedWindow = None # NamedWindowContext
            self.windows = list() # of NamedWindowContexts
            self.copyFrom(ctx)

        def SELECT(self):
            return self.getToken(SqlBaseParser.SELECT, 0)
        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SelectItemContext,i)

        def setQuant(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)

        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)

        def GROUP(self):
            return self.getToken(SqlBaseParser.GROUP, 0)
        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def HAVING(self):
            return self.getToken(SqlBaseParser.HAVING, 0)
        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedWindowContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultQuerySpec" ):
                listener.enterDefaultQuerySpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultQuerySpec" ):
                listener.exitDefaultQuerySpec(self)


    class ValuesRelationContext(QuerySpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuerySpecContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)
        def values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValuesContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValuesContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesRelation" ):
                listener.enterValuesRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesRelation" ):
                listener.exitValuesRelation(self)



    def querySpec(self):

        localctx = SqlBaseParser.QuerySpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_querySpec)
        self._la = 0 # Token type
        try:
            self.state = 1047
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                localctx = SqlBaseParser.DefaultQuerySpecContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.match(SqlBaseParser.SELECT)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7 or _la==12:
                    self.state = 986
                    self.setQuant()


                self.state = 989
                self.selectItem()
                self.state = 994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 990
                        self.match(SqlBaseParser.COMMA)
                        self.state = 991
                        self.selectItem() 
                    self.state = 996
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

                self.state = 1006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 997
                    self.match(SqlBaseParser.FROM)
                    self.state = 998
                    self.relation(0)
                    self.state = 1003
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 999
                            self.match(SqlBaseParser.COMMA)
                            self.state = 1000
                            self.relation(0) 
                        self.state = 1005
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,115,self._ctx)



                self.state = 1009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                if la_ == 1:
                    self.state = 1008
                    self.where()


                self.state = 1021
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 1011
                    self.match(SqlBaseParser.GROUP)
                    self.state = 1012
                    self.match(SqlBaseParser.BY)
                    self.state = 1013
                    self.expr()
                    self.state = 1018
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1014
                            self.match(SqlBaseParser.COMMA)
                            self.state = 1015
                            self.expr() 
                        self.state = 1020
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,118,self._ctx)



                self.state = 1025
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                if la_ == 1:
                    self.state = 1023
                    self.match(SqlBaseParser.HAVING)
                    self.state = 1024
                    localctx.having = self.booleanExpression(0)


                self.state = 1036
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                if la_ == 1:
                    self.state = 1027
                    self.match(SqlBaseParser.WINDOW)
                    self.state = 1028
                    localctx._namedWindow = self.namedWindow()
                    localctx.windows.append(localctx._namedWindow)
                    self.state = 1033
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1029
                            self.match(SqlBaseParser.COMMA)
                            self.state = 1030
                            localctx._namedWindow = self.namedWindow()
                            localctx.windows.append(localctx._namedWindow) 
                        self.state = 1035
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,121,self._ctx)



                pass
            elif token in [207]:
                localctx = SqlBaseParser.ValuesRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1038
                self.match(SqlBaseParser.VALUES)
                self.state = 1039
                self.values()
                self.state = 1044
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1040
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1041
                        self.values() 
                    self.state = 1046
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_selectItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectAllContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)
        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectAll" ):
                listener.enterSelectAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectAll" ):
                listener.exitSelectAll(self)


    class SelectSingleContext(SelectItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.SelectItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSingle" ):
                listener.enterSelectSingle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSingle" ):
                listener.exitSelectSingle(self)



    def selectItem(self):

        localctx = SqlBaseParser.SelectItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_selectItem)
        self._la = 0 # Token type
        try:
            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SelectSingleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1049
                self.expr()
                self.state = 1054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 1051
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==5:
                        self.state = 1050
                        self.match(SqlBaseParser.AS)


                    self.state = 1053
                    self.ident()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.qname()
                self.state = 1057
                self.match(SqlBaseParser.DOT)
                self.state = 1058
                self.match(SqlBaseParser.ASTERISK)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SelectAllContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1060
                self.match(SqlBaseParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # BooleanExpressionContext

        def WHERE(self):
            return self.getToken(SqlBaseParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere" ):
                listener.enterWhere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere" ):
                listener.exitWhere(self)




    def where(self):

        localctx = SqlBaseParser.WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(SqlBaseParser.WHERE)
            self.state = 1064
            localctx.condition = self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturningContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)

        def selectItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SelectItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SelectItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_returning

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturning" ):
                listener.enterReturning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturning" ):
                listener.exitReturning(self)




    def returning(self):

        localctx = SqlBaseParser.ReturningContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_returning)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.match(SqlBaseParser.RETURNING)
            self.state = 1067
            self.selectItem()
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 1068
                self.match(SqlBaseParser.COMMA)
                self.state = 1069
                self.selectItem()
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def where(self):
            return self.getTypedRuleContext(SqlBaseParser.WhereContext,0)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter" ):
                listener.enterFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter" ):
                listener.exitFilter(self)




    def filter_(self):

        localctx = SqlBaseParser.FilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_filter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.match(SqlBaseParser.FILTER)
            self.state = 1076
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1077
            self.where()
            self.state = 1078
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class RelationDefaultContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationDefault" ):
                listener.enterRelationDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationDefault" ):
                listener.exitRelationDefault(self)


    class JoinRelationContext(RelationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationContext
            super().__init__(parser)
            self.left = None # RelationContext
            self.right = None # AliasedRelationContext
            self.rightRelation = None # RelationContext
            self.copyFrom(ctx)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.RelationContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.RelationContext,i)

        def CROSS(self):
            return self.getToken(SqlBaseParser.CROSS, 0)
        def JOIN(self):
            return self.getToken(SqlBaseParser.JOIN, 0)
        def joinType(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinTypeContext,0)

        def joinCriteria(self):
            return self.getTypedRuleContext(SqlBaseParser.JoinCriteriaContext,0)

        def NATURAL(self):
            return self.getToken(SqlBaseParser.NATURAL, 0)
        def aliasedRelation(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedRelationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinRelation" ):
                listener.enterJoinRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinRelation" ):
                listener.exitJoinRelation(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = SqlBaseParser.RelationDefaultContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1081
            self.aliasedRelation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1101
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.JoinRelationContext(self, SqlBaseParser.RelationContext(self, _parentctx, _parentState))
                    localctx.left = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 1083
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1097
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [71]:
                        self.state = 1084
                        self.match(SqlBaseParser.CROSS)
                        self.state = 1085
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1086
                        localctx.right = self.aliasedRelation()
                        pass
                    elif token in [70, 73, 74, 75, 76]:
                        self.state = 1087
                        self.joinType()
                        self.state = 1088
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1089
                        localctx.rightRelation = self.relation(0)
                        self.state = 1090
                        self.joinCriteria()
                        pass
                    elif token in [77]:
                        self.state = 1092
                        self.match(SqlBaseParser.NATURAL)
                        self.state = 1093
                        self.joinType()
                        self.state = 1094
                        self.match(SqlBaseParser.JOIN)
                        self.state = 1095
                        localctx.right = self.aliasedRelation()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 1103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(SqlBaseParser.INNER, 0)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SqlBaseParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(SqlBaseParser.FULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinType" ):
                listener.enterJoinType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinType" ):
                listener.exitJoinType(self)




    def joinType(self):

        localctx = SqlBaseParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 1119
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70, 73]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 1104
                    self.match(SqlBaseParser.INNER)


                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.match(SqlBaseParser.LEFT)
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 1108
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1111
                self.match(SqlBaseParser.RIGHT)
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 1112
                    self.match(SqlBaseParser.OUTER)


                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1115
                self.match(SqlBaseParser.FULL)
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 1116
                    self.match(SqlBaseParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_joinCriteria

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoinCriteria" ):
                listener.enterJoinCriteria(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoinCriteria" ):
                listener.exitJoinCriteria(self)




    def joinCriteria(self):

        localctx = SqlBaseParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_joinCriteria)
        self._la = 0 # Token type
        try:
            self.state = 1135
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1121
                self.match(SqlBaseParser.ON)
                self.state = 1122
                self.booleanExpression(0)
                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1123
                self.match(SqlBaseParser.USING)
                self.state = 1124
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1125
                self.ident()
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 1126
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1127
                    self.ident()
                    self.state = 1132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1133
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationPrimaryContext,0)


        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def aliasedColumns(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedColumnsContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_aliasedRelation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedRelation" ):
                listener.enterAliasedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedRelation" ):
                listener.exitAliasedRelation(self)




    def aliasedRelation(self):

        localctx = SqlBaseParser.AliasedRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_aliasedRelation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.relationPrimary()
            self.state = 1145
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 1138
                    self.match(SqlBaseParser.AS)


                self.state = 1141
                self.ident()
                self.state = 1143
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1142
                    self.aliasedColumns()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryRelation" ):
                listener.enterSubqueryRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryRelation" ):
                listener.exitSubqueryRelation(self)


    class ParenthesizedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def relation(self):
            return self.getTypedRuleContext(SqlBaseParser.RelationContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedRelation" ):
                listener.enterParenthesizedRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedRelation" ):
                listener.exitParenthesizedRelation(self)


    class TableRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableRelation" ):
                listener.enterTableRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableRelation" ):
                listener.exitTableRelation(self)



    def relationPrimary(self):

        localctx = SqlBaseParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_relationPrimary)
        try:
            self.state = 1156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1147
                self.table()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SubqueryRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1148
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1149
                self.query()
                self.state = 1150
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ParenthesizedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1152
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1153
                self.relation(0)
                self.state = 1154
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableWithPartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AssignmentContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableWithPartition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableWithPartition" ):
                listener.enterTableWithPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableWithPartition" ):
                listener.exitTableWithPartition(self)




    def tableWithPartition(self):

        localctx = SqlBaseParser.TableWithPartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_tableWithPartition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.qname()
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==82:
                self.state = 1159
                self.match(SqlBaseParser.PARTITION)
                self.state = 1160
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1161
                self.assignment()
                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 1162
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1163
                    self.assignment()
                    self.state = 1168
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1169
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_table

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFunctionContext(TableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFunction" ):
                listener.enterTableFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFunction" ):
                listener.exitTableFunction(self)


    class TableNameContext(TableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)



    def table(self):

        localctx = SqlBaseParser.TableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_table)
        self._la = 0 # Token type
        try:
            self.state = 1188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1173
                self.qname()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TableFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1174
                self.qname()
                self.state = 1175
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809503226798) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3436351590205) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -5509033754625) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & -7942872554544015) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 71995282677567487) != 0):
                    self.state = 1176
                    self.valueExpression(0)


                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 1179
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1180
                    self.valueExpression(0)
                    self.state = 1185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1186
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasedColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_aliasedColumns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedColumns" ):
                listener.enterAliasedColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedColumns" ):
                listener.exitAliasedColumns(self)




    def aliasedColumns(self):

        localctx = SqlBaseParser.AliasedColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_aliasedColumns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1191
            self.ident()
            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 1192
                self.match(SqlBaseParser.COMMA)
                self.state = 1193
                self.ident()
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1199
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedQueryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_with

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith" ):
                listener.enterWith(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith" ):
                listener.exitWith(self)




    def with_(self):

        localctx = SqlBaseParser.WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_with)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1201
            self.match(SqlBaseParser.WITH)
            self.state = 1202
            self.namedQuery()
            self.state = 1207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 1203
                self.match(SqlBaseParser.COMMA)
                self.state = 1204
                self.namedQuery()
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def aliasedColumns(self):
            return self.getTypedRuleContext(SqlBaseParser.AliasedColumnsContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedQuery" ):
                listener.enterNamedQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedQuery" ):
                listener.exitNamedQuery(self)




    def namedQuery(self):

        localctx = SqlBaseParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            localctx.name = self.ident()
            self.state = 1212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==295:
                self.state = 1211
                self.aliasedColumns()


            self.state = 1214
            self.match(SqlBaseParser.AS)
            self.state = 1215
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1216
            self.query()
            self.state = 1217
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = SqlBaseParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalNot" ):
                listener.enterLogicalNot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalNot" ):
                listener.exitLogicalNot(self)


    class BooleanDefaultContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicated(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicatedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanDefault" ):
                listener.enterBooleanDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanDefault" ):
                listener.exitBooleanDefault(self)


    class MatchContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.term = None # PrimaryExpressionContext
            self.matchType = None # IdentContext
            self.copyFrom(ctx)

        def MATCH(self):
            return self.getToken(SqlBaseParser.MATCH, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def matchPredicateIdents(self):
            return self.getTypedRuleContext(SqlBaseParser.MatchPredicateIdentsContext,0)

        def COMMA(self):
            return self.getToken(SqlBaseParser.COMMA, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch" ):
                listener.enterMatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch" ):
                listener.exitMatch(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.operator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalBinary" ):
                listener.enterLogicalBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalBinary" ):
                listener.exitLogicalBinary(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 24, 27, 29, 30, 31, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 69, 74, 75, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 284, 285, 295, 297, 299, 301, 302, 303, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316]:
                localctx = SqlBaseParser.BooleanDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1222
                self.predicated()
                pass
            elif token in [23]:
                localctx = SqlBaseParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1223
                self.match(SqlBaseParser.NOT)
                self.state = 1224
                self.booleanExpression(4)
                pass
            elif token in [242]:
                localctx = SqlBaseParser.MatchContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1225
                self.match(SqlBaseParser.MATCH)
                self.state = 1226
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1227
                self.matchPredicateIdents()
                self.state = 1228
                self.match(SqlBaseParser.COMMA)
                self.state = 1229
                localctx.term = self.primaryExpression(0)
                self.state = 1230
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1236
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1231
                    self.match(SqlBaseParser.USING)
                    self.state = 1232
                    localctx.matchType = self.ident()
                    self.state = 1234
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                    if la_ == 1:
                        self.state = 1233
                        self.withProperties()




                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1248
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1246
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1240
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1241
                        localctx.operator = self.match(SqlBaseParser.AND)
                        self.state = 1242
                        localctx.right = self.booleanExpression(4)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.LogicalBinaryContext(self, SqlBaseParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 1243
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1244
                        localctx.operator = self.match(SqlBaseParser.OR)
                        self.state = 1245
                        localctx.right = self.booleanExpression(3)
                        pass

             
                self.state = 1250
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicatedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._valueExpression = None # ValueExpressionContext

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def predicate(self):
            return self.getTypedRuleContext(SqlBaseParser.PredicateContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicated" ):
                listener.enterPredicated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicated" ):
                listener.exitPredicated(self)




    def predicated(self):

        localctx = SqlBaseParser.PredicatedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_predicated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            localctx._valueExpression = self.valueExpression(0)
            self.state = 1253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.state = 1252
                self.predicate(localctx._valueExpression)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1, value:ParserRuleContext=None):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None
            self.value = value


        def getRuleIndex(self):
            return SqlBaseParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)
            self.value = ctx.value



    class ComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def cmpOp(self):
            return self.getTypedRuleContext(SqlBaseParser.CmpOpContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)


    class LikeContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.pattern = None # ValueExpressionContext
            self.escape = None # ParameterOrLiteralContext
            self.copyFrom(ctx)

        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)
        def parameterOrLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike" ):
                listener.enterLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike" ):
                listener.exitLike(self)


    class InSubqueryContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def subqueryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.SubqueryExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInSubquery" ):
                listener.enterInSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInSubquery" ):
                listener.exitInSubquery(self)


    class DistinctFromContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def DISTINCT(self):
            return self.getToken(SqlBaseParser.DISTINCT, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistinctFrom" ):
                listener.enterDistinctFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistinctFrom" ):
                listener.exitDistinctFrom(self)


    class InListContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IN(self):
            return self.getToken(SqlBaseParser.IN, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInList" ):
                listener.enterInList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInList" ):
                listener.exitInList(self)


    class ArrayLikeContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.quant = None # SetCmpQuantifierContext
            self.v = None # ValueExpressionContext
            self.escape = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def LIKE(self):
            return self.getToken(SqlBaseParser.LIKE, 0)
        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)
        def setCmpQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetCmpQuantifierContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(SqlBaseParser.ESCAPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLike" ):
                listener.enterArrayLike(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLike" ):
                listener.exitArrayLike(self)


    class NullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IS(self):
            return self.getToken(SqlBaseParser.IS, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullPredicate" ):
                listener.enterNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullPredicate" ):
                listener.exitNullPredicate(self)


    class BetweenContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.copyFrom(ctx)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween" ):
                listener.enterBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween" ):
                listener.exitBetween(self)


    class QuantifiedComparisonContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def cmpOp(self):
            return self.getTypedRuleContext(SqlBaseParser.CmpOpContext,0)

        def setCmpQuantifier(self):
            return self.getTypedRuleContext(SqlBaseParser.SetCmpQuantifierContext,0)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantifiedComparison" ):
                listener.enterQuantifiedComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantifiedComparison" ):
                listener.exitQuantifiedComparison(self)



    def predicate(self, value:ParserRuleContext):

        localctx = SqlBaseParser.PredicateContext(self, self._ctx, self.state, value)
        self.enterRule(localctx, 64, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 1323
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1255
                self.cmpOp()
                self.state = 1256
                localctx.right = self.valueExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.QuantifiedComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1258
                self.cmpOp()
                self.state = 1259
                self.setCmpQuantifier()
                self.state = 1260
                self.primaryExpression(0)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.BetweenContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1262
                    self.match(SqlBaseParser.NOT)


                self.state = 1265
                self.match(SqlBaseParser.BETWEEN)
                self.state = 1266
                localctx.lower = self.valueExpression(0)
                self.state = 1267
                self.match(SqlBaseParser.AND)
                self.state = 1268
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.InListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1270
                    self.match(SqlBaseParser.NOT)


                self.state = 1273
                self.match(SqlBaseParser.IN)
                self.state = 1274
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1275
                self.expr()
                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 1276
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1277
                    self.expr()
                    self.state = 1282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1283
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.InSubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1285
                    self.match(SqlBaseParser.NOT)


                self.state = 1288
                self.match(SqlBaseParser.IN)
                self.state = 1289
                self.subqueryExpression()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.LikeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1290
                    self.match(SqlBaseParser.NOT)


                self.state = 1293
                _la = self._input.LA(1)
                if not(_la==26 or _la==27):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1294
                localctx.pattern = self.valueExpression(0)
                self.state = 1297
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1295
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 1296
                    localctx.escape = self.parameterOrLiteral()


                pass

            elif la_ == 7:
                localctx = SqlBaseParser.ArrayLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1299
                    self.match(SqlBaseParser.NOT)


                self.state = 1302
                _la = self._input.LA(1)
                if not(_la==26 or _la==27):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1303
                localctx.quant = self.setCmpQuantifier()
                self.state = 1304
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1305
                localctx.v = self.valueExpression(0)
                self.state = 1306
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 1307
                    self.match(SqlBaseParser.ESCAPE)
                    self.state = 1308
                    localctx.escape = self.valueExpression(0)


                pass

            elif la_ == 8:
                localctx = SqlBaseParser.NullPredicateContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1311
                self.match(SqlBaseParser.IS)
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1312
                    self.match(SqlBaseParser.NOT)


                self.state = 1315
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.DistinctFromContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1316
                self.match(SqlBaseParser.IS)
                self.state = 1318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 1317
                    self.match(SqlBaseParser.NOT)


                self.state = 1320
                self.match(SqlBaseParser.DISTINCT)
                self.state = 1321
                self.match(SqlBaseParser.FROM)
                self.state = 1322
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BitwiseBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def BITWISE_AND(self):
            return self.getToken(SqlBaseParser.BITWISE_AND, 0)
        def BITWISE_OR(self):
            return self.getToken(SqlBaseParser.BITWISE_OR, 0)
        def BITWISE_XOR(self):
            return self.getToken(SqlBaseParser.BITWISE_XOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseBinary" ):
                listener.enterBitwiseBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseBinary" ):
                listener.exitBitwiseBinary(self)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueExpressionDefault" ):
                listener.enterValueExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueExpressionDefault" ):
                listener.exitValueExpressionDefault(self)


    class ConcatenationContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def CONCAT(self):
            return self.getToken(SqlBaseParser.CONCAT, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation" ):
                listener.enterConcatenation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation" ):
                listener.exitConcatenation(self)


    class FromStringLiteralCastContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromStringLiteralCast" ):
                listener.enterFromStringLiteralCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromStringLiteralCast" ):
                listener.exitFromStringLiteralCast(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.operator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(SqlBaseParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(SqlBaseParser.PERCENT, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticBinary" ):
                listener.enterArithmeticBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticBinary" ):
                listener.exitArithmeticBinary(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ValueExpressionContext
            super().__init__(parser)
            self.operator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticUnary" ):
                listener.enterArithmeticUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticUnary" ):
                listener.exitArithmeticUnary(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1326
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1327
                localctx.operator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==284 or _la==285):
                    localctx.operator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1328
                self.valueExpression(6)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.FromStringLiteralCastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1329
                self.dataType(0)
                self.state = 1330
                self.stringLiteral()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1348
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1346
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1334
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1335
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 286)) & ~0x3f) == 0 and ((1 << (_la - 286)) & 7) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1336
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.ArithmeticBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1337
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1338
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==284 or _la==285):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1339
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.BitwiseBinaryContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1340
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1341
                        localctx.operator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 304)) & ~0x3f) == 0 and ((1 << (_la - 304)) & 7) != 0)):
                            localctx.operator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1342
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.ConcatenationContext(self, SqlBaseParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 1343
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1344
                        self.match(SqlBaseParser.CONCAT)
                        self.state = 1345
                        localctx.right = self.valueExpression(3)
                        pass

             
                self.state = 1350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SubqueryExpressionDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subqueryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.SubqueryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpressionDefault" ):
                listener.enterSubqueryExpressionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpressionDefault" ):
                listener.exitSubqueryExpressionDefault(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDereference" ):
                listener.enterDereference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDereference" ):
                listener.exitDereference(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnReference" ):
                listener.enterColumnReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnReference" ):
                listener.exitColumnReference(self)


    class AtTimezoneContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.timestamp = None # PrimaryExpressionContext
            self.zone = None # PrimaryExpressionContext
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)
        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)
        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)
        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtTimezone" ):
                listener.enterAtTimezone(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtTimezone" ):
                listener.exitAtTimezone(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OPEN_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0)
        def CLOSE_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)


    class RecordSubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentContext
            self.copyFrom(ctx)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def DOT(self):
            return self.getToken(SqlBaseParser.DOT, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordSubscript" ):
                listener.enterRecordSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordSubscript" ):
                listener.exitRecordSubscript(self)


    class ExplicitFunctionDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def explicitFunction(self):
            return self.getTypedRuleContext(SqlBaseParser.ExplicitFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitFunctionDefault" ):
                listener.enterExplicitFunctionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitFunctionDefault" ):
                listener.exitExplicitFunctionDefault(self)


    class DoubleColonCastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def CAST_OPERATOR(self):
            return self.getToken(SqlBaseParser.CAST_OPERATOR, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleColonCast" ):
                listener.enterDoubleColonCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleColonCast" ):
                listener.exitDoubleColonCast(self)


    class DefaultParamOrLiteralContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterOrLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultParamOrLiteral" ):
                listener.enterDefaultParamOrLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultParamOrLiteral" ):
                listener.exitDefaultParamOrLiteral(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def ASTERISK(self):
            return self.getToken(SqlBaseParser.ASTERISK, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def filter_(self):
            return self.getTypedRuleContext(SqlBaseParser.FilterContext,0)

        def over(self):
            return self.getTypedRuleContext(SqlBaseParser.OverContext,0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def NULLS(self):
            return self.getToken(SqlBaseParser.NULLS, 0)
        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)
        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)
        def setQuant(self):
            return self.getTypedRuleContext(SqlBaseParser.SetQuantContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)


    class NestedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpression" ):
                listener.enterNestedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpression" ):
                listener.exitNestedExpression(self)


    class ArraySliceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.from_ = None # ValueExpressionContext
            self.to = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OPEN_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0)
        def COLON(self):
            return self.getToken(SqlBaseParser.COLON, 0)
        def CLOSE_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0)
        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArraySlice" ):
                listener.enterArraySlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArraySlice" ):
                listener.exitArraySlice(self)


    class ExistsContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists" ):
                listener.enterExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists" ):
                listener.exitExists(self)


    class EmptyArrayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EMPTY_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.EMPTY_SQUARE_BRACKET, 0)
        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyArray" ):
                listener.enterEmptyArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyArray" ):
                listener.exitEmptyArray(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DefaultParamOrLiteralContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1352
                self.parameterOrLiteral()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ExplicitFunctionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1353
                self.explicitFunction()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1354
                self.qname()
                self.state = 1355
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1356
                self.match(SqlBaseParser.ASTERISK)
                self.state = 1357
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1358
                    self.filter_()


                self.state = 1362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                if la_ == 1:
                    self.state = 1361
                    self.over()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1364
                self.ident()
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1365
                self.qname()
                self.state = 1366
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809494833966) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3436351590205) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -5509033754625) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & -7907688182455183) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 71995282677567487) != 0):
                    self.state = 1368
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==7 or _la==12:
                        self.state = 1367
                        self.setQuant()


                    self.state = 1370
                    self.expr()
                    self.state = 1375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 1371
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1372
                        self.expr()
                        self.state = 1377
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1380
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1382
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1381
                    self.filter_()


                self.state = 1386
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1384
                    _la = self._input.LA(1)
                    if not(_la==32 or _la==33):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1385
                    self.match(SqlBaseParser.NULLS)


                self.state = 1389
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                if la_ == 1:
                    self.state = 1388
                    self.over()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.SubqueryExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1391
                self.subqueryExpression()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.RecordSubscriptContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1392
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1393
                localctx.base = self.primaryExpression(0)
                self.state = 1394
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1395
                self.match(SqlBaseParser.DOT)
                self.state = 1396
                localctx.fieldName = self.ident()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.NestedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1398
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1399
                self.expr()
                self.state = 1400
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1402
                self.match(SqlBaseParser.EXISTS)
                self.state = 1403
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1404
                self.query()
                self.state = 1405
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.DereferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1407
                self.ident()
                self.state = 1412
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1408
                        self.match(SqlBaseParser.DOT)
                        self.state = 1409
                        self.ident() 
                    self.state = 1414
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

                pass

            elif la_ == 11:
                localctx = SqlBaseParser.EmptyArrayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232:
                    self.state = 1415
                    self.match(SqlBaseParser.ARRAY)


                self.state = 1418
                self.match(SqlBaseParser.EMPTY_SQUARE_BRACKET)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1446
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1444
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
                    if la_ == 1:
                        localctx = SqlBaseParser.AtTimezoneContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.timestamp = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1421
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1422
                        self.match(SqlBaseParser.AT)
                        self.state = 1423
                        self.match(SqlBaseParser.TIME)
                        self.state = 1424
                        self.match(SqlBaseParser.ZONE)
                        self.state = 1425
                        localctx.zone = self.primaryExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = SqlBaseParser.SubscriptContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1426
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1427
                        self.match(SqlBaseParser.OPEN_SQUARE_BRACKET)
                        self.state = 1428
                        localctx.index = self.valueExpression(0)
                        self.state = 1429
                        self.match(SqlBaseParser.CLOSE_SQUARE_BRACKET)
                        pass

                    elif la_ == 3:
                        localctx = SqlBaseParser.ArraySliceContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1431
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1432
                        self.match(SqlBaseParser.OPEN_SQUARE_BRACKET)
                        self.state = 1434
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809503226798) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3436351590205) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -5509033754625) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & -7942872554544015) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 71995282677567487) != 0):
                            self.state = 1433
                            localctx.from_ = self.valueExpression(0)


                        self.state = 1436
                        self.match(SqlBaseParser.COLON)
                        self.state = 1438
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809503226798) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3436351590205) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -5509033754625) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & -7942872554544015) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 71995282677567487) != 0):
                            self.state = 1437
                            localctx.to = self.valueExpression(0)


                        self.state = 1440
                        self.match(SqlBaseParser.CLOSE_SQUARE_BRACKET)
                        pass

                    elif la_ == 4:
                        localctx = SqlBaseParser.DoubleColonCastContext(self, SqlBaseParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 1441
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1442
                        self.match(SqlBaseParser.CAST_OPERATOR)
                        self.state = 1443
                        self.dataType(0)
                        pass

             
                self.state = 1448
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExplicitFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_explicitFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleCaseContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.operand = None # ExprContext
            self.elseExpr = None # ExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleCase" ):
                listener.enterSimpleCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleCase" ):
                listener.exitSimpleCase(self)


    class IfCaseContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.condition = None # ExprContext
            self.trueValue = None # ExprContext
            self.falseValue = None # ExprContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfCase" ):
                listener.enterIfCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfCase" ):
                listener.exitIfCase(self)


    class SpecialDateTimeFunctionContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.name = None # Token
            self.precision = None # IntegerLiteralContext
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def integerLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialDateTimeFunction" ):
                listener.enterSpecialDateTimeFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialDateTimeFunction" ):
                listener.exitSpecialDateTimeFunction(self)


    class SessionUserContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SESSION_USER(self):
            return self.getToken(SqlBaseParser.SESSION_USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSessionUser" ):
                listener.enterSessionUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSessionUser" ):
                listener.exitSessionUser(self)


    class ArraySubqueryContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def subqueryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.SubqueryExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArraySubquery" ):
                listener.enterArraySubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArraySubquery" ):
                listener.exitArraySubquery(self)


    class RightContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.strOrColName = None # ExprContext
            self.len_ = None # ExprContext
            self.copyFrom(ctx)

        def RIGHT(self):
            return self.getToken(SqlBaseParser.RIGHT, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def COMMA(self):
            return self.getToken(SqlBaseParser.COMMA, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRight" ):
                listener.enterRight(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRight" ):
                listener.exitRight(self)


    class SubstringContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstring" ):
                listener.enterSubstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstring" ):
                listener.exitSubstring(self)


    class CastContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)


    class CurrentUserContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_USER(self):
            return self.getToken(SqlBaseParser.CURRENT_USER, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentUser" ):
                listener.enterCurrentUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentUser" ):
                listener.exitCurrentUser(self)


    class ExtractContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(SqlBaseParser.EXTRACT, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def stringLiteralOrIdentifier(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralOrIdentifierContext,0)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtract" ):
                listener.enterExtract(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtract" ):
                listener.exitExtract(self)


    class TrimContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.trimMode = None # Token
            self.charsToTrim = None # ExprContext
            self.target = None # ExprContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)
        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrim" ):
                listener.enterTrim(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrim" ):
                listener.exitTrim(self)


    class LeftContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.strOrColName = None # ExprContext
            self.len_ = None # ExprContext
            self.copyFrom(ctx)

        def LEFT(self):
            return self.getToken(SqlBaseParser.LEFT, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def COMMA(self):
            return self.getToken(SqlBaseParser.COMMA, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeft" ):
                listener.enterLeft(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeft" ):
                listener.exitLeft(self)


    class CurrentSchemaContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_SCHEMA(self):
            return self.getToken(SqlBaseParser.CURRENT_SCHEMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentSchema" ):
                listener.enterCurrentSchema(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentSchema" ):
                listener.exitCurrentSchema(self)


    class SearchedCaseContext(ExplicitFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ExplicitFunctionContext
            super().__init__(parser)
            self.elseExpr = None # ExprContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(SqlBaseParser.CASE, 0)
        def END(self):
            return self.getToken(SqlBaseParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(SqlBaseParser.ELSE, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearchedCase" ):
                listener.enterSearchedCase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearchedCase" ):
                listener.exitSearchedCase(self)



    def explicitFunction(self):

        localctx = SqlBaseParser.ExplicitFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_explicitFunction)
        self._la = 0 # Token type
        try:
            self.state = 1565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1449
                localctx.name = self.match(SqlBaseParser.CURRENT_DATE)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1450
                localctx.name = self.match(SqlBaseParser.CURRENT_TIME)
                self.state = 1455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                if la_ == 1:
                    self.state = 1451
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 1452
                    localctx.precision = self.integerLiteral()
                    self.state = 1453
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                pass

            elif la_ == 3:
                localctx = SqlBaseParser.SpecialDateTimeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1457
                localctx.name = self.match(SqlBaseParser.CURRENT_TIMESTAMP)
                self.state = 1462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1458
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 1459
                    localctx.precision = self.integerLiteral()
                    self.state = 1460
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CurrentSchemaContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1464
                self.match(SqlBaseParser.CURRENT_SCHEMA)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.CurrentUserContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1465
                _la = self._input.LA(1)
                if not(_la==60 or _la==245):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.SessionUserContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1466
                self.match(SqlBaseParser.SESSION_USER)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.LeftContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1467
                self.match(SqlBaseParser.LEFT)
                self.state = 1468
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1469
                localctx.strOrColName = self.expr()
                self.state = 1470
                self.match(SqlBaseParser.COMMA)
                self.state = 1471
                localctx.len_ = self.expr()
                self.state = 1472
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.RightContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1474
                self.match(SqlBaseParser.RIGHT)
                self.state = 1475
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1476
                localctx.strOrColName = self.expr()
                self.state = 1477
                self.match(SqlBaseParser.COMMA)
                self.state = 1478
                localctx.len_ = self.expr()
                self.state = 1479
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.SubstringContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1481
                self.match(SqlBaseParser.SUBSTRING)
                self.state = 1482
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1483
                self.expr()
                self.state = 1484
                self.match(SqlBaseParser.FROM)
                self.state = 1485
                self.expr()
                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==47:
                    self.state = 1486
                    self.match(SqlBaseParser.FOR)
                    self.state = 1487
                    self.expr()


                self.state = 1490
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.TrimContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1492
                self.match(SqlBaseParser.TRIM)
                self.state = 1493
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1501
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1495
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                    if la_ == 1:
                        self.state = 1494
                        localctx.trimMode = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 123145302310912) != 0)):
                            localctx.trimMode = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809494838190) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3436351590205) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -5509033754625) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & -7907688182455183) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 71995282677567487) != 0):
                        self.state = 1497
                        localctx.charsToTrim = self.expr()


                    self.state = 1500
                    self.match(SqlBaseParser.FROM)


                self.state = 1503
                localctx.target = self.expr()
                self.state = 1504
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 11:
                localctx = SqlBaseParser.ExtractContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1506
                self.match(SqlBaseParser.EXTRACT)
                self.state = 1507
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1508
                self.stringLiteralOrIdentifier()
                self.state = 1509
                self.match(SqlBaseParser.FROM)
                self.state = 1510
                self.expr()
                self.state = 1511
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 12:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1513
                self.match(SqlBaseParser.CAST)
                self.state = 1514
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1515
                self.expr()
                self.state = 1516
                self.match(SqlBaseParser.AS)
                self.state = 1517
                self.dataType(0)
                self.state = 1518
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 13:
                localctx = SqlBaseParser.CastContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1520
                self.match(SqlBaseParser.TRY_CAST)
                self.state = 1521
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1522
                self.expr()
                self.state = 1523
                self.match(SqlBaseParser.AS)
                self.state = 1524
                self.dataType(0)
                self.state = 1525
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 14:
                localctx = SqlBaseParser.SimpleCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1527
                self.match(SqlBaseParser.CASE)
                self.state = 1528
                localctx.operand = self.expr()
                self.state = 1530 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1529
                    self.whenClause()
                    self.state = 1532 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==64):
                        break

                self.state = 1536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 1534
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1535
                    localctx.elseExpr = self.expr()


                self.state = 1538
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 15:
                localctx = SqlBaseParser.SearchedCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1540
                self.match(SqlBaseParser.CASE)
                self.state = 1542 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1541
                    self.whenClause()
                    self.state = 1544 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==64):
                        break

                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==66:
                    self.state = 1546
                    self.match(SqlBaseParser.ELSE)
                    self.state = 1547
                    localctx.elseExpr = self.expr()


                self.state = 1550
                self.match(SqlBaseParser.END)
                pass

            elif la_ == 16:
                localctx = SqlBaseParser.IfCaseContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1552
                self.match(SqlBaseParser.IF)
                self.state = 1553
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1554
                localctx.condition = self.expr()
                self.state = 1555
                self.match(SqlBaseParser.COMMA)
                self.state = 1556
                localctx.trueValue = self.expr()
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==293:
                    self.state = 1557
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1558
                    localctx.falseValue = self.expr()


                self.state = 1561
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 17:
                localctx = SqlBaseParser.ArraySubqueryContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1563
                self.match(SqlBaseParser.ARRAY)
                self.state = 1564
                self.subqueryExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_subqueryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpression" ):
                listener.enterSubqueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpression" ):
                listener.exitSubqueryExpression(self)




    def subqueryExpression(self):

        localctx = SqlBaseParser.SubqueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_subqueryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1568
            self.query()
            self.state = 1569
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterOrLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterOrLiteral

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ObjectLiteralContext(ParameterOrLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrLiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_CURLY_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_CURLY_BRACKET, 0)
        def CLOSE_CURLY_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_CURLY_BRACKET, 0)
        def objectKeyValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ObjectKeyValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ObjectKeyValueContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)


    class SimpleLiteralContext(ParameterOrLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrLiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterOrSimpleLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrSimpleLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleLiteral" ):
                listener.enterSimpleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleLiteral" ):
                listener.exitSimpleLiteral(self)


    class ArrayLiteralContext(ParameterOrLiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrLiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0)
        def CLOSE_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0)
        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)



    def parameterOrLiteral(self):

        localctx = SqlBaseParser.ParameterOrLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_parameterOrLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1599
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29, 30, 31, 69, 302, 303, 307, 308, 309, 310, 311, 316]:
                localctx = SqlBaseParser.SimpleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1571
                self.parameterOrSimpleLiteral()
                pass
            elif token in [232, 299]:
                localctx = SqlBaseParser.ArrayLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==232:
                    self.state = 1572
                    self.match(SqlBaseParser.ARRAY)


                self.state = 1575
                self.match(SqlBaseParser.OPEN_SQUARE_BRACKET)
                self.state = 1584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & -144809494838190) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & -3436351590205) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & -5509033754625) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & -7907688182455183) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 71995282677567487) != 0):
                    self.state = 1576
                    self.expr()
                    self.state = 1581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 1577
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1578
                        self.expr()
                        self.state = 1583
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1586
                self.match(SqlBaseParser.CLOSE_SQUARE_BRACKET)
                pass
            elif token in [297]:
                localctx = SqlBaseParser.ObjectLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1587
                self.match(SqlBaseParser.OPEN_CURLY_BRACKET)
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -1718175795199) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -4612531820615958531) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -514023868187065) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & 2111062325330175) != 0):
                    self.state = 1588
                    self.objectKeyValue()
                    self.state = 1593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 1589
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1590
                        self.objectKeyValue()
                        self.state = 1595
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1598
                self.match(SqlBaseParser.CLOSE_CURLY_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterOrSimpleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nullLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.NullLiteralContext,0)


        def intervalLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntervalLiteralContext,0)


        def escapedCharsStringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.EscapedCharsStringLiteralContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def numericLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.NumericLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanLiteralContext,0)


        def bitString(self):
            return self.getTypedRuleContext(SqlBaseParser.BitStringContext,0)


        def parameterExpr(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterExprContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterOrSimpleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterOrSimpleLiteral" ):
                listener.enterParameterOrSimpleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterOrSimpleLiteral" ):
                listener.exitParameterOrSimpleLiteral(self)




    def parameterOrSimpleLiteral(self):

        localctx = SqlBaseParser.ParameterOrSimpleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_parameterOrSimpleLiteral)
        try:
            self.state = 1609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1601
                self.nullLiteral()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1602
                self.intervalLiteral()
                pass
            elif token in [308]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1603
                self.escapedCharsStringLiteral()
                pass
            elif token in [307, 316]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1604
                self.stringLiteral()
                pass
            elif token in [310, 311]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1605
                self.numericLiteral()
                pass
            elif token in [30, 31]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1606
                self.booleanLiteral()
                pass
            elif token in [309]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1607
                self.bitString()
                pass
            elif token in [302, 303]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1608
                self.parameterExpr()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterOrIntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterOrInteger

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IntegerParamOrLiteralCastContext(ParameterOrIntegerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrIntegerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(SqlBaseParser.CAST, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def TRY_CAST(self):
            return self.getToken(SqlBaseParser.TRY_CAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerParamOrLiteralCast" ):
                listener.enterIntegerParamOrLiteralCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerParamOrLiteralCast" ):
                listener.exitIntegerParamOrLiteralCast(self)


    class IntegerParamOrLiteralDoubleColonCastContext(ParameterOrIntegerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrIntegerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterOrLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrLiteralContext,0)

        def CAST_OPERATOR(self):
            return self.getToken(SqlBaseParser.CAST_OPERATOR, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerParamOrLiteralDoubleColonCast" ):
                listener.enterIntegerParamOrLiteralDoubleColonCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerParamOrLiteralDoubleColonCast" ):
                listener.exitIntegerParamOrLiteralDoubleColonCast(self)


    class NullAsLiteralContext(ParameterOrIntegerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrIntegerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.NullLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullAsLiteral" ):
                listener.enterNullAsLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullAsLiteral" ):
                listener.exitNullAsLiteral(self)


    class ParameterExpressionContext(ParameterOrIntegerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrIntegerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def parameterExpr(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterExprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterExpression" ):
                listener.enterParameterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterExpression" ):
                listener.exitParameterExpression(self)


    class IntAsLiteralContext(ParameterOrIntegerContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterOrIntegerContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def integerLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntAsLiteral" ):
                listener.enterIntAsLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntAsLiteral" ):
                listener.exitIntAsLiteral(self)



    def parameterOrInteger(self):

        localctx = SqlBaseParser.ParameterOrIntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_parameterOrInteger)
        try:
            self.state = 1632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ParameterExpressionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1611
                self.parameterExpr()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IntAsLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1612
                self.integerLiteral()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.NullAsLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1613
                self.nullLiteral()
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.IntegerParamOrLiteralDoubleColonCastContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1614
                self.parameterOrLiteral()
                self.state = 1615
                self.match(SqlBaseParser.CAST_OPERATOR)
                self.state = 1616
                self.dataType(0)
                pass

            elif la_ == 5:
                localctx = SqlBaseParser.IntegerParamOrLiteralCastContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1618
                self.match(SqlBaseParser.CAST)
                self.state = 1619
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1620
                self.expr()
                self.state = 1621
                self.match(SqlBaseParser.AS)
                self.state = 1622
                self.dataType(0)
                self.state = 1623
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.IntegerParamOrLiteralCastContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1625
                self.match(SqlBaseParser.TRY_CAST)
                self.state = 1626
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1627
                self.expr()
                self.state = 1628
                self.match(SqlBaseParser.AS)
                self.state = 1629
                self.dataType(0)
                self.state = 1630
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterOrIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterExpr(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterExprContext,0)


        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterOrIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterOrIdent" ):
                listener.enterParameterOrIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterOrIdent" ):
                listener.exitParameterOrIdent(self)




    def parameterOrIdent(self):

        localctx = SqlBaseParser.ParameterOrIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_parameterOrIdent)
        try:
            self.state = 1636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [302, 303]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1634
                self.parameterExpr()
                pass
            elif token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313, 314, 315]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1635
                self.ident()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterOrStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterExpr(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterExprContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterOrString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterOrString" ):
                listener.enterParameterOrString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterOrString" ):
                listener.exitParameterOrString(self)




    def parameterOrString(self):

        localctx = SqlBaseParser.ParameterOrStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_parameterOrString)
        try:
            self.state = 1640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [302, 303]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1638
                self.parameterExpr()
                pass
            elif token in [307, 316]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1639
                self.stringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_parameterExpr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ParameterPlaceholderContext(ParameterExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUESTION(self):
            return self.getToken(SqlBaseParser.QUESTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterPlaceholder" ):
                listener.enterParameterPlaceholder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterPlaceholder" ):
                listener.exitParameterPlaceholder(self)


    class PositionalParameterContext(ParameterExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ParameterExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOLLAR(self):
            return self.getToken(SqlBaseParser.DOLLAR, 0)
        def integerLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionalParameter" ):
                listener.enterPositionalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionalParameter" ):
                listener.exitPositionalParameter(self)



    def parameterExpr(self):

        localctx = SqlBaseParser.ParameterExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_parameterExpr)
        try:
            self.state = 1645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [303]:
                localctx = SqlBaseParser.PositionalParameterContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1642
                self.match(SqlBaseParser.DOLLAR)
                self.state = 1643
                self.integerLiteral()
                pass
            elif token in [302]:
                localctx = SqlBaseParser.ParameterPlaceholderContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1644
                self.match(SqlBaseParser.QUESTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nullLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)




    def nullLiteral(self):

        localctx = SqlBaseParser.NullLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_nullLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.match(SqlBaseParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EscapedCharsStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPED_STRING(self):
            return self.getToken(SqlBaseParser.ESCAPED_STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_escapedCharsStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscapedCharsStringLiteral" ):
                listener.enterEscapedCharsStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscapedCharsStringLiteral" ):
                listener.exitEscapedCharsStringLiteral(self)




    def escapedCharsStringLiteral(self):

        localctx = SqlBaseParser.EscapedCharsStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_escapedCharsStringLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1649
            self.match(SqlBaseParser.ESCAPED_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DollarQuotedStringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_DOLLAR_QUOTED_STRING(self):
            return self.getToken(SqlBaseParser.BEGIN_DOLLAR_QUOTED_STRING, 0)

        def END_DOLLAR_QUOTED_STRING(self):
            return self.getToken(SqlBaseParser.END_DOLLAR_QUOTED_STRING, 0)

        def DOLLAR_QUOTED_STRING_BODY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOLLAR_QUOTED_STRING_BODY)
            else:
                return self.getToken(SqlBaseParser.DOLLAR_QUOTED_STRING_BODY, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_dollarQuotedStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDollarQuotedStringLiteral" ):
                listener.enterDollarQuotedStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDollarQuotedStringLiteral" ):
                listener.exitDollarQuotedStringLiteral(self)




    def dollarQuotedStringLiteral(self):

        localctx = SqlBaseParser.DollarQuotedStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_dollarQuotedStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1651
            self.match(SqlBaseParser.BEGIN_DOLLAR_QUOTED_STRING)
            self.state = 1655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==320:
                self.state = 1652
                self.match(SqlBaseParser.DOLLAR_QUOTED_STRING_BODY)
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1658
            self.match(SqlBaseParser.END_DOLLAR_QUOTED_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(SqlBaseParser.STRING, 0)

        def dollarQuotedStringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.DollarQuotedStringLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = SqlBaseParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_stringLiteral)
        try:
            self.state = 1662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [307]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1660
                self.match(SqlBaseParser.STRING)
                pass
            elif token in [316]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1661
                self.dollarQuotedStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BIT_STRING(self):
            return self.getToken(SqlBaseParser.BIT_STRING, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_bitString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitString" ):
                listener.enterBitString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitString" ):
                listener.exitBitString(self)




    def bitString(self):

        localctx = SqlBaseParser.BitStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_bitString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.match(SqlBaseParser.BIT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptSafeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # SubscriptSafeContext
            self.index = None # ValueExpressionContext

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def OPEN_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_SQUARE_BRACKET, 0)

        def CLOSE_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_SQUARE_BRACKET, 0)

        def subscriptSafe(self):
            return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,0)


        def valueExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.ValueExpressionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_subscriptSafe

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptSafe" ):
                listener.enterSubscriptSafe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptSafe" ):
                listener.exitSubscriptSafe(self)



    def subscriptSafe(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.SubscriptSafeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 96
        self.enterRecursionRule(localctx, 96, self.RULE_subscriptSafe, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.qname()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,210,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.SubscriptSafeContext(self, _parentctx, _parentState)
                    localctx.value = _prevctx
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_subscriptSafe)
                    self.state = 1669
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1670
                    self.match(SqlBaseParser.OPEN_SQUARE_BRACKET)
                    self.state = 1671
                    localctx.index = self.valueExpression(0)
                    self.state = 1672
                    self.match(SqlBaseParser.CLOSE_SQUARE_BRACKET) 
                self.state = 1678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CmpOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def NEQ(self):
            return self.getToken(SqlBaseParser.NEQ, 0)

        def LT(self):
            return self.getToken(SqlBaseParser.LT, 0)

        def LTE(self):
            return self.getToken(SqlBaseParser.LTE, 0)

        def GT(self):
            return self.getToken(SqlBaseParser.GT, 0)

        def GTE(self):
            return self.getToken(SqlBaseParser.GTE, 0)

        def LLT(self):
            return self.getToken(SqlBaseParser.LLT, 0)

        def REGEX_MATCH(self):
            return self.getToken(SqlBaseParser.REGEX_MATCH, 0)

        def REGEX_NO_MATCH(self):
            return self.getToken(SqlBaseParser.REGEX_NO_MATCH, 0)

        def REGEX_MATCH_CI(self):
            return self.getToken(SqlBaseParser.REGEX_MATCH_CI, 0)

        def REGEX_NO_MATCH_CI(self):
            return self.getToken(SqlBaseParser.REGEX_NO_MATCH_CI, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_cmpOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCmpOp" ):
                listener.enterCmpOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCmpOp" ):
                listener.exitCmpOp(self)




    def cmpOp(self):

        localctx = SqlBaseParser.CmpOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_cmpOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            _la = self._input.LA(1)
            if not(((((_la - 273)) & ~0x3f) == 0 and ((1 << (_la - 273)) & 2047) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetCmpQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(SqlBaseParser.ANY, 0)

        def SOME(self):
            return self.getToken(SqlBaseParser.SOME, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_setCmpQuantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCmpQuantifier" ):
                listener.enterSetCmpQuantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCmpQuantifier" ):
                listener.exitSetCmpQuantifier(self)




    def setCmpQuantifier(self):

        localctx = SqlBaseParser.SetCmpQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_setCmpQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1681
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 896) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExprContext
            self.result = None # ExprContext

        def WHEN(self):
            return self.getToken(SqlBaseParser.WHEN, 0)

        def THEN(self):
            return self.getToken(SqlBaseParser.THEN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)




    def whenClause(self):

        localctx = SqlBaseParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1683
            self.match(SqlBaseParser.WHEN)
            self.state = 1684
            localctx.condition = self.expr()
            self.state = 1685
            self.match(SqlBaseParser.THEN)
            self.state = 1686
            localctx.result = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def windowDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowDefinitionContext,0)


        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedWindow

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedWindow" ):
                listener.enterNamedWindow(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedWindow" ):
                listener.exitNamedWindow(self)




    def namedWindow(self):

        localctx = SqlBaseParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1688
            localctx.name = self.ident()
            self.state = 1689
            self.match(SqlBaseParser.AS)
            self.state = 1690
            self.windowDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def windowDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowDefinitionContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver" ):
                listener.enterOver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver" ):
                listener.exitOver(self)




    def over(self):

        localctx = SqlBaseParser.OverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_over)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.match(SqlBaseParser.OVER)
            self.state = 1693
            self.windowDefinition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.windowRef = None # IdentContext
            self._expr = None # ExprContext
            self.partition = list() # of ExprContexts

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BY)
            else:
                return self.getToken(SqlBaseParser.BY, i)

        def ORDER(self):
            return self.getToken(SqlBaseParser.ORDER, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SortItemContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SortItemContext,i)


        def windowFrame(self):
            return self.getTypedRuleContext(SqlBaseParser.WindowFrameContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowDefinition" ):
                listener.enterWindowDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowDefinition" ):
                listener.exitWindowDefinition(self)




    def windowDefinition(self):

        localctx = SqlBaseParser.WindowDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_windowDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313, 314, 315]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1695
                localctx.windowRef = self.ident()
                pass
            elif token in [295]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1696
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1698
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1697
                    localctx.windowRef = self.ident()


                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==82:
                    self.state = 1700
                    self.match(SqlBaseParser.PARTITION)
                    self.state = 1701
                    self.match(SqlBaseParser.BY)
                    self.state = 1702
                    localctx._expr = self.expr()
                    localctx.partition.append(localctx._expr)
                    self.state = 1707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 1703
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1704
                        localctx._expr = self.expr()
                        localctx.partition.append(localctx._expr)
                        self.state = 1709
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==16:
                    self.state = 1712
                    self.match(SqlBaseParser.ORDER)
                    self.state = 1713
                    self.match(SqlBaseParser.BY)
                    self.state = 1714
                    self.sortItem()
                    self.state = 1719
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 1715
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1716
                        self.sortItem()
                        self.state = 1721
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==84 or _la==85:
                    self.state = 1724
                    self.windowFrame()


                self.state = 1727
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(SqlBaseParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(SqlBaseParser.AND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_windowFrame

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowFrame" ):
                listener.enterWindowFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowFrame" ):
                listener.exitWindowFrame(self)




    def windowFrame(self):

        localctx = SqlBaseParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_windowFrame)
        try:
            self.state = 1746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1730
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 1731
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1732
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 1733
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1734
                localctx.frameType = self.match(SqlBaseParser.RANGE)
                self.state = 1735
                self.match(SqlBaseParser.BETWEEN)
                self.state = 1736
                localctx.start = self.frameBound()
                self.state = 1737
                self.match(SqlBaseParser.AND)
                self.state = 1738
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1740
                localctx.frameType = self.match(SqlBaseParser.ROWS)
                self.state = 1741
                self.match(SqlBaseParser.BETWEEN)
                self.state = 1742
                localctx.start = self.frameBound()
                self.state = 1743
                self.match(SqlBaseParser.AND)
                self.state = 1744
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_frameBound

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BoundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoundedFrame" ):
                listener.enterBoundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoundedFrame" ):
                listener.exitBoundedFrame(self)


    class UnboundedFrameContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.boundType = None # Token
            self.copyFrom(ctx)

        def UNBOUNDED(self):
            return self.getToken(SqlBaseParser.UNBOUNDED, 0)
        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)
        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnboundedFrame" ):
                listener.enterUnboundedFrame(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnboundedFrame" ):
                listener.exitUnboundedFrame(self)


    class CurrentRowBoundContext(FrameBoundContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.FrameBoundContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)
        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentRowBound" ):
                listener.enterCurrentRowBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentRowBound" ):
                listener.exitCurrentRowBound(self)



    def frameBound(self):

        localctx = SqlBaseParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 1757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1748
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 1749
                localctx.boundType = self.match(SqlBaseParser.PRECEDING)
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.UnboundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1750
                self.match(SqlBaseParser.UNBOUNDED)
                self.state = 1751
                localctx.boundType = self.match(SqlBaseParser.FOLLOWING)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CurrentRowBoundContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1752
                self.match(SqlBaseParser.CURRENT)
                self.state = 1753
                self.match(SqlBaseParser.ROW)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.BoundedFrameContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1754
                self.expr()
                self.state = 1755
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==87 or _la==88):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QnamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QnameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QnameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qnames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQnames" ):
                listener.enterQnames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQnames" ):
                listener.exitQnames(self)




    def qnames(self):

        localctx = SqlBaseParser.QnamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_qnames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            self.qname()
            self.state = 1764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 1760
                self.match(SqlBaseParser.COMMA)
                self.state = 1761
                self.qname()
                self.state = 1766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.DOT)
            else:
                return self.getToken(SqlBaseParser.DOT, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_qname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQname" ):
                listener.enterQname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQname" ):
                listener.exitQname(self)




    def qname(self):

        localctx = SqlBaseParser.QnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_qname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1767
            self.ident()
            self.state = 1772
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1768
                    self.match(SqlBaseParser.DOT)
                    self.state = 1769
                    self.ident() 
                self.state = 1774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpaceSeparatedIdentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identWithOrWithoutValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentWithOrWithoutValueContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentWithOrWithoutValueContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_spaceSeparatedIdents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpaceSeparatedIdents" ):
                listener.enterSpaceSeparatedIdents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpaceSeparatedIdents" ):
                listener.exitSpaceSeparatedIdents(self)




    def spaceSeparatedIdents(self):

        localctx = SqlBaseParser.SpaceSeparatedIdentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_spaceSeparatedIdents)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.identWithOrWithoutValue()
            self.state = 1779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -1718175795199) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -4612531820615958531) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -514023868187065) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & 2111062325330175) != 0):
                self.state = 1776
                self.identWithOrWithoutValue()
                self.state = 1781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentWithOrWithoutValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def parameterOrSimpleLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrSimpleLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_identWithOrWithoutValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentWithOrWithoutValue" ):
                listener.enterIdentWithOrWithoutValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentWithOrWithoutValue" ):
                listener.exitIdentWithOrWithoutValue(self)




    def identWithOrWithoutValue(self):

        localctx = SqlBaseParser.IdentWithOrWithoutValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_identWithOrWithoutValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1782
            self.ident()
            self.state = 1784
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 1783
                self.parameterOrSimpleLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_idents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdents" ):
                listener.enterIdents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdents" ):
                listener.exitIdents(self)




    def idents(self):

        localctx = SqlBaseParser.IdentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_idents)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.ident()
            self.state = 1791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 1787
                self.match(SqlBaseParser.COMMA)
                self.state = 1788
                self.ident()
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unquotedIdent(self):
            return self.getTypedRuleContext(SqlBaseParser.UnquotedIdentContext,0)


        def quotedIdent(self):
            return self.getTypedRuleContext(SqlBaseParser.QuotedIdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_ident

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdent" ):
                listener.enterIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdent" ):
                listener.exitIdent(self)




    def ident(self):

        localctx = SqlBaseParser.IdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ident)
        try:
            self.state = 1796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1794
                self.unquotedIdent()
                pass
            elif token in [314, 315]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1795
                self.quotedIdent()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnquotedIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_unquotedIdent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DigitIdentifierContext(UnquotedIdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.UnquotedIdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIGIT_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.DIGIT_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDigitIdentifier" ):
                listener.enterDigitIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDigitIdentifier" ):
                listener.exitDigitIdentifier(self)


    class UnquotedIdentifierContext(UnquotedIdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.UnquotedIdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(SqlBaseParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(SqlBaseParser.NonReservedContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnquotedIdentifier" ):
                listener.enterUnquotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnquotedIdentifier" ):
                listener.exitUnquotedIdentifier(self)



    def unquotedIdent(self):

        localctx = SqlBaseParser.UnquotedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_unquotedIdent)
        try:
            self.state = 1801
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [312]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1798
                self.match(SqlBaseParser.IDENTIFIER)
                pass
            elif token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272]:
                localctx = SqlBaseParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1799
                self.nonReserved()
                pass
            elif token in [313]:
                localctx = SqlBaseParser.DigitIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1800
                self.match(SqlBaseParser.DIGIT_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_quotedIdent

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class BackQuotedIdentifierContext(QuotedIdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuotedIdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBackQuotedIdentifier" ):
                listener.enterBackQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBackQuotedIdentifier" ):
                listener.exitBackQuotedIdentifier(self)


    class QuotedIdentifierContext(QuotedIdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.QuotedIdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(SqlBaseParser.QUOTED_IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuotedIdentifier" ):
                listener.enterQuotedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuotedIdentifier" ):
                listener.exitQuotedIdentifier(self)



    def quotedIdent(self):

        localctx = SqlBaseParser.QuotedIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_quotedIdent)
        try:
            self.state = 1805
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [314]:
                localctx = SqlBaseParser.QuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1803
                self.match(SqlBaseParser.QUOTED_IDENTIFIER)
                pass
            elif token in [315]:
                localctx = SqlBaseParser.BackQuotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1804
                self.match(SqlBaseParser.BACKQUOTED_IDENTIFIER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralOrIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_stringLiteralOrIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralOrIdentifier" ):
                listener.enterStringLiteralOrIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralOrIdentifier" ):
                listener.exitStringLiteralOrIdentifier(self)




    def stringLiteralOrIdentifier(self):

        localctx = SqlBaseParser.StringLiteralOrIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_stringLiteralOrIdentifier)
        try:
            self.state = 1809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313, 314, 315]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1807
                self.ident()
                pass
            elif token in [307, 316]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1808
                self.stringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralOrIdentifierOrQnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_stringLiteralOrIdentifierOrQname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteralOrIdentifierOrQname" ):
                listener.enterStringLiteralOrIdentifierOrQname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteralOrIdentifierOrQname" ):
                listener.exitStringLiteralOrIdentifierOrQname(self)




    def stringLiteralOrIdentifierOrQname(self):

        localctx = SqlBaseParser.StringLiteralOrIdentifierOrQnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_stringLiteralOrIdentifierOrQname)
        try:
            self.state = 1814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1811
                self.ident()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1812
                self.qname()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1813
                self.stringLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.DecimalLiteralContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_numericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)




    def numericLiteral(self):

        localctx = SqlBaseParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_numericLiteral)
        try:
            self.state = 1818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [311]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1816
                self.decimalLiteral()
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1817
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sign = None # Token
            self.from_ = None # IntervalFieldContext
            self.to = None # IntervalFieldContext

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def intervalField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntervalFieldContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntervalFieldContext,i)


        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def PLUS(self):
            return self.getToken(SqlBaseParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalLiteral" ):
                listener.enterIntervalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalLiteral" ):
                listener.exitIntervalLiteral(self)




    def intervalLiteral(self):

        localctx = SqlBaseParser.IntervalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_intervalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.match(SqlBaseParser.INTERVAL)
            self.state = 1822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==284 or _la==285:
                self.state = 1821
                localctx.sign = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==284 or _la==285):
                    localctx.sign = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1824
            self.stringLiteral()
            self.state = 1825
            localctx.from_ = self.intervalField()
            self.state = 1828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1826
                self.match(SqlBaseParser.TO)
                self.state = 1827
                localctx.to = self.intervalField()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_intervalField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalField" ):
                listener.enterIntervalField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalField" ):
                listener.exitIntervalField(self)




    def intervalField(self):

        localctx = SqlBaseParser.IntervalFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_intervalField)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1830
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70931694131085312) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(SqlBaseParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SqlBaseParser.FALSE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = SqlBaseParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            _la = self._input.LA(1)
            if not(_la==30 or _la==31):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_VALUE(self):
            return self.getToken(SqlBaseParser.DECIMAL_VALUE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)




    def decimalLiteral(self):

        localctx = SqlBaseParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_decimalLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1834
            self.match(SqlBaseParser.DECIMAL_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(SqlBaseParser.INTEGER_VALUE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_integerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerLiteral" ):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerLiteral" ):
                listener.exitIntegerLiteral(self)




    def integerLiteral(self):

        localctx = SqlBaseParser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_integerLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(SqlBaseParser.INTEGER_VALUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectKeyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # IdentContext
            self.value = None # ExprContext

        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_objectKeyValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectKeyValue" ):
                listener.enterObjectKeyValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectKeyValue" ):
                listener.exitObjectKeyValue(self)




    def objectKeyValue(self):

        localctx = SqlBaseParser.ObjectKeyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_objectKeyValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            localctx.key = self.ident()
            self.state = 1839
            self.match(SqlBaseParser.EQ)
            self.state = 1840
            localctx.value = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryContext,0)


        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_insertSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertSource" ):
                listener.enterInsertSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertSource" ):
                listener.exitInsertSource(self)




    def insertSource(self):

        localctx = SqlBaseParser.InsertSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_insertSource)
        try:
            self.state = 1847
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 91, 207]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1842
                self.query()
                pass
            elif token in [295]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1843
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1844
                self.query()
                self.state = 1845
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnConflictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def CONFLICT(self):
            return self.getToken(SqlBaseParser.CONFLICT, 0)

        def DO(self):
            return self.getToken(SqlBaseParser.DO, 0)

        def NOTHING(self):
            return self.getToken(SqlBaseParser.NOTHING, 0)

        def conflictTarget(self):
            return self.getTypedRuleContext(SqlBaseParser.ConflictTargetContext,0)


        def UPDATE(self):
            return self.getToken(SqlBaseParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SqlBaseParser.SET, 0)

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AssignmentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_onConflict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOnConflict" ):
                listener.enterOnConflict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOnConflict" ):
                listener.exitOnConflict(self)




    def onConflict(self):

        localctx = SqlBaseParser.OnConflictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_onConflict)
        self._la = 0 # Token type
        try:
            self.state = 1870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1849
                self.match(SqlBaseParser.ON)
                self.state = 1850
                self.match(SqlBaseParser.CONFLICT)
                self.state = 1852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==295:
                    self.state = 1851
                    self.conflictTarget()


                self.state = 1854
                self.match(SqlBaseParser.DO)
                self.state = 1855
                self.match(SqlBaseParser.NOTHING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1856
                self.match(SqlBaseParser.ON)
                self.state = 1857
                self.match(SqlBaseParser.CONFLICT)
                self.state = 1858
                self.conflictTarget()
                self.state = 1859
                self.match(SqlBaseParser.DO)
                self.state = 1860
                self.match(SqlBaseParser.UPDATE)
                self.state = 1861
                self.match(SqlBaseParser.SET)
                self.state = 1862
                self.assignment()
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 1863
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1864
                    self.assignment()
                    self.state = 1869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConflictTargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def subscriptSafe(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.SubscriptSafeContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_conflictTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflictTarget" ):
                listener.enterConflictTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflictTarget" ):
                listener.exitConflictTarget(self)




    def conflictTarget(self):

        localctx = SqlBaseParser.ConflictTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_conflictTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1873
            self.subscriptSafe(0)
            self.state = 1878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 1874
                self.match(SqlBaseParser.COMMA)
                self.state = 1875
                self.subscriptSafe(0)
                self.state = 1880
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1881
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValuesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExprContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExprContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValues" ):
                listener.enterValues(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValues" ):
                listener.exitValues(self)




    def values(self):

        localctx = SqlBaseParser.ValuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_values)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1883
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1884
            self.expr()
            self.state = 1889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 1885
                self.match(SqlBaseParser.COMMA)
                self.state = 1886
                self.expr()
                self.state = 1891
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1892
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_columns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumns" ):
                listener.enterColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumns" ):
                listener.exitColumns(self)




    def columns(self):

        localctx = SqlBaseParser.ColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_columns)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 1895
            self.primaryExpression(0)
            self.state = 1900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 1896
                self.match(SqlBaseParser.COMMA)
                self.state = 1897
                self.primaryExpression(0)
                self.state = 1902
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1903
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = SqlBaseParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1905
            self.primaryExpression(0)
            self.state = 1906
            self.match(SqlBaseParser.EQ)
            self.state = 1907
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateStmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_createStmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreateRepositoryContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.type_ = None # IdentContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def REPOSITORY(self):
            return self.getToken(SqlBaseParser.REPOSITORY, 0)
        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRepository" ):
                listener.enterCreateRepository(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRepository" ):
                listener.exitCreateRepository(self)


    class CreateTableContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def tableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableElementContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def partitionedByOrClusteredInto(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionedByOrClusteredIntoContext,0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)
        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)
        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTable" ):
                listener.enterCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTable" ):
                listener.exitCreateTable(self)


    class CreateTableAsContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def insertSource(self):
            return self.getTypedRuleContext(SqlBaseParser.InsertSourceContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTableAs" ):
                listener.enterCreateTableAs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTableAs" ):
                listener.exitCreateTableAs(self)


    class CreateSnapshotContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SNAPSHOT(self):
            return self.getToken(SqlBaseParser.SNAPSHOT, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def tableWithPartitions(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionsContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSnapshot" ):
                listener.enterCreateSnapshot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSnapshot" ):
                listener.exitCreateSnapshot(self)


    class CreateFunctionContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # QnameContext
            self.returnType = None # DataTypeContext
            self.language = None # ParameterOrIdentContext
            self.body = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(SqlBaseParser.FUNCTION, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def RETURNS(self):
            return self.getToken(SqlBaseParser.RETURNS, 0)
        def LANGUAGE(self):
            return self.getToken(SqlBaseParser.LANGUAGE, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def parameterOrIdent(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIdentContext,0)

        def parameterOrString(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)
        def functionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.FunctionArgumentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.FunctionArgumentContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)


    class CreateSubscriptionContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.conninfo = None # ExprContext
            self.publications = None # IdentsContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def SUBSCRIPTION(self):
            return self.getToken(SqlBaseParser.SUBSCRIPTION, 0)
        def CONNECTION(self):
            return self.getToken(SqlBaseParser.CONNECTION, 0)
        def PUBLICATION(self):
            return self.getToken(SqlBaseParser.PUBLICATION, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def idents(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentsContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateSubscription" ):
                listener.enterCreateSubscription(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateSubscription" ):
                listener.exitCreateSubscription(self)


    class CreateRoleContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.options = None # SpaceSeparatedIdentsContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def USER(self):
            return self.getToken(SqlBaseParser.USER, 0)
        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)

        def spaceSeparatedIdents(self):
            return self.getTypedRuleContext(SqlBaseParser.SpaceSeparatedIdentsContext,0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)


    class CreatePublicationContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def PUBLICATION(self):
            return self.getToken(SqlBaseParser.PUBLICATION, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def FOR(self):
            return self.getToken(SqlBaseParser.FOR, 0)
        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)
        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def qname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.QnameContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.QnameContext,i)

        def ASTERISK(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ASTERISK)
            else:
                return self.getToken(SqlBaseParser.ASTERISK, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatePublication" ):
                listener.enterCreatePublication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatePublication" ):
                listener.exitCreatePublication(self)


    class CreateBlobTableContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.numShards = None # BlobClusteredIntoContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)
        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)
        def table(self):
            return self.getTypedRuleContext(SqlBaseParser.TableContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)

        def blobClusteredInto(self):
            return self.getTypedRuleContext(SqlBaseParser.BlobClusteredIntoContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateBlobTable" ):
                listener.enterCreateBlobTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateBlobTable" ):
                listener.exitCreateBlobTable(self)


    class CreateViewContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # QnameContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)
        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def queryOptParens(self):
            return self.getTypedRuleContext(SqlBaseParser.QueryOptParensContext,0)

        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)

        def OR(self):
            return self.getToken(SqlBaseParser.OR, 0)
        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)


    class CreateAnalyzerContext(CreateStmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.CreateStmtContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.extendedName = None # IdentContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(SqlBaseParser.CREATE, 0)
        def ANALYZER(self):
            return self.getToken(SqlBaseParser.ANALYZER, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def analyzerElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.AnalyzerElementContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.AnalyzerElementContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def EXTENDS(self):
            return self.getToken(SqlBaseParser.EXTENDS, 0)
        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateAnalyzer" ):
                listener.enterCreateAnalyzer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateAnalyzer" ):
                listener.exitCreateAnalyzer(self)



    def createStmt(self):

        localctx = SqlBaseParser.CreateStmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_createStmt)
        self._la = 0 # Token type
        try:
            self.state = 2075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1909
                self.match(SqlBaseParser.CREATE)
                self.state = 1910
                self.match(SqlBaseParser.TABLE)
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1911
                    self.match(SqlBaseParser.IF)
                    self.state = 1912
                    self.match(SqlBaseParser.NOT)
                    self.state = 1913
                    self.match(SqlBaseParser.EXISTS)


                self.state = 1916
                self.table()
                self.state = 1917
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1918
                self.tableElement()
                self.state = 1923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 1919
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1920
                    self.tableElement()
                    self.state = 1925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1926
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 1927
                self.partitionedByOrClusteredInto()
                self.state = 1929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 1928
                    self.withProperties()


                pass

            elif la_ == 2:
                localctx = SqlBaseParser.CreateTableAsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1931
                self.match(SqlBaseParser.CREATE)
                self.state = 1932
                self.match(SqlBaseParser.TABLE)
                self.state = 1933
                self.table()
                self.state = 1934
                self.match(SqlBaseParser.AS)
                self.state = 1935
                self.insertSource()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.CreateBlobTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1937
                self.match(SqlBaseParser.CREATE)
                self.state = 1938
                self.match(SqlBaseParser.BLOB)
                self.state = 1939
                self.match(SqlBaseParser.TABLE)
                self.state = 1940
                self.table()
                self.state = 1942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==219:
                    self.state = 1941
                    localctx.numShards = self.blobClusteredInto()


                self.state = 1945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 1944
                    self.withProperties()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.CreateRepositoryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1947
                self.match(SqlBaseParser.CREATE)
                self.state = 1948
                self.match(SqlBaseParser.REPOSITORY)
                self.state = 1949
                localctx.name = self.ident()
                self.state = 1950
                self.match(SqlBaseParser.TYPE)
                self.state = 1951
                localctx.type_ = self.ident()
                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 1952
                    self.withProperties()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.CreateSnapshotContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1955
                self.match(SqlBaseParser.CREATE)
                self.state = 1956
                self.match(SqlBaseParser.SNAPSHOT)
                self.state = 1957
                self.qname()
                self.state = 1961
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [7]:
                    self.state = 1958
                    self.match(SqlBaseParser.ALL)
                    pass
                elif token in [96]:
                    self.state = 1959
                    self.match(SqlBaseParser.TABLE)
                    self.state = 1960
                    self.tableWithPartitions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 1963
                    self.withProperties()


                pass

            elif la_ == 6:
                localctx = SqlBaseParser.CreateAnalyzerContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1966
                self.match(SqlBaseParser.CREATE)
                self.state = 1967
                self.match(SqlBaseParser.ANALYZER)
                self.state = 1968
                localctx.name = self.ident()
                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==234:
                    self.state = 1969
                    self.match(SqlBaseParser.EXTENDS)
                    self.state = 1970
                    localctx.extendedName = self.ident()


                self.state = 1974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 1973
                    self.match(SqlBaseParser.WITH)


                self.state = 1976
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 1977
                self.analyzerElement()
                self.state = 1982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 1978
                    self.match(SqlBaseParser.COMMA)
                    self.state = 1979
                    self.analyzerElement()
                    self.state = 1984
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1985
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1987
                self.match(SqlBaseParser.CREATE)
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 1988
                    self.match(SqlBaseParser.OR)
                    self.state = 1989
                    self.match(SqlBaseParser.REPLACE)


                self.state = 1992
                self.match(SqlBaseParser.FUNCTION)
                self.state = 1993
                localctx.name = self.qname()
                self.state = 1994
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -1718175795199) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & 9221680432477634559) != 0) or ((((_la - 197)) & ~0x3f) == 0 and ((1 << (_la - 197)) & -8224347531254671) != 0) or ((((_la - 261)) & ~0x3f) == 0 and ((1 << (_la - 261)) & 33776997205282815) != 0):
                    self.state = 1995
                    self.functionArgument()
                    self.state = 2000
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 1996
                        self.match(SqlBaseParser.COMMA)
                        self.state = 1997
                        self.functionArgument()
                        self.state = 2002
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2005
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                self.state = 2006
                self.match(SqlBaseParser.RETURNS)
                self.state = 2007
                localctx.returnType = self.dataType(0)
                self.state = 2008
                self.match(SqlBaseParser.LANGUAGE)
                self.state = 2009
                localctx.language = self.parameterOrIdent()
                self.state = 2010
                self.match(SqlBaseParser.AS)
                self.state = 2011
                localctx.body = self.parameterOrString()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.CreateRoleContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2013
                self.match(SqlBaseParser.CREATE)
                self.state = 2014
                _la = self._input.LA(1)
                if not(_la==245 or _la==246):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2015
                localctx.name = self.ident()
                self.state = 2029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -1718171600895) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -4612531820615958531) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -514023868187065) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & 2111063399071999) != 0):
                    self.state = 2027
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
                    if la_ == 1:
                        self.state = 2016
                        self.withProperties()
                        pass

                    elif la_ == 2:
                        self.state = 2018
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==91:
                            self.state = 2017
                            self.match(SqlBaseParser.WITH)


                        self.state = 2021
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==295:
                            self.state = 2020
                            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)


                        self.state = 2023
                        localctx.options = self.spaceSeparatedIdents()
                        self.state = 2025
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==296:
                            self.state = 2024
                            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                        pass




                pass

            elif la_ == 9:
                localctx = SqlBaseParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2031
                self.match(SqlBaseParser.CREATE)
                self.state = 2034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==20:
                    self.state = 2032
                    self.match(SqlBaseParser.OR)
                    self.state = 2033
                    self.match(SqlBaseParser.REPLACE)


                self.state = 2036
                self.match(SqlBaseParser.VIEW)
                self.state = 2037
                localctx.name = self.qname()
                self.state = 2038
                self.match(SqlBaseParser.AS)
                self.state = 2039
                self.queryOptParens()
                pass

            elif la_ == 10:
                localctx = SqlBaseParser.CreatePublicationContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2041
                self.match(SqlBaseParser.CREATE)
                self.state = 2042
                self.match(SqlBaseParser.PUBLICATION)
                self.state = 2043
                localctx.name = self.ident()
                self.state = 2063
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
                if la_ == 1:
                    self.state = 2044
                    self.match(SqlBaseParser.FOR)
                    self.state = 2045
                    self.match(SqlBaseParser.ALL)
                    self.state = 2046
                    self.match(SqlBaseParser.TABLES)

                elif la_ == 2:
                    self.state = 2047
                    self.match(SqlBaseParser.FOR)
                    self.state = 2048
                    self.match(SqlBaseParser.TABLE)
                    self.state = 2049
                    self.qname()
                    self.state = 2051
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==286:
                        self.state = 2050
                        self.match(SqlBaseParser.ASTERISK)


                    self.state = 2060
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 2053
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2054
                        self.qname()
                        self.state = 2056
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==286:
                            self.state = 2055
                            self.match(SqlBaseParser.ASTERISK)


                        self.state = 2062
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 11:
                localctx = SqlBaseParser.CreateSubscriptionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2065
                self.match(SqlBaseParser.CREATE)
                self.state = 2066
                self.match(SqlBaseParser.SUBSCRIPTION)
                self.state = 2067
                localctx.name = self.ident()
                self.state = 2068
                self.match(SqlBaseParser.CONNECTION)
                self.state = 2069
                localctx.conninfo = self.expr()
                self.state = 2070
                self.match(SqlBaseParser.PUBLICATION)
                self.state = 2071
                localctx.publications = self.idents()
                self.state = 2073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 2072
                    self.withProperties()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext
            self.type_ = None # DataTypeContext

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_functionArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgument" ):
                listener.enterFunctionArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgument" ):
                listener.exitFunctionArgument(self)




    def functionArgument(self):

        localctx = SqlBaseParser.FunctionArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_functionArgument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.state = 2077
                localctx.name = self.ident()


            self.state = 2080
            localctx.type_ = self.dataType(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_alterTableDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableWithPartitionDefaultContext(AlterTableDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterTableDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableWithPartition(self):
            return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableWithPartitionDefault" ):
                listener.enterTableWithPartitionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableWithPartitionDefault" ):
                listener.exitTableWithPartitionDefault(self)


    class TableOnlyContext(AlterTableDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.AlterTableDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)
        def qname(self):
            return self.getTypedRuleContext(SqlBaseParser.QnameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOnly" ):
                listener.enterTableOnly(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOnly" ):
                listener.exitTableOnly(self)



    def alterTableDefinition(self):

        localctx = SqlBaseParser.AlterTableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_alterTableDefinition)
        try:
            self.state = 2085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.TableOnlyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2082
                self.match(SqlBaseParser.ONLY)
                self.state = 2083
                self.qname()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.TableWithPartitionDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2084
                self.tableWithPartition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterSubscriptionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(SqlBaseParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(SqlBaseParser.DISABLE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_alterSubscriptionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSubscriptionMode" ):
                listener.enterAlterSubscriptionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSubscriptionMode" ):
                listener.exitAlterSubscriptionMode(self)




    def alterSubscriptionMode(self):

        localctx = SqlBaseParser.AlterSubscriptionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_alterSubscriptionMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2087
            _la = self._input.LA(1)
            if not(_la==258 or _la==259):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionedByOrClusteredIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionedBy(self):
            return self.getTypedRuleContext(SqlBaseParser.PartitionedByContext,0)


        def clusteredBy(self):
            return self.getTypedRuleContext(SqlBaseParser.ClusteredByContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionedByOrClusteredInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionedByOrClusteredInto" ):
                listener.enterPartitionedByOrClusteredInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionedByOrClusteredInto" ):
                listener.exitPartitionedByOrClusteredInto(self)




    def partitionedByOrClusteredInto(self):

        localctx = SqlBaseParser.PartitionedByOrClusteredIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_partitionedByOrClusteredInto)
        self._la = 0 # Token type
        try:
            self.state = 2101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==238:
                    self.state = 2089
                    self.partitionedBy()


                self.state = 2093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==219:
                    self.state = 2092
                    self.clusteredBy()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==219:
                    self.state = 2095
                    self.clusteredBy()


                self.state = 2099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==238:
                    self.state = 2098
                    self.partitionedBy()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionedByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def columns(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnsContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_partitionedBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionedBy" ):
                listener.enterPartitionedBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionedBy" ):
                listener.exitPartitionedBy(self)




    def partitionedBy(self):

        localctx = SqlBaseParser.PartitionedByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_partitionedBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2103
            self.match(SqlBaseParser.PARTITIONED)
            self.state = 2104
            self.match(SqlBaseParser.BY)
            self.state = 2105
            self.columns()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClusteredByContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.routing = None # PrimaryExpressionContext
            self.numShards = None # ParameterOrIntegerContext

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(SqlBaseParser.BY, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def SHARDS(self):
            return self.getToken(SqlBaseParser.SHARDS, 0)

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_clusteredBy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClusteredBy" ):
                listener.enterClusteredBy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClusteredBy" ):
                listener.exitClusteredBy(self)




    def clusteredBy(self):

        localctx = SqlBaseParser.ClusteredByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_clusteredBy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2107
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 2113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 2108
                self.match(SqlBaseParser.BY)
                self.state = 2109
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2110
                localctx.routing = self.primaryExpression(0)
                self.state = 2111
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


            self.state = 2119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==206:
                self.state = 2115
                self.match(SqlBaseParser.INTO)
                self.state = 2116
                localctx.numShards = self.parameterOrInteger()
                self.state = 2117
                self.match(SqlBaseParser.SHARDS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlobClusteredIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.numShards = None # ParameterOrIntegerContext

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def INTO(self):
            return self.getToken(SqlBaseParser.INTO, 0)

        def SHARDS(self):
            return self.getToken(SqlBaseParser.SHARDS, 0)

        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_blobClusteredInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlobClusteredInto" ):
                listener.enterBlobClusteredInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlobClusteredInto" ):
                listener.exitBlobClusteredInto(self)




    def blobClusteredInto(self):

        localctx = SqlBaseParser.BlobClusteredIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_blobClusteredInto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2121
            self.match(SqlBaseParser.CLUSTERED)
            self.state = 2122
            self.match(SqlBaseParser.INTO)
            self.state = 2123
            localctx.numShards = self.parameterOrInteger()
            self.state = 2124
            self.match(SqlBaseParser.SHARDS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PrimaryKeyConstraintTableLevelContext(TableElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryKeyContraint(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryKeyContraintContext,0)

        def columns(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyConstraintTableLevel" ):
                listener.enterPrimaryKeyConstraintTableLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyConstraintTableLevel" ):
                listener.exitPrimaryKeyConstraintTableLevel(self)


    class TableCheckConstraintContext(TableElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def checkConstraint(self):
            return self.getTypedRuleContext(SqlBaseParser.CheckConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableCheckConstraint" ):
                listener.enterTableCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableCheckConstraint" ):
                listener.exitTableCheckConstraint(self)


    class IndexDefinitionContext(TableElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableElementContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.method = None # IdentContext
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def columns(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnsContext,0)

        def ident(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IdentContext,i)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDefinition" ):
                listener.enterIndexDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDefinition" ):
                listener.exitIndexDefinition(self)


    class ColumnDefinitionDefaultContext(TableElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.TableElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def columnDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinitionDefault" ):
                listener.enterColumnDefinitionDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinitionDefault" ):
                listener.exitColumnDefinitionDefault(self)



    def tableElement(self):

        localctx = SqlBaseParser.TableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_tableElement)
        self._la = 0 # Token type
        try:
            self.state = 2139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ColumnDefinitionDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2126
                self.columnDefinition()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.PrimaryKeyConstraintTableLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2127
                self.primaryKeyContraint()
                self.state = 2128
                self.columns()
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.IndexDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2130
                self.match(SqlBaseParser.INDEX)
                self.state = 2131
                localctx.name = self.ident()
                self.state = 2132
                self.match(SqlBaseParser.USING)
                self.state = 2133
                localctx.method = self.ident()
                self.state = 2134
                self.columns()
                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 2135
                    self.withProperties()


                pass

            elif la_ == 4:
                localctx = SqlBaseParser.TableCheckConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2138
                self.checkConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = SqlBaseParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2141
            self.ident()
            self.state = 2143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 2142
                self.dataType(0)


            self.state = 2148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 545259552) != 0) or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & 54641329853956099) != 0) or _la==243:
                self.state = 2145
                self.columnConstraint()
                self.state = 2150
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(SqlBaseParser.ADD, 0)

        def subscriptSafe(self):
            return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,0)


        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_addColumnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddColumnDefinition" ):
                listener.enterAddColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddColumnDefinition" ):
                listener.exitAddColumnDefinition(self)




    def addColumnDefinition(self):

        localctx = SqlBaseParser.AddColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_addColumnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            self.match(SqlBaseParser.ADD)
            self.state = 2153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 2152
                self.match(SqlBaseParser.COLUMN)


            self.state = 2155
            self.subscriptSafe(0)
            self.state = 2157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.state = 2156
                self.dataType(0)


            self.state = 2162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 545259552) != 0) or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & 54641329853956099) != 0) or _la==243:
                self.state = 2159
                self.columnConstraint()
                self.state = 2164
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(SqlBaseParser.DROP, 0)

        def subscriptSafe(self):
            return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,0)


        def COLUMN(self):
            return self.getToken(SqlBaseParser.COLUMN, 0)

        def IF(self):
            return self.getToken(SqlBaseParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SqlBaseParser.EXISTS, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_dropColumnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropColumnDefinition" ):
                listener.enterDropColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropColumnDefinition" ):
                listener.exitDropColumnDefinition(self)




    def dropColumnDefinition(self):

        localctx = SqlBaseParser.DropColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_dropColumnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2165
            self.match(SqlBaseParser.DROP)
            self.state = 2167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==109:
                self.state = 2166
                self.match(SqlBaseParser.COLUMN)


            self.state = 2171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 2169
                self.match(SqlBaseParser.IF)
                self.state = 2170
                self.match(SqlBaseParser.EXISTS)


            self.state = 2173
            self.subscriptSafe(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RerouteOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_rerouteOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RerouteMoveShardContext(RerouteOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RerouteOptionContext
            super().__init__(parser)
            self.shardId = None # ParameterOrIntegerContext
            self.fromNodeId = None # ParameterOrStringContext
            self.toNodeId = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def MOVE(self):
            return self.getToken(SqlBaseParser.MOVE, 0)
        def SHARD(self):
            return self.getToken(SqlBaseParser.SHARD, 0)
        def FROM(self):
            return self.getToken(SqlBaseParser.FROM, 0)
        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)
        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)

        def parameterOrString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ParameterOrStringContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRerouteMoveShard" ):
                listener.enterRerouteMoveShard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRerouteMoveShard" ):
                listener.exitRerouteMoveShard(self)


    class RerouteAllocateReplicaShardContext(RerouteOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RerouteOptionContext
            super().__init__(parser)
            self.shardId = None # ParameterOrIntegerContext
            self.nodeId = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def ALLOCATE(self):
            return self.getToken(SqlBaseParser.ALLOCATE, 0)
        def REPLICA(self):
            return self.getToken(SqlBaseParser.REPLICA, 0)
        def SHARD(self):
            return self.getToken(SqlBaseParser.SHARD, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)

        def parameterOrString(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRerouteAllocateReplicaShard" ):
                listener.enterRerouteAllocateReplicaShard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRerouteAllocateReplicaShard" ):
                listener.exitRerouteAllocateReplicaShard(self)


    class ReroutePromoteReplicaContext(RerouteOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RerouteOptionContext
            super().__init__(parser)
            self.shardId = None # ParameterOrIntegerContext
            self.nodeId = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def PROMOTE(self):
            return self.getToken(SqlBaseParser.PROMOTE, 0)
        def REPLICA(self):
            return self.getToken(SqlBaseParser.REPLICA, 0)
        def SHARD(self):
            return self.getToken(SqlBaseParser.SHARD, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)

        def parameterOrString(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReroutePromoteReplica" ):
                listener.enterReroutePromoteReplica(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReroutePromoteReplica" ):
                listener.exitReroutePromoteReplica(self)


    class RerouteCancelShardContext(RerouteOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.RerouteOptionContext
            super().__init__(parser)
            self.shardId = None # ParameterOrIntegerContext
            self.nodeId = None # ParameterOrStringContext
            self.copyFrom(ctx)

        def CANCEL(self):
            return self.getToken(SqlBaseParser.CANCEL, 0)
        def SHARD(self):
            return self.getToken(SqlBaseParser.SHARD, 0)
        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)
        def parameterOrInteger(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrIntegerContext,0)

        def parameterOrString(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrStringContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRerouteCancelShard" ):
                listener.enterRerouteCancelShard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRerouteCancelShard" ):
                listener.exitRerouteCancelShard(self)



    def rerouteOption(self):

        localctx = SqlBaseParser.RerouteOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_rerouteOption)
        self._la = 0 # Token type
        try:
            self.state = 2207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [114]:
                localctx = SqlBaseParser.RerouteMoveShardContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2175
                self.match(SqlBaseParser.MOVE)
                self.state = 2176
                self.match(SqlBaseParser.SHARD)
                self.state = 2177
                localctx.shardId = self.parameterOrInteger()
                self.state = 2178
                self.match(SqlBaseParser.FROM)
                self.state = 2179
                localctx.fromNodeId = self.parameterOrString()
                self.state = 2180
                self.match(SqlBaseParser.TO)
                self.state = 2181
                localctx.toNodeId = self.parameterOrString()
                pass
            elif token in [116]:
                localctx = SqlBaseParser.RerouteAllocateReplicaShardContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2183
                self.match(SqlBaseParser.ALLOCATE)
                self.state = 2184
                self.match(SqlBaseParser.REPLICA)
                self.state = 2185
                self.match(SqlBaseParser.SHARD)
                self.state = 2186
                localctx.shardId = self.parameterOrInteger()
                self.state = 2187
                self.match(SqlBaseParser.ON)
                self.state = 2188
                localctx.nodeId = self.parameterOrString()
                pass
            elif token in [83]:
                localctx = SqlBaseParser.ReroutePromoteReplicaContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2190
                self.match(SqlBaseParser.PROMOTE)
                self.state = 2191
                self.match(SqlBaseParser.REPLICA)
                self.state = 2192
                self.match(SqlBaseParser.SHARD)
                self.state = 2193
                localctx.shardId = self.parameterOrInteger()
                self.state = 2194
                self.match(SqlBaseParser.ON)
                self.state = 2195
                localctx.nodeId = self.parameterOrString()
                self.state = 2197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 2196
                    self.withProperties()


                pass
            elif token in [118]:
                localctx = SqlBaseParser.RerouteCancelShardContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2199
                self.match(SqlBaseParser.CANCEL)
                self.state = 2200
                self.match(SqlBaseParser.SHARD)
                self.state = 2201
                localctx.shardId = self.parameterOrInteger()
                self.state = 2202
                self.match(SqlBaseParser.ON)
                self.state = 2203
                localctx.nodeId = self.parameterOrString()
                self.state = 2205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 2204
                    self.withProperties()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ObjectDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def objectTypeDefinition(self):
            return self.getTypedRuleContext(SqlBaseParser.ObjectTypeDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDataType" ):
                listener.enterObjectDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDataType" ):
                listener.exitObjectDataType(self)


    class MaybeParametrizedDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def baseDataType(self):
            return self.getTypedRuleContext(SqlBaseParser.BaseDataTypeContext,0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def integerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,i)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybeParametrizedDataType" ):
                listener.enterMaybeParametrizedDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybeParametrizedDataType" ):
                listener.exitMaybeParametrizedDataType(self)


    class ArrayDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self):
            return self.getToken(SqlBaseParser.ARRAY, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def dataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DataTypeContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)
        def EMPTY_SQUARE_BRACKET(self):
            return self.getToken(SqlBaseParser.EMPTY_SQUARE_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayDataType" ):
                listener.enterArrayDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayDataType" ):
                listener.exitArrayDataType(self)



    def dataType(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SqlBaseParser.DataTypeContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 186
        self.enterRecursionRule(localctx, 186, self.RULE_dataType, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313, 314, 315]:
                localctx = SqlBaseParser.MaybeParametrizedDataTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2210
                self.baseDataType()
                self.state = 2222
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                if la_ == 1:
                    self.state = 2211
                    self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                    self.state = 2212
                    self.integerLiteral()
                    self.state = 2217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==293:
                        self.state = 2213
                        self.match(SqlBaseParser.COMMA)
                        self.state = 2214
                        self.integerLiteral()
                        self.state = 2219
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2220
                    self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


                pass
            elif token in [135]:
                localctx = SqlBaseParser.ObjectDataTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2224
                self.objectTypeDefinition()
                pass
            elif token in [232]:
                localctx = SqlBaseParser.ArrayDataTypeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2225
                self.match(SqlBaseParser.ARRAY)
                self.state = 2226
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2227
                self.dataType(0)
                self.state = 2228
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2236
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,290,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = SqlBaseParser.ArrayDataTypeContext(self, SqlBaseParser.DataTypeContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dataType)
                    self.state = 2232
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2233
                    self.match(SqlBaseParser.EMPTY_SQUARE_BRACKET) 
                self.state = 2238
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,290,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BaseDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_baseDataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefinedDataTypeDefaultContext(BaseDataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BaseDataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def definedDataType(self):
            return self.getTypedRuleContext(SqlBaseParser.DefinedDataTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinedDataTypeDefault" ):
                listener.enterDefinedDataTypeDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinedDataTypeDefault" ):
                listener.exitDefinedDataTypeDefault(self)


    class IdentDataTypeContext(BaseDataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.BaseDataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentDataType" ):
                listener.enterIdentDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentDataType" ):
                listener.exitIdentDataType(self)



    def baseDataType(self):

        localctx = SqlBaseParser.BaseDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_baseDataType)
        try:
            self.state = 2241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.DefinedDataTypeDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2239
                self.definedDataType()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.IdentDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2240
                self.ident()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefinedDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def TIME(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.TIME)
            else:
                return self.getToken(SqlBaseParser.TIME, i)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)

        def CHARACTER(self):
            return self.getToken(SqlBaseParser.CHARACTER, 0)

        def VARYING(self):
            return self.getToken(SqlBaseParser.VARYING, 0)

        def CHAR_SPECIAL(self):
            return self.getToken(SqlBaseParser.CHAR_SPECIAL, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_definedDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefinedDataType" ):
                listener.enterDefinedDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefinedDataType" ):
                listener.exitDefinedDataType(self)




    def definedDataType(self):

        localctx = SqlBaseParser.DefinedDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_definedDataType)
        try:
            self.state = 2260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2243
                self.match(SqlBaseParser.DOUBLE)
                self.state = 2244
                self.match(SqlBaseParser.PRECISION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2245
                self.match(SqlBaseParser.TIMESTAMP)
                self.state = 2246
                self.match(SqlBaseParser.WITHOUT)
                self.state = 2247
                self.match(SqlBaseParser.TIME)
                self.state = 2248
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2249
                self.match(SqlBaseParser.TIMESTAMP)
                self.state = 2250
                self.match(SqlBaseParser.WITH)
                self.state = 2251
                self.match(SqlBaseParser.TIME)
                self.state = 2252
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2253
                self.match(SqlBaseParser.TIME)
                self.state = 2254
                self.match(SqlBaseParser.WITH)
                self.state = 2255
                self.match(SqlBaseParser.TIME)
                self.state = 2256
                self.match(SqlBaseParser.ZONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2257
                self.match(SqlBaseParser.CHARACTER)
                self.state = 2258
                self.match(SqlBaseParser.VARYING)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2259
                self.match(SqlBaseParser.CHAR_SPECIAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectTypeDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.type_ = None # Token

        def OBJECT(self):
            return self.getToken(SqlBaseParser.OBJECT, 0)

        def OPEN_ROUND_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.OPEN_ROUND_BRACKET)
            else:
                return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, i)

        def CLOSE_ROUND_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.CLOSE_ROUND_BRACKET)
            else:
                return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, i)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)

        def columnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ColumnDefinitionContext,i)


        def DYNAMIC(self):
            return self.getToken(SqlBaseParser.DYNAMIC, 0)

        def STRICT(self):
            return self.getToken(SqlBaseParser.STRICT, 0)

        def IGNORED(self):
            return self.getToken(SqlBaseParser.IGNORED, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_objectTypeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectTypeDefinition" ):
                listener.enterObjectTypeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectTypeDefinition" ):
                listener.exitObjectTypeDefinition(self)




    def objectTypeDefinition(self):

        localctx = SqlBaseParser.ObjectTypeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_objectTypeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2262
            self.match(SqlBaseParser.OBJECT)
            self.state = 2266
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 2263
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2264
                localctx.type_ = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 229)) & ~0x3f) == 0 and ((1 << (_la - 229)) & 7) != 0)):
                    localctx.type_ = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2265
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


            self.state = 2280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2268
                self.match(SqlBaseParser.AS)
                self.state = 2269
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2270
                self.columnDefinition()
                self.state = 2275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 2271
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2272
                    self.columnDefinition()
                    self.state = 2277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2278
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnConstraintPrimaryKeyContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryKeyContraint(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryKeyContraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnConstraintPrimaryKey" ):
                listener.enterColumnConstraintPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnConstraintPrimaryKey" ):
                listener.exitColumnConstraintPrimaryKey(self)


    class ColumnStorageDefinitionContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STORAGE(self):
            return self.getToken(SqlBaseParser.STORAGE, 0)
        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnStorageDefinition" ):
                listener.enterColumnStorageDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnStorageDefinition" ):
                listener.exitColumnStorageDefinition(self)


    class ColumnCheckConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def checkConstraint(self):
            return self.getTypedRuleContext(SqlBaseParser.CheckConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCheckConstraint" ):
                listener.enterColumnCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCheckConstraint" ):
                listener.exitColumnCheckConstraint(self)


    class ColumnConstraintNullContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnConstraintNull" ):
                listener.enterColumnConstraintNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnConstraintNull" ):
                listener.exitColumnConstraintNull(self)


    class ColumnIndexConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.method = None # IdentContext
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def USING(self):
            return self.getToken(SqlBaseParser.USING, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)

        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnIndexConstraint" ):
                listener.enterColumnIndexConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnIndexConstraint" ):
                listener.exitColumnIndexConstraint(self)


    class ColumnDefaultConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.defaultExpr = None # ExprContext
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(SqlBaseParser.DEFAULT, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefaultConstraint" ):
                listener.enterColumnDefaultConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefaultConstraint" ):
                listener.exitColumnDefaultConstraint(self)


    class ColumnGeneratedConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.name = None # IdentContext
            self.generatedExpr = None # ExprContext
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(SqlBaseParser.AS, 0)
        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)

        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)
        def GENERATED(self):
            return self.getToken(SqlBaseParser.GENERATED, 0)
        def ALWAYS(self):
            return self.getToken(SqlBaseParser.ALWAYS, 0)
        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnGeneratedConstraint" ):
                listener.enterColumnGeneratedConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnGeneratedConstraint" ):
                listener.exitColumnGeneratedConstraint(self)


    class ColumnIndexOffContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(SqlBaseParser.INDEX, 0)
        def OFF(self):
            return self.getToken(SqlBaseParser.OFF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnIndexOff" ):
                listener.enterColumnIndexOff(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnIndexOff" ):
                listener.exitColumnIndexOff(self)


    class ColumnConstraintNotNullContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)
        def NULL(self):
            return self.getToken(SqlBaseParser.NULL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnConstraintNotNull" ):
                listener.enterColumnConstraintNotNull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnConstraintNotNull" ):
                listener.exitColumnConstraintNotNull(self)



    def columnConstraint(self):

        localctx = SqlBaseParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 2313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
            if la_ == 1:
                localctx = SqlBaseParser.ColumnConstraintPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2282
                self.primaryKeyContraint()
                pass

            elif la_ == 2:
                localctx = SqlBaseParser.ColumnConstraintNotNullContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2283
                self.match(SqlBaseParser.NOT)
                self.state = 2284
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 3:
                localctx = SqlBaseParser.ColumnConstraintNullContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2285
                self.match(SqlBaseParser.NULL)
                pass

            elif la_ == 4:
                localctx = SqlBaseParser.ColumnIndexConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2286
                self.match(SqlBaseParser.INDEX)
                self.state = 2287
                self.match(SqlBaseParser.USING)
                self.state = 2288
                localctx.method = self.ident()
                self.state = 2290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==91:
                    self.state = 2289
                    self.withProperties()


                pass

            elif la_ == 5:
                localctx = SqlBaseParser.ColumnIndexOffContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2292
                self.match(SqlBaseParser.INDEX)
                self.state = 2293
                self.match(SqlBaseParser.OFF)
                pass

            elif la_ == 6:
                localctx = SqlBaseParser.ColumnStorageDefinitionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2294
                self.match(SqlBaseParser.STORAGE)
                self.state = 2295
                self.withProperties()
                pass

            elif la_ == 7:
                localctx = SqlBaseParser.ColumnDefaultConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 2296
                    self.match(SqlBaseParser.CONSTRAINT)
                    self.state = 2297
                    localctx.name = self.ident()


                self.state = 2300
                self.match(SqlBaseParser.DEFAULT)
                self.state = 2301
                localctx.defaultExpr = self.expr()
                pass

            elif la_ == 8:
                localctx = SqlBaseParser.ColumnGeneratedConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 2302
                    self.match(SqlBaseParser.CONSTRAINT)
                    self.state = 2303
                    localctx.name = self.ident()


                self.state = 2308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243:
                    self.state = 2306
                    self.match(SqlBaseParser.GENERATED)
                    self.state = 2307
                    self.match(SqlBaseParser.ALWAYS)


                self.state = 2310
                self.match(SqlBaseParser.AS)
                self.state = 2311
                localctx.generatedExpr = self.expr()
                pass

            elif la_ == 9:
                localctx = SqlBaseParser.ColumnCheckConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2312
                self.checkConstraint()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryKeyContraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext

        def PRIMARY_KEY(self):
            return self.getToken(SqlBaseParser.PRIMARY_KEY, 0)

        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_primaryKeyContraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyContraint" ):
                listener.enterPrimaryKeyContraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyContraint" ):
                listener.exitPrimaryKeyContraint(self)




    def primaryKeyContraint(self):

        localctx = SqlBaseParser.PrimaryKeyContraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_primaryKeyContraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 2315
                self.match(SqlBaseParser.CONSTRAINT)
                self.state = 2316
                localctx.name = self.ident()


            self.state = 2319
            self.match(SqlBaseParser.PRIMARY_KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # IdentContext
            self.expression = None # BooleanExpressionContext

        def CHECK(self):
            return self.getToken(SqlBaseParser.CHECK, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanExpressionContext,0)


        def CONSTRAINT(self):
            return self.getToken(SqlBaseParser.CONSTRAINT, 0)

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_checkConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckConstraint" ):
                listener.enterCheckConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckConstraint" ):
                listener.exitCheckConstraint(self)




    def checkConstraint(self):

        localctx = SqlBaseParser.CheckConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_checkConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==172:
                self.state = 2321
                self.match(SqlBaseParser.CONSTRAINT)
                self.state = 2322
                localctx.name = self.ident()


            self.state = 2325
            self.match(SqlBaseParser.CHECK)
            self.state = 2326
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 2327
            localctx.expression = self.booleanExpression(0)
            self.state = 2328
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SqlBaseParser.RULE_withProperties

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithGenericPropertiesContext(WithPropertiesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SqlBaseParser.WithPropertiesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(SqlBaseParser.WITH, 0)
        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)
        def genericProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.GenericPropertiesContext,0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithGenericProperties" ):
                listener.enterWithGenericProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithGenericProperties" ):
                listener.exitWithGenericProperties(self)



    def withProperties(self):

        localctx = SqlBaseParser.WithPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_withProperties)
        try:
            localctx = SqlBaseParser.WithGenericPropertiesContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 2330
            self.match(SqlBaseParser.WITH)
            self.state = 2331
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 2332
            self.genericProperties()
            self.state = 2333
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.GenericPropertyContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.GenericPropertyContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_genericProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericProperties" ):
                listener.enterGenericProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericProperties" ):
                listener.exitGenericProperties(self)




    def genericProperties(self):

        localctx = SqlBaseParser.GenericPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_genericProperties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2335
            self.genericProperty()
            self.state = 2340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 2336
                self.match(SqlBaseParser.COMMA)
                self.state = 2337
                self.genericProperty()
                self.state = 2342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericPropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_genericProperty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericProperty" ):
                listener.enterGenericProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericProperty" ):
                listener.exitGenericProperty(self)




    def genericProperty(self):

        localctx = SqlBaseParser.GenericPropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_genericProperty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2343
            self.ident()
            self.state = 2344
            self.match(SqlBaseParser.EQ)
            self.state = 2345
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def explainOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.ExplainOptionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.ExplainOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_explainOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainOptions" ):
                listener.enterExplainOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainOptions" ):
                listener.exitExplainOptions(self)




    def explainOptions(self):

        localctx = SqlBaseParser.ExplainOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_explainOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2347
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)

            self.state = 2348
            self.explainOption()
            self.state = 2353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 2349
                self.match(SqlBaseParser.COMMA)
                self.state = 2350
                self.explainOption()
                self.state = 2355
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2356
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplainOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def COSTS(self):
            return self.getToken(SqlBaseParser.COSTS, 0)

        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)

        def booleanLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_explainOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplainOption" ):
                listener.enterExplainOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplainOption" ):
                listener.exitExplainOption(self)




    def explainOption(self):

        localctx = SqlBaseParser.ExplainOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_explainOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            _la = self._input.LA(1)
            if not(((((_la - 164)) & ~0x3f) == 0 and ((1 << (_la - 164)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==30 or _la==31:
                self.state = 2359
                self.booleanLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPredicateIdentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchPred = None # MatchPredicateIdentContext

        def matchPredicateIdent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.MatchPredicateIdentContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.MatchPredicateIdentContext,i)


        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchPredicateIdents

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPredicateIdents" ):
                listener.enterMatchPredicateIdents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPredicateIdents" ):
                listener.exitMatchPredicateIdents(self)




    def matchPredicateIdents(self):

        localctx = SqlBaseParser.MatchPredicateIdentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_matchPredicateIdents)
        self._la = 0 # Token type
        try:
            self.state = 2374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313, 314, 315]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2362
                localctx.matchPred = self.matchPredicateIdent()
                pass
            elif token in [295]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2363
                self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
                self.state = 2364
                self.matchPredicateIdent()
                self.state = 2369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==293:
                    self.state = 2365
                    self.match(SqlBaseParser.COMMA)
                    self.state = 2366
                    self.matchPredicateIdent()
                    self.state = 2371
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2372
                self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchPredicateIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boost = None # ParameterOrSimpleLiteralContext

        def subscriptSafe(self):
            return self.getTypedRuleContext(SqlBaseParser.SubscriptSafeContext,0)


        def parameterOrSimpleLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.ParameterOrSimpleLiteralContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_matchPredicateIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatchPredicateIdent" ):
                listener.enterMatchPredicateIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatchPredicateIdent" ):
                listener.exitMatchPredicateIdent(self)




    def matchPredicateIdent(self):

        localctx = SqlBaseParser.MatchPredicateIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_matchPredicateIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2376
            self.subscriptSafe(0)
            self.state = 2378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 29)) & ~0x3f) == 0 and ((1 << (_la - 29)) & 1099511627783) != 0) or ((((_la - 302)) & ~0x3f) == 0 and ((1 << (_la - 302)) & 17379) != 0):
                self.state = 2377
                localctx.boost = self.parameterOrSimpleLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzerElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokenizer(self):
            return self.getTypedRuleContext(SqlBaseParser.TokenizerContext,0)


        def tokenFilters(self):
            return self.getTypedRuleContext(SqlBaseParser.TokenFiltersContext,0)


        def charFilters(self):
            return self.getTypedRuleContext(SqlBaseParser.CharFiltersContext,0)


        def genericProperty(self):
            return self.getTypedRuleContext(SqlBaseParser.GenericPropertyContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_analyzerElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzerElement" ):
                listener.enterAnalyzerElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzerElement" ):
                listener.exitAnalyzerElement(self)




    def analyzerElement(self):

        localctx = SqlBaseParser.AnalyzerElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_analyzerElement)
        try:
            self.state = 2384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2380
                self.tokenizer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2381
                self.tokenFilters()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2382
                self.charFilters()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2383
                self.genericProperty()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokenizerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOKENIZER(self):
            return self.getToken(SqlBaseParser.TOKENIZER, 0)

        def namedProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.NamedPropertiesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_tokenizer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokenizer" ):
                listener.enterTokenizer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokenizer" ):
                listener.exitTokenizer(self)




    def tokenizer(self):

        localctx = SqlBaseParser.TokenizerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_tokenizer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2386
            self.match(SqlBaseParser.TOKENIZER)
            self.state = 2387
            self.namedProperties()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokenFiltersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOKEN_FILTERS(self):
            return self.getToken(SqlBaseParser.TOKEN_FILTERS, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def namedProperties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedPropertiesContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedPropertiesContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tokenFilters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokenFilters" ):
                listener.enterTokenFilters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokenFilters" ):
                listener.exitTokenFilters(self)




    def tokenFilters(self):

        localctx = SqlBaseParser.TokenFiltersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_tokenFilters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2389
            self.match(SqlBaseParser.TOKEN_FILTERS)
            self.state = 2390
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 2391
            self.namedProperties()
            self.state = 2396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 2392
                self.match(SqlBaseParser.COMMA)
                self.state = 2393
                self.namedProperties()
                self.state = 2398
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2399
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharFiltersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHAR_FILTERS(self):
            return self.getToken(SqlBaseParser.CHAR_FILTERS, 0)

        def OPEN_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.OPEN_ROUND_BRACKET, 0)

        def namedProperties(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.NamedPropertiesContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.NamedPropertiesContext,i)


        def CLOSE_ROUND_BRACKET(self):
            return self.getToken(SqlBaseParser.CLOSE_ROUND_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_charFilters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharFilters" ):
                listener.enterCharFilters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharFilters" ):
                listener.exitCharFilters(self)




    def charFilters(self):

        localctx = SqlBaseParser.CharFiltersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_charFilters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401
            self.match(SqlBaseParser.CHAR_FILTERS)
            self.state = 2402
            self.match(SqlBaseParser.OPEN_ROUND_BRACKET)
            self.state = 2403
            self.namedProperties()
            self.state = 2408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 2404
                self.match(SqlBaseParser.COMMA)
                self.state = 2405
                self.namedProperties()
                self.state = 2410
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2411
            self.match(SqlBaseParser.CLOSE_ROUND_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedPropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def withProperties(self):
            return self.getTypedRuleContext(SqlBaseParser.WithPropertiesContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_namedProperties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedProperties" ):
                listener.enterNamedProperties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedProperties" ):
                listener.exitNamedProperties(self)




    def namedProperties(self):

        localctx = SqlBaseParser.NamedPropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_namedProperties)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2413
            self.ident()
            self.state = 2415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 2414
                self.withProperties()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableWithPartitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableWithPartition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SqlBaseParser.TableWithPartitionContext)
            else:
                return self.getTypedRuleContext(SqlBaseParser.TableWithPartitionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.COMMA)
            else:
                return self.getToken(SqlBaseParser.COMMA, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_tableWithPartitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableWithPartitions" ):
                listener.enterTableWithPartitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableWithPartitions" ):
                listener.exitTableWithPartitions(self)




    def tableWithPartitions(self):

        localctx = SqlBaseParser.TableWithPartitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_tableWithPartitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2417
            self.tableWithPartition()
            self.state = 2422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==293:
                self.state = 2418
                self.match(SqlBaseParser.COMMA)
                self.state = 2419
                self.tableWithPartition()
                self.state = 2424
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetGlobalAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # PrimaryExpressionContext
            self.value = None # ExprContext

        def primaryExpression(self):
            return self.getTypedRuleContext(SqlBaseParser.PrimaryExpressionContext,0)


        def EQ(self):
            return self.getToken(SqlBaseParser.EQ, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def expr(self):
            return self.getTypedRuleContext(SqlBaseParser.ExprContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_setGlobalAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetGlobalAssignment" ):
                listener.enterSetGlobalAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetGlobalAssignment" ):
                listener.exitSetGlobalAssignment(self)




    def setGlobalAssignment(self):

        localctx = SqlBaseParser.SetGlobalAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_setGlobalAssignment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2425
            localctx.name = self.primaryExpression(0)
            self.state = 2426
            _la = self._input.LA(1)
            if not(_la==4 or _la==273):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2427
            localctx.value = self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.StringLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.BooleanLiteralContext,0)


        def numericLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.NumericLiteralContext,0)


        def ident(self):
            return self.getTypedRuleContext(SqlBaseParser.IdentContext,0)


        def on(self):
            return self.getTypedRuleContext(SqlBaseParser.OnContext,0)


        def getRuleIndex(self):
            return SqlBaseParser.RULE_setExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetExpr" ):
                listener.enterSetExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetExpr" ):
                listener.exitSetExpr(self)




    def setExpr(self):

        localctx = SqlBaseParser.SetExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_setExpr)
        try:
            self.state = 2434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [307, 316]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2429
                self.stringLiteral()
                pass
            elif token in [30, 31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2430
                self.booleanLiteral()
                pass
            elif token in [310, 311]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2431
                self.numericLiteral()
                pass
            elif token in [1, 4, 6, 10, 27, 32, 33, 35, 38, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 69, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 201, 202, 203, 207, 210, 211, 212, 213, 214, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 243, 244, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 312, 313, 314, 315]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2432
                self.ident()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2433
                self.on()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SqlBaseParser.ON, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_on

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn" ):
                listener.enterOn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn" ):
                listener.exitOn(self)




    def on(self):

        localctx = SqlBaseParser.OnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_on)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2436
            self.match(SqlBaseParser.ON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SecurableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def TABLE(self):
            return self.getToken(SqlBaseParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_securable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurable" ):
                listener.enterSecurable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurable" ):
                listener.exitSecurable(self)




    def securable(self):

        localctx = SqlBaseParser.SecurableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_securable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2438
            _la = self._input.LA(1)
            if not(_la==96 or _la==192 or _la==251):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)

        def isolationLevel(self):
            return self.getTypedRuleContext(SqlBaseParser.IsolationLevelContext,0)


        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def DEFERRABLE(self):
            return self.getToken(SqlBaseParser.DEFERRABLE, 0)

        def NOT(self):
            return self.getToken(SqlBaseParser.NOT, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_transactionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionMode" ):
                listener.enterTransactionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionMode" ):
                listener.exitTransactionMode(self)




    def transactionMode(self):

        localctx = SqlBaseParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_transactionMode)
        self._la = 0 # Token type
        try:
            self.state = 2453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [149]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2440
                self.match(SqlBaseParser.ISOLATION)
                self.state = 2441
                self.match(SqlBaseParser.LEVEL)
                self.state = 2442
                self.isolationLevel()
                pass
            elif token in [155]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
                if la_ == 1:
                    self.state = 2443
                    self.match(SqlBaseParser.READ)
                    self.state = 2444
                    self.match(SqlBaseParser.WRITE)
                    pass

                elif la_ == 2:
                    self.state = 2445
                    self.match(SqlBaseParser.READ)
                    self.state = 2446
                    self.match(SqlBaseParser.ONLY)
                    pass


                pass
            elif token in [23, 157]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==23:
                    self.state = 2449
                    self.match(SqlBaseParser.NOT)


                self.state = 2452
                self.match(SqlBaseParser.DEFERRABLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsolationLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_isolationLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsolationLevel" ):
                listener.enterIsolationLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsolationLevel" ):
                listener.exitIsolationLevel(self)




    def isolationLevel(self):

        localctx = SqlBaseParser.IsolationLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_isolationLevel)
        try:
            self.state = 2462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2455
                self.match(SqlBaseParser.SERIALIZABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2456
                self.match(SqlBaseParser.REPEATABLE)
                self.state = 2457
                self.match(SqlBaseParser.READ)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2458
                self.match(SqlBaseParser.READ)
                self.state = 2459
                self.match(SqlBaseParser.COMMITTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2460
                self.match(SqlBaseParser.READ)
                self.state = 2461
                self.match(SqlBaseParser.UNCOMMITTED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(SqlBaseParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(SqlBaseParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SqlBaseParser.LAST, 0)

        def ABSOLUTE(self):
            return self.getToken(SqlBaseParser.ABSOLUTE, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(SqlBaseParser.IntegerLiteralContext,0)


        def RELATIVE(self):
            return self.getToken(SqlBaseParser.RELATIVE, 0)

        def MINUS(self):
            return self.getToken(SqlBaseParser.MINUS, 0)

        def ALL(self):
            return self.getToken(SqlBaseParser.ALL, 0)

        def FORWARD(self):
            return self.getToken(SqlBaseParser.FORWARD, 0)

        def BACKWARD(self):
            return self.getToken(SqlBaseParser.BACKWARD, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_direction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirection" ):
                listener.enterDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirection" ):
                listener.exitDirection(self)




    def direction(self):

        localctx = SqlBaseParser.DirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_direction)
        self._la = 0 # Token type
        try:
            self.state = 2487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2464
                self.match(SqlBaseParser.NEXT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2465
                self.match(SqlBaseParser.PRIOR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2466
                self.match(SqlBaseParser.FIRST)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2467
                self.match(SqlBaseParser.LAST)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2468
                self.match(SqlBaseParser.ABSOLUTE)
                self.state = 2469
                self.integerLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2470
                self.match(SqlBaseParser.RELATIVE)
                self.state = 2472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==285:
                    self.state = 2471
                    self.match(SqlBaseParser.MINUS)


                self.state = 2474
                self.integerLiteral()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2475
                self.integerLiteral()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2476
                self.match(SqlBaseParser.ALL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2477
                self.match(SqlBaseParser.FORWARD)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2478
                self.match(SqlBaseParser.FORWARD)
                self.state = 2479
                self.integerLiteral()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2480
                self.match(SqlBaseParser.FORWARD)
                self.state = 2481
                self.match(SqlBaseParser.ALL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2482
                self.match(SqlBaseParser.BACKWARD)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2483
                self.match(SqlBaseParser.BACKWARD)
                self.state = 2484
                self.integerLiteral()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2485
                self.match(SqlBaseParser.BACKWARD)
                self.state = 2486
                self.match(SqlBaseParser.ALL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareCursorParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASENSITIVE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.ASENSITIVE)
            else:
                return self.getToken(SqlBaseParser.ASENSITIVE, i)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.BINARY)
            else:
                return self.getToken(SqlBaseParser.BINARY, i)

        def INSENSITIVE(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.INSENSITIVE)
            else:
                return self.getToken(SqlBaseParser.INSENSITIVE, i)

        def SCROLL(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.SCROLL)
            else:
                return self.getToken(SqlBaseParser.SCROLL, i)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(SqlBaseParser.NO)
            else:
                return self.getToken(SqlBaseParser.NO, i)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_declareCursorParams

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCursorParams" ):
                listener.enterDeclareCursorParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCursorParams" ):
                listener.exitDeclareCursorParams(self)




    def declareCursorParams(self):

        localctx = SqlBaseParser.DeclareCursorParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_declareCursorParams)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & 31) != 0):
                self.state = 2496
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [262]:
                    self.state = 2489
                    self.match(SqlBaseParser.ASENSITIVE)
                    pass
                elif token in [264]:
                    self.state = 2490
                    self.match(SqlBaseParser.BINARY)
                    pass
                elif token in [263]:
                    self.state = 2491
                    self.match(SqlBaseParser.INSENSITIVE)
                    pass
                elif token in [265, 266]:
                    self.state = 2493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==265:
                        self.state = 2492
                        self.match(SqlBaseParser.NO)


                    self.state = 2495
                    self.match(SqlBaseParser.SCROLL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSOLUTE(self):
            return self.getToken(SqlBaseParser.ABSOLUTE, 0)

        def ALIAS(self):
            return self.getToken(SqlBaseParser.ALIAS, 0)

        def ALLOCATE(self):
            return self.getToken(SqlBaseParser.ALLOCATE, 0)

        def ALWAYS(self):
            return self.getToken(SqlBaseParser.ALWAYS, 0)

        def ANALYZE(self):
            return self.getToken(SqlBaseParser.ANALYZE, 0)

        def ANALYZER(self):
            return self.getToken(SqlBaseParser.ANALYZER, 0)

        def ARTIFACTS(self):
            return self.getToken(SqlBaseParser.ARTIFACTS, 0)

        def ASENSITIVE(self):
            return self.getToken(SqlBaseParser.ASENSITIVE, 0)

        def AT(self):
            return self.getToken(SqlBaseParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(SqlBaseParser.AUTHORIZATION, 0)

        def BACKWARD(self):
            return self.getToken(SqlBaseParser.BACKWARD, 0)

        def BEGIN(self):
            return self.getToken(SqlBaseParser.BEGIN, 0)

        def BERNOULLI(self):
            return self.getToken(SqlBaseParser.BERNOULLI, 0)

        def BINARY(self):
            return self.getToken(SqlBaseParser.BINARY, 0)

        def BLOB(self):
            return self.getToken(SqlBaseParser.BLOB, 0)

        def BOOLEAN(self):
            return self.getToken(SqlBaseParser.BOOLEAN, 0)

        def BOTH(self):
            return self.getToken(SqlBaseParser.BOTH, 0)

        def BYTE(self):
            return self.getToken(SqlBaseParser.BYTE, 0)

        def CANCEL(self):
            return self.getToken(SqlBaseParser.CANCEL, 0)

        def CATALOGS(self):
            return self.getToken(SqlBaseParser.CATALOGS, 0)

        def CHARACTER(self):
            return self.getToken(SqlBaseParser.CHARACTER, 0)

        def CHARACTERISTICS(self):
            return self.getToken(SqlBaseParser.CHARACTERISTICS, 0)

        def CHAR_FILTERS(self):
            return self.getToken(SqlBaseParser.CHAR_FILTERS, 0)

        def CHECK(self):
            return self.getToken(SqlBaseParser.CHECK, 0)

        def CLOSE(self):
            return self.getToken(SqlBaseParser.CLOSE, 0)

        def CLUSTER(self):
            return self.getToken(SqlBaseParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(SqlBaseParser.CLUSTERED, 0)

        def COLUMNS(self):
            return self.getToken(SqlBaseParser.COLUMNS, 0)

        def COMMIT(self):
            return self.getToken(SqlBaseParser.COMMIT, 0)

        def COMMITTED(self):
            return self.getToken(SqlBaseParser.COMMITTED, 0)

        def CONFLICT(self):
            return self.getToken(SqlBaseParser.CONFLICT, 0)

        def CONNECTION(self):
            return self.getToken(SqlBaseParser.CONNECTION, 0)

        def COPY(self):
            return self.getToken(SqlBaseParser.COPY, 0)

        def CURRENT(self):
            return self.getToken(SqlBaseParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(SqlBaseParser.CURRENT_DATE, 0)

        def CURRENT_SCHEMA(self):
            return self.getToken(SqlBaseParser.CURRENT_SCHEMA, 0)

        def CURRENT_TIME(self):
            return self.getToken(SqlBaseParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0)

        def CURSOR(self):
            return self.getToken(SqlBaseParser.CURSOR, 0)

        def DANGLING(self):
            return self.getToken(SqlBaseParser.DANGLING, 0)

        def DAY(self):
            return self.getToken(SqlBaseParser.DAY, 0)

        def DEALLOCATE(self):
            return self.getToken(SqlBaseParser.DEALLOCATE, 0)

        def DECLARE(self):
            return self.getToken(SqlBaseParser.DECLARE, 0)

        def DECOMMISSION(self):
            return self.getToken(SqlBaseParser.DECOMMISSION, 0)

        def DEFERRABLE(self):
            return self.getToken(SqlBaseParser.DEFERRABLE, 0)

        def DISABLE(self):
            return self.getToken(SqlBaseParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(SqlBaseParser.DISCARD, 0)

        def DISTRIBUTED(self):
            return self.getToken(SqlBaseParser.DISTRIBUTED, 0)

        def DO(self):
            return self.getToken(SqlBaseParser.DO, 0)

        def DOUBLE(self):
            return self.getToken(SqlBaseParser.DOUBLE, 0)

        def DUPLICATE(self):
            return self.getToken(SqlBaseParser.DUPLICATE, 0)

        def DYNAMIC(self):
            return self.getToken(SqlBaseParser.DYNAMIC, 0)

        def ENABLE(self):
            return self.getToken(SqlBaseParser.ENABLE, 0)

        def EXPLAIN(self):
            return self.getToken(SqlBaseParser.EXPLAIN, 0)

        def EXTENDS(self):
            return self.getToken(SqlBaseParser.EXTENDS, 0)

        def FAILED(self):
            return self.getToken(SqlBaseParser.FAILED, 0)

        def FETCH(self):
            return self.getToken(SqlBaseParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(SqlBaseParser.FILTER, 0)

        def FLOAT(self):
            return self.getToken(SqlBaseParser.FLOAT, 0)

        def FOLLOWING(self):
            return self.getToken(SqlBaseParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(SqlBaseParser.FORMAT, 0)

        def FORWARD(self):
            return self.getToken(SqlBaseParser.FORWARD, 0)

        def FULLTEXT(self):
            return self.getToken(SqlBaseParser.FULLTEXT, 0)

        def FUNCTIONS(self):
            return self.getToken(SqlBaseParser.FUNCTIONS, 0)

        def GC(self):
            return self.getToken(SqlBaseParser.GC, 0)

        def GENERATED(self):
            return self.getToken(SqlBaseParser.GENERATED, 0)

        def GEO_POINT(self):
            return self.getToken(SqlBaseParser.GEO_POINT, 0)

        def GEO_SHAPE(self):
            return self.getToken(SqlBaseParser.GEO_SHAPE, 0)

        def GLOBAL(self):
            return self.getToken(SqlBaseParser.GLOBAL, 0)

        def GRAPHVIZ(self):
            return self.getToken(SqlBaseParser.GRAPHVIZ, 0)

        def HOLD(self):
            return self.getToken(SqlBaseParser.HOLD, 0)

        def HOUR(self):
            return self.getToken(SqlBaseParser.HOUR, 0)

        def IGNORE(self):
            return self.getToken(SqlBaseParser.IGNORE, 0)

        def IGNORED(self):
            return self.getToken(SqlBaseParser.IGNORED, 0)

        def ILIKE(self):
            return self.getToken(SqlBaseParser.ILIKE, 0)

        def INSENSITIVE(self):
            return self.getToken(SqlBaseParser.INSENSITIVE, 0)

        def INT(self):
            return self.getToken(SqlBaseParser.INT, 0)

        def INTEGER(self):
            return self.getToken(SqlBaseParser.INTEGER, 0)

        def INTERVAL(self):
            return self.getToken(SqlBaseParser.INTERVAL, 0)

        def IP(self):
            return self.getToken(SqlBaseParser.IP, 0)

        def ISOLATION(self):
            return self.getToken(SqlBaseParser.ISOLATION, 0)

        def KEY(self):
            return self.getToken(SqlBaseParser.KEY, 0)

        def KILL(self):
            return self.getToken(SqlBaseParser.KILL, 0)

        def LANGUAGE(self):
            return self.getToken(SqlBaseParser.LANGUAGE, 0)

        def LEADING(self):
            return self.getToken(SqlBaseParser.LEADING, 0)

        def LEVEL(self):
            return self.getToken(SqlBaseParser.LEVEL, 0)

        def LOCAL(self):
            return self.getToken(SqlBaseParser.LOCAL, 0)

        def LOGICAL(self):
            return self.getToken(SqlBaseParser.LOGICAL, 0)

        def LONG(self):
            return self.getToken(SqlBaseParser.LONG, 0)

        def MATERIALIZED(self):
            return self.getToken(SqlBaseParser.MATERIALIZED, 0)

        def METADATA(self):
            return self.getToken(SqlBaseParser.METADATA, 0)

        def MINUTE(self):
            return self.getToken(SqlBaseParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(SqlBaseParser.MONTH, 0)

        def MOVE(self):
            return self.getToken(SqlBaseParser.MOVE, 0)

        def NEXT(self):
            return self.getToken(SqlBaseParser.NEXT, 0)

        def NO(self):
            return self.getToken(SqlBaseParser.NO, 0)

        def NOTHING(self):
            return self.getToken(SqlBaseParser.NOTHING, 0)

        def OFF(self):
            return self.getToken(SqlBaseParser.OFF, 0)

        def ONLY(self):
            return self.getToken(SqlBaseParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(SqlBaseParser.OPEN, 0)

        def OPTIMIZE(self):
            return self.getToken(SqlBaseParser.OPTIMIZE, 0)

        def OVER(self):
            return self.getToken(SqlBaseParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SqlBaseParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(SqlBaseParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(SqlBaseParser.PARTITIONS, 0)

        def PLAIN(self):
            return self.getToken(SqlBaseParser.PLAIN, 0)

        def PLANS(self):
            return self.getToken(SqlBaseParser.PLANS, 0)

        def PRECEDING(self):
            return self.getToken(SqlBaseParser.PRECEDING, 0)

        def PRECISION(self):
            return self.getToken(SqlBaseParser.PRECISION, 0)

        def PREPARE(self):
            return self.getToken(SqlBaseParser.PREPARE, 0)

        def PRIOR(self):
            return self.getToken(SqlBaseParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(SqlBaseParser.PRIVILEGES, 0)

        def PROMOTE(self):
            return self.getToken(SqlBaseParser.PROMOTE, 0)

        def PUBLICATION(self):
            return self.getToken(SqlBaseParser.PUBLICATION, 0)

        def RANGE(self):
            return self.getToken(SqlBaseParser.RANGE, 0)

        def READ(self):
            return self.getToken(SqlBaseParser.READ, 0)

        def REFRESH(self):
            return self.getToken(SqlBaseParser.REFRESH, 0)

        def RELATIVE(self):
            return self.getToken(SqlBaseParser.RELATIVE, 0)

        def RENAME(self):
            return self.getToken(SqlBaseParser.RENAME, 0)

        def REPEATABLE(self):
            return self.getToken(SqlBaseParser.REPEATABLE, 0)

        def REPLACE(self):
            return self.getToken(SqlBaseParser.REPLACE, 0)

        def REPLICA(self):
            return self.getToken(SqlBaseParser.REPLICA, 0)

        def REPOSITORY(self):
            return self.getToken(SqlBaseParser.REPOSITORY, 0)

        def REROUTE(self):
            return self.getToken(SqlBaseParser.REROUTE, 0)

        def RESPECT(self):
            return self.getToken(SqlBaseParser.RESPECT, 0)

        def RESTORE(self):
            return self.getToken(SqlBaseParser.RESTORE, 0)

        def RETRY(self):
            return self.getToken(SqlBaseParser.RETRY, 0)

        def RETURN(self):
            return self.getToken(SqlBaseParser.RETURN, 0)

        def RETURNING(self):
            return self.getToken(SqlBaseParser.RETURNING, 0)

        def ROLE(self):
            return self.getToken(SqlBaseParser.ROLE, 0)

        def ROW(self):
            return self.getToken(SqlBaseParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SqlBaseParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(SqlBaseParser.SCHEMA, 0)

        def SCHEMAS(self):
            return self.getToken(SqlBaseParser.SCHEMAS, 0)

        def SCROLL(self):
            return self.getToken(SqlBaseParser.SCROLL, 0)

        def SECOND(self):
            return self.getToken(SqlBaseParser.SECOND, 0)

        def SEQUENCES(self):
            return self.getToken(SqlBaseParser.SEQUENCES, 0)

        def SERIALIZABLE(self):
            return self.getToken(SqlBaseParser.SERIALIZABLE, 0)

        def SESSION(self):
            return self.getToken(SqlBaseParser.SESSION, 0)

        def SHARD(self):
            return self.getToken(SqlBaseParser.SHARD, 0)

        def SHARDS(self):
            return self.getToken(SqlBaseParser.SHARDS, 0)

        def SHORT(self):
            return self.getToken(SqlBaseParser.SHORT, 0)

        def SHOW(self):
            return self.getToken(SqlBaseParser.SHOW, 0)

        def SNAPSHOT(self):
            return self.getToken(SqlBaseParser.SNAPSHOT, 0)

        def START(self):
            return self.getToken(SqlBaseParser.START, 0)

        def STORAGE(self):
            return self.getToken(SqlBaseParser.STORAGE, 0)

        def STRICT(self):
            return self.getToken(SqlBaseParser.STRICT, 0)

        def STRING_TYPE(self):
            return self.getToken(SqlBaseParser.STRING_TYPE, 0)

        def SUBSCRIPTION(self):
            return self.getToken(SqlBaseParser.SUBSCRIPTION, 0)

        def SUBSTRING(self):
            return self.getToken(SqlBaseParser.SUBSTRING, 0)

        def SUMMARY(self):
            return self.getToken(SqlBaseParser.SUMMARY, 0)

        def SWAP(self):
            return self.getToken(SqlBaseParser.SWAP, 0)

        def SYSTEM(self):
            return self.getToken(SqlBaseParser.SYSTEM, 0)

        def TABLES(self):
            return self.getToken(SqlBaseParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(SqlBaseParser.TABLESAMPLE, 0)

        def TEMP(self):
            return self.getToken(SqlBaseParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SqlBaseParser.TEMPORARY, 0)

        def TEXT(self):
            return self.getToken(SqlBaseParser.TEXT, 0)

        def TIME(self):
            return self.getToken(SqlBaseParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(SqlBaseParser.TIMESTAMP, 0)

        def TO(self):
            return self.getToken(SqlBaseParser.TO, 0)

        def TOKEN_FILTERS(self):
            return self.getToken(SqlBaseParser.TOKEN_FILTERS, 0)

        def TOKENIZER(self):
            return self.getToken(SqlBaseParser.TOKENIZER, 0)

        def TRAILING(self):
            return self.getToken(SqlBaseParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(SqlBaseParser.TRANSACTION, 0)

        def TRANSACTION_ISOLATION(self):
            return self.getToken(SqlBaseParser.TRANSACTION_ISOLATION, 0)

        def TRIM(self):
            return self.getToken(SqlBaseParser.TRIM, 0)

        def TYPE(self):
            return self.getToken(SqlBaseParser.TYPE, 0)

        def UNCOMMITTED(self):
            return self.getToken(SqlBaseParser.UNCOMMITTED, 0)

        def VALUES(self):
            return self.getToken(SqlBaseParser.VALUES, 0)

        def VARYING(self):
            return self.getToken(SqlBaseParser.VARYING, 0)

        def VERBOSE(self):
            return self.getToken(SqlBaseParser.VERBOSE, 0)

        def VIEW(self):
            return self.getToken(SqlBaseParser.VIEW, 0)

        def WINDOW(self):
            return self.getToken(SqlBaseParser.WINDOW, 0)

        def WITHOUT(self):
            return self.getToken(SqlBaseParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(SqlBaseParser.WORK, 0)

        def WRITE(self):
            return self.getToken(SqlBaseParser.WRITE, 0)

        def YEAR(self):
            return self.getToken(SqlBaseParser.YEAR, 0)

        def ZONE(self):
            return self.getToken(SqlBaseParser.ZONE, 0)

        def getRuleIndex(self):
            return SqlBaseParser.RULE_nonReserved

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonReserved" ):
                listener.enterNonReserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonReserved" ):
                listener.exitNonReserved(self)




    def nonReserved(self):

        localctx = SqlBaseParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2501
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1152776691328746578) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -1718175795199) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & -4612531820615958531) != 0) or ((((_la - 201)) & ~0x3f) == 0 and ((1 << (_la - 201)) & -514023868187065) != 0) or ((((_la - 265)) & ~0x3f) == 0 and ((1 << (_la - 265)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[11] = self.queryTerm_sempred
        self._predicates[19] = self.relation_sempred
        self._predicates[30] = self.booleanExpression_sempred
        self._predicates[33] = self.valueExpression_sempred
        self._predicates[34] = self.primaryExpression_sempred
        self._predicates[48] = self.subscriptSafe_sempred
        self._predicates[93] = self.dataType_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 3)
         

    def subscriptSafe_sempred(self, localctx:SubscriptSafeContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

    def dataType_sempred(self, localctx:DataTypeContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         




