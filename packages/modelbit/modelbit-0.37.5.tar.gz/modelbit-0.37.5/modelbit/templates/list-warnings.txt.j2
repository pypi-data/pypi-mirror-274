{%- macro warningItem(item) -%}
    {% if item.kind == "MismatchedPackageWarning" %}
You chose {{ format.bold(item.desiredPackage) }} for your production environment, but you have {{ format.bold(item.similarPackage) }} locally.

To match your environment to production, run:
{% if isIPython %}
  {{ format.bold("!pip install " + item.desiredPackage) }}
{% else %}
  {{ format.bold("pip install " + item.desiredPackage) }}
{% endif %}

{%if isIPython %}
To match production to your local environment, include this line in your deployment:
  mb.deploy(my_deploy_function, {{ format.bold("python_packages=[\"" + item.similarPackage + "\"]") }})
{% else %}
To match production to your local environment, include {{ format.bold(item.similarPackage) }} in your {{ format.bold("requirements.txt") }} file. More info: https://doc.modelbit.com/#/git/deploying-with-git?id=_1-requirementstxt
{% endif %}
{% endif -%}

{%- if item.kind == "MissingPackageFromImportWarning" %}
Your deployment imports {{ format.bold(item.importedModule) }} but you did not specify {{ format.bold(item.localPackage) }} in your production environment.

{%if isIPython %}
To add the missing package to your production environment, run:
  mb.deploy(my_deploy_function, {{ format.bold("python_packages=[\"" + item.localPackage + "\"]") }}
{% else %}
To add the missing package to your production environment, include {{ format.bold(item.localPackage) }} in your {{ format.bold("requirements.txt") }} file.
{% endif %}
{% endif -%}

{%- if isIPython and item.kind == "MissingExtraFileWarning" %}
Your deployment imports {{ format.bold(item.moduleName) }} but it doesn't appear to be from a pip package or in {{ format.bold("extra_files") }}.
{% endif -%}

{%- if isIPython and item.kind == "ProbablyNotAPackageWarning" %}
Your deployment specifies {{ format.bold(item.packageName) }} but that package is not installed. Is the package name correct?
{% endif -%}

{%- if isIPython and item.kind == "ProbablyWrongRequirement" %}
Did you mean to use {{ format.bold(item.packageName) }}? {{ item.reason }}
{% endif -%}

{%- if isIPython and item.kind == "ProbablyVersionWrong" %}
Your deployment specifies {{ format.bold(item.packageName) }} but that version was not found on PyPI. Is the version correct?
{% endif -%}

{%- if item.kind == "MissingModelDeps" %}
Run your deployment function before deploying so that {{ format.bold("mb.deploy") }} can auto-detect the dependencies of the models you will load using {{ format.bold("mb.get_model") }}.

Model dependencies were not detected in {{ format.bold(item.notCalledFuncs) }}.
{% endif %}

{%- if isIPython and item.kind == "ProbablyWantDataframeModeWarning" %}
Your deployment appears to be a good fit for setting {{ format.bold("dataframe_mode = True") }}. Learn more at https://doc.modelbit.com/deployments/dataframe-mode
{% endif -%}


{%- if item.kind == "SnowparkBadPythonWarning" %}
This deployment will be unavailable in Snowflake Snowpark because Snowpark does not support Python {{ format.bold(item.pythonVersion) }}.
{% endif %}

{%- if item.kind == "SnowparkBadPackageWarning" %}
This deployment may not work in Snowflake Snowpark because {{ format.bold(item.packageName) }} was not found in the Snowpark package repository.
{% endif %}

{%- if item.kind == "SnowparkBadPackageVersionWarning" %}
This deployment may not work in Snowflake Snowpark because {{ format.bold(item.packageName) }}=={{ format.bold(item.usingVersion) }} was not found in the Snowpark package repository.

Try switching to another version of {{ format.bold(item.packageName) }}. These versions are available: {{ format.bold(item.availableVersionsStr) }}.
{% endif %}

{%- if item.kind == "SnowflakeRemovingMockFunctionValue" %}
The previous version of this deployment had a {{ format.bold("snowflake_mock_return_value") }} of {{ format.bold(item.existingMockReturnValue) }} and this version is removing it.
{% endif %}

{%- if item.kind == "DifferentPythonVerWarning" %}
You chose {{ format.bold("Python "+ item.desiredVersion) }} for your production environment, but you have {{format.bold("Python "+ item.localVersion) }} locally.

{%if isIPython %}
To match production to your local environment, include this line in your deployment:
  mb.deploy(my_deploy_function, {{ format.bold("python_version=\"" + item.localVersion + "\"") }})
{% else %}
To match production to your local environment, include {{ format.bold("pythonVersion: \"" + item.localVersion + "\"") }} in your {{ format.bold("metadata.yaml") }} file. More info: https://doc.modelbit.com/#/git/deploying-with-git?id=_3-metadatayaml
{% endif %}

To match your local environment to production, consider installing {{ format.bold("Python " + item.desiredVersion) }} locally.
{% endif %}
{% endmacro -%}

{% if warningsList | length > 0 %}

{{ format.bold("***Heads Up!***") }}

{% for warning in warningsList %}
--> {{ warningItem(warning) }}
{% endfor %}
{% endif %}
