from fileformats.generic import File
import logging
from pydra.engine import ShellCommandTask, specs
import typing as ty


logger = logging.getLogger(__name__)


input_fields = [
    (
        "fsf_file",
        File,
        {
            "help_string": "File specifying the feat design spec file",
            "argstr": "{fsf_file}",
            "copyfile": False,
            "mandatory": True,
            "position": 0,
        },
    ),
    (
        "ev_files",
        ty.List[File],
        {
            "help_string": "Event spec files generated by level1design",
            "argstr": "{ev_files}",
            "copyfile": False,
            "mandatory": True,
            "position": 1,
        },
    ),
]
FEATModel_input_spec = specs.SpecInfo(
    name="Input", fields=input_fields, bases=(specs.ShellSpec,)
)

output_fields = [
    (
        "design_file",
        File,
        {"help_string": "Mat file containing ascii matrix for design"},
    ),
    (
        "design_image",
        File,
        {"help_string": "Graphical representation of design matrix"},
    ),
    (
        "design_cov",
        File,
        {"help_string": "Graphical representation of design covariance"},
    ),
    ("con_file", File, {"help_string": "Contrast file containing contrast vectors"}),
    ("fcon_file", File, {"help_string": "Contrast file containing contrast vectors"}),
]
FEATModel_output_spec = specs.SpecInfo(
    name="Output", fields=output_fields, bases=(specs.ShellOutSpec,)
)


class FEATModel(ShellCommandTask):
    """
    Examples
    -------

    >>> from fileformats.generic import File
    >>> from pydra.tasks.fsl.auto.model.feat_model import FEATModel

    """

    input_spec = FEATModel_input_spec
    output_spec = FEATModel_output_spec
    executable = "feat_model"
