#include <Python.h>
#include "types.h"
#include "common.h"
#include "multivector_gen.h"

//#include "multivector_types.h"
/* #include "multivector.h" */


{% for i in range(nalgebras) %}
{% set algebra = algebras[i] %}
{% set bladeszero %}
{{"{"}}{0}{% for j in range(algebra.ngrades-1) -%},{0}{% endfor %}{{"}"}}
{% endset %}
#define blades{{i}}zero {{bladeszero}}

typedef struct _gen{{i}}_DenseMultivector{
    ga_float value[{{algebra.size}}];
}gen{{i}}_DenseMultivector;

typedef struct _gen{{i}}_BladesMultivector{
{% for j in range(algebra.ngrades) %}
    ga_float value{{j}}[{{algebra.gradesize[j]}}];
{% endfor %}
}gen{{i}}_BladesMultivector;


typedef struct _gen{{i}}_GradesBitmap{
{% for j in range(algebra.ngrades) %}
    int bitmap{{j}}[{{algebra.gradesize[j]}}];
{% endfor %}
}gen{{i}}_GradesBitmap;

static gen{{i}}_GradesBitmap gen{{i}}_gradesbitmap = {
{% for j in range(algebra.ngrades) %}
    {{"{"}}{{algebra.gradesbitmap[j][0]}}{% for k in range(1,algebra.gradesbitmaplen[j]) -%},{{algebra.gradesbitmap[j][k]}}{%- endfor %}{{"},"}}
{% endfor %}
};

static int gen{{i}}_grades_position[{{algebra.size}}] = {{"{"}}{{algebra.position[0]}}{% for j in range(1,algebra.size) -%},{{algebra.position[j]}}{%- endfor %}{{"}"}};

{% for j in range(algebra.ngrades)%}
static void gen{{i}}_dense_grade{{j}}project(gen{{i}}_DenseMultivector *dense0, gen{{i}}_DenseMultivector *dense){

{% for k in range(algebra.size) %}
{% if algebra.GRADE(k) == j %}
    dense->value[{{k}}] = dense0->value[{{k}}];
{% endif %}
{% endfor %}
}

{% endfor %}

{% for j in range(algebra.ngrades)%}
static void gen{{i}}_blades_grade{{j}}project(gen{{i}}_BladesMultivector *blades0, gen{{i}}_BladesMultivector *blades){
    memcpy(blades->value{{j}},blades0->value{{j}},sizeof(blades0->value{{j}}));
}

{% endfor %}

{% for j in range(algebra.ngrades)%}
#define GEN{{i}}_BLADES_GRADE{{j}}PROJECT(blades0,blades)\
    (memcpy(blades->value{{j}},blades0->value{{j}},sizeof(blades0->value{{j}})))


{% endfor %}


typedef void (*gen{{i}}densegradeprojectfunc)(gen{{i}}_DenseMultivector*,gen{{i}}_DenseMultivector*);

typedef struct gen{{i}}_DenseGradeProject_funcs{
    gen{{i}}densegradeprojectfunc gradeproject[{{algebra.ngrades}}];
}gen{{i}}_DenseGradeProject_func;

static gen{{i}}_DenseGradeProject_func gen{{i}}denseproject = {
{% for l in range(algebra.ngrades) %}
    .gradeproject[{{l}}] = gen{{i}}_dense_grade{{l}}project,
{% endfor %}
};

typedef void (*gen{{i}}bladesgradeprojectfunc)(gen{{i}}_BladesMultivector*,gen{{i}}_BladesMultivector*);
typedef struct gen{{i}}_BladesGradeProject_funcs{
    gen{{i}}bladesgradeprojectfunc gradeproject[{{algebra.ngrades}}];
}gen{{i}}_BladesGradeProject_func;

static gen{{i}}_BladesGradeProject_func gen{{i}}bladesproject = {
{% for l in range(algebra.ngrades) %}
    .gradeproject[{{l}}] = gen{{i}}_blades_grade{{l}}project,
{% endfor %}
};

{% for type in types %}
{% set Type = Types[loop.index0] %}
static int gen{{i}}_{{type}}_gradeproject(gen{{i}}_{{Type}}Multivector *{{type}}, gen{{i}}_{{Type}}Multivector *{{type}}0, int *grades, Py_ssize_t size){
    for(Py_ssize_t i = 0; i < size; i++){
        gen{{i}}{{type}}gradeprojectfunc gradeproject =
                            gen{{i}}{{type}}project.gradeproject[grades[i]];
        if(gradeproject)
            gradeproject({{type}}0,{{type}});
        else return -1;
    }
    return 0;
}
{% endfor %}

static gen{{i}}_DenseMultivector dense{{i}}_init_(int *bitmap, ga_float *value, Py_ssize_t size, PyAlgebraObject *ga){
    gen{{i}}_DenseMultivector dense = {{"{{"}}0{{"}}"}};
    for(Py_ssize_t i = 0; i < size; i++){
        if(bitmap[i] >= {{algebra.size}}){
            return dense; // raise error
        }
        dense.value[bitmap[i]] += value[i]; // repeated blades are added to the same value
    }
    return dense;
}

static gen{{i}}_BladesMultivector blades{{i}}_init_(int *bitmap, ga_float *value, Py_ssize_t size, PyAlgebraObject *ga){
    gen{{i}}_BladesMultivector blades = {{"{"}}{% for j in range(algebra.ngrades) -%}{0},{% endfor %}{{"};"}}

    for(Py_ssize_t i = 0; i < size; i++){
        switch(GRADE(bitmap[i])){
{% for k in range(algebra.ngrades) %}
            case {{k}}:
                blades.value{{k}}[gen{{i}}_grades_position[bitmap[i]]] += value[i];
                break;
{% endfor %}
            default:
                return blades; // raise error
        }
    }
    return blades;
}

static int cast_to_blades{{i}}(PyMultivectorIter *from, void *to, PyAlgebraObject *GA){
    gen{{i}}_BladesMultivector *pblades = (gen{{i}}_BladesMultivector*)to;
    gen{{i}}_BladesMultivector blades =  {{"{"}}{% for j in range(algebra.ngrades) -%}{0},{% endfor %}{{"};"}}
    if(!from || !pblades){
        return 0;
    }
    while(from->next(from)){
        switch(from->grade){
{% for k in range(algebra.ngrades) %}
            case {{k}}:
                blades.value{{k}}[gen{{i}}_grades_position[from->bitmap]] += from->value;
                break;
{% endfor %}
            default:
                return 0;
        }
    }
    *pblades = blades;
    return 1;
}

static int cast_to_dense{{i}}(PyMultivectorIter *from, void *to, PyAlgebraObject *GA){
    gen{{i}}_DenseMultivector *pdense = (gen{{i}}_DenseMultivector*)to;
    gen{{i}}_DenseMultivector dense =  {% raw %}{{0}};{% endraw %}
    
    if(!from || !pdense)
        return 0;
    
    while(from->next(from)){
        if(from->bitmap < {{algebra.size}})
            dense.value[from->bitmap] += from->value;
        else{
            return 0;
        }
    }
    *pdense = dense;
    return 1;
}

{% for j in range(2)%} {# iterate over types #}
{% set type = types[j] %}
{% set Type = Types[j] %}

static int {{type}}{{i}}_init(void *data, PyAlgebraObject *ga, int *bitmap, ga_float *value, Py_ssize_t size){
    gen{{i}}_{{Type}}Multivector *{{type}} = data;
    *{{type}} = {{type}}{{i}}_init_(bitmap,value,size,ga);
    return 1;
}

{% endfor %}



static PyMultivectorIter dense{{i}}_iterinit(void *data, PyMultivectorSubType *type){
    PyMultivectorIter iter;
    iter.data = data;
    iter.bitmap = -1;
    iter.value = 0;
    iter.type = type->ntype;
    iter.index = (Py_ssize_t*)PyMem_RawMalloc(sizeof(Py_ssize_t));
    iter.index[0] = 0;
    iter.size = 1;
    iter.niters = {{algebra.size}};
    iter.next = type->data_funcs->iter_next;
    iter.type_name = type->type_name;
    return iter;
}

static PyMultivectorIter blades{{i}}_iterinit(void *data, PyMultivectorSubType *type){
    PyMultivectorIter iter;
    iter.data= data;
    iter.bitmap = -1;
    iter.value = 0;
    iter.type = type->ntype;
    iter.index = (Py_ssize_t*)PyMem_RawMalloc(2*sizeof(Py_ssize_t));
    iter.index[0] = 0;
    iter.index[1] = 0;
    iter.size = 2;
    iter.niters = {{algebra.size}};
    iter.next = type->data_funcs->iter_next;
    iter.type_name = type->type_name;
    return iter;
}


static int blades{{i}}_iternext(PyMultivectorIter *iter){
    gen{{i}}_BladesMultivector *blades = (gen{{i}}_BladesMultivector*)iter->data;


    switch(*iter->index){
{% for l in range(algebra.ngrades) %}
        case {{l}}:
            iter->value = blades->value{{l}}[iter->index[1]];
            iter->bitmap = gen{{i}}_gradesbitmap.bitmap{{l}}[iter->index[1]];
            iter->grade = {{l}};
            if(++iter->index[1] >= {{algebra.gradesize[l]}}){
                iter->index[1] = 0;
                (*iter->index)++;
            }
            return 1;
{% endfor %}
        default: // reset indices
            iter->index[1] = 0;
            iter->index[0] = 0;
            return 0; // stop loop
    }

    return 0;
}

static int dense{{i}}_iternext(PyMultivectorIter *iter){
    gen{{i}}_DenseMultivector *dense = (gen{{i}}_DenseMultivector*)iter->data;
    if(*iter->index >= {{algebra.size}}){
        *iter->index = 0;
        return 0;
    }
    iter->bitmap = *iter->index;
    iter->value = dense->value[(*iter->index)++];
    iter->grade = GRADE(iter->bitmap);
    return 1;
}

{% endfor %}


{% for i in range(nalgebras) %}
{% set algebra = algebras[i] %}
{% for pindex in range(algebra.nproducts) %}
{% set product_name = algebra.product_names[pindex] %}
{% set zerosign = algebra.zerosigns[pindex] %}
{% set bitmaps = algebra.bitmaps[pindex] %}
{% set signs = algebra.signs[pindex] %}

static gen{{i}}_DenseMultivector gen{{i}}_dense_{{product_name}}product(gen{{i}}_DenseMultivector dense0, gen{{i}}_DenseMultivector dense1){
    gen{{i}}_DenseMultivector dense = {{"{{"}}0{{"}}"}};
{% for j in range(algebra.size) %}
{% if zerosign[j] == True %}
    dense.value[{{j}}] =
{% for k in range(algebra.size) %}
{% set bitmap = bitmaps[k][j] %}
{% set sign = signs[k][j] %}
{% if sign == -1 %}
    -dense0.value[{{k}}]*dense1.value[{{bitmap}}]
{% elif sign == 1 %}
    +dense0.value[{{k}}]*dense1.value[{{bitmap}}]
{% endif %}
{% endfor %};
{% endif %}
{% endfor %}
    return dense;
}

// grade projection of the product of two multivectors <ab>_r
{% for r in range(algebra.ngrades) %}
{# static void gen{{i}}_dense_grade{{r}}{{product_name}}product(gen{{i}}_DenseMultivector *dense, gen{{i}}_DenseMultivector dense0, gen{{i}}_DenseMultivector dense1){ #}
#define GEN{{i}}_DENSE_GRADE{{r}}{{product_name|upper}}PRODUCT(dense,dense0,dense1){\
{% for j in range(algebra.size) %}
{% if algebra.GRADE(j) == r %}
{% if zerosign[j] == True %}
    dense.value[{{j}}] =\
{% for k in range(algebra.size) %}
{% set bitmap = bitmaps[k][j] %}
{% set sign = signs[k][j] %}
{% if sign == -1 %}
    -dense0.value[{{k}}]*dense1.value[{{bitmap}}]\
{% elif sign == 1 %}
    +dense0.value[{{k}}]*dense1.value[{{bitmap}}]\
{% endif %}
{% endfor %};\
{% endif %}
{% endif %}
{% endfor %}
}
{% endfor %}

static gen{{i}}_DenseMultivector gen{{i}}_dense_grade{{product_name}}product(gen{{i}}_DenseMultivector dense0, gen{{i}}_DenseMultivector dense1, int *grades, Py_ssize_t size){
    gen{{i}}_DenseMultivector dense = {% raw -%}{{0}}{%- endraw %};
    for(Py_ssize_t i = 0; i < size; i++){
        switch(grades[i]){
{% for r in range(algebra.ngrades) %}
            case {{r}}:
                GEN{{i}}_DENSE_GRADE{{r}}{{product_name|upper}}PRODUCT(dense,dense0,dense1);
                break;
{% endfor %}
            default:// do nothing for different values
                break;
        }
    }
    return dense;
}

{% endfor %}

static int atomic_dense{{i}}_add(void *out, void *data0, PyAlgebraObject *GA, Py_ssize_t size){
    gen{{i}}_DenseMultivector *dense_array = (gen{{i}}_DenseMultivector *)data0;
    gen{{i}}_DenseMultivector dense = {{"{{"}}0{{"}}"}};
    gen{{i}}_DenseMultivector *dense_out = (gen{{i}}_DenseMultivector *)out;

    for(Py_ssize_t i = 0; i < size; i++){
{% for j in range(algebra.size) %}
        dense.value[{{j}}] += dense_array[i].value[{{j}}];
{% endfor %}
    }

    *dense_out = dense;
    return 1;
}


static int binary_dense{{i}}_add(void *out, void *data0, void *data1, PyAlgebraObject *GA, int sign){
    gen{{i}}_DenseMultivector *dense0 = (gen{{i}}_DenseMultivector *)data0;
    gen{{i}}_DenseMultivector *dense1 = (gen{{i}}_DenseMultivector *)data1;
    gen{{i}}_DenseMultivector *dense_out = (gen{{i}}_DenseMultivector *)out;

    gen{{i}}_DenseMultivector dense = {{"{{"}}0{{"}}"}};
    if(sign == -1){
{% for j in range(algebra.size) %}
        dense.value[{{j}}] = dense0->value[{{j}}] - dense1->value[{{j}}];
{% endfor %}
    }else if(sign == 1){
{% for j in range(algebra.size) %}
        dense.value[{{j}}] = dense0->value[{{j}}] + dense1->value[{{j}}];
{% endfor %}
    } else{
{% for j in range(algebra.size) %}
        dense.value[{{j}}] = dense0->value[{{j}}] + sign*dense1->value[{{j}}];
{% endfor %}
    }

    *dense_out = dense;
    return 1;
}


static int binary_dense{{i}}_scalaradd(void *out, void *data0, PyAlgebraObject *GA, ga_float value, int sign){
    gen{{i}}_DenseMultivector *dense0 = (gen{{i}}_DenseMultivector*)data0;
    gen{{i}}_DenseMultivector *dense_out = (gen{{i}}_DenseMultivector*)out;

    gen{{i}}_DenseMultivector dense = {{"{{"}}0{{"}}"}};
    if(sign == -1){
{% for j in range(algebra.size) %}
        dense.value[{{j}}] = -dense0->value[{{j}}];
{% endfor %}
    }else if(sign == 1){
{% for j in range(algebra.size) %}
        dense.value[{{j}}] = dense0->value[{{j}}];
{% endfor %}
    } else{
{% for j in range(algebra.size) %}
        dense.value[{{j}}] = sign*dense0->value[{{j}}];
{% endfor %}
    }
    dense.value[0] += value;
    
    *dense_out = dense;
    return 1;
}

static int binary_dense{{i}}_scalarproduct(void *out, void *data0, PyAlgebraObject *GA, ga_float value){
    gen{{i}}_DenseMultivector* dense0 = (gen{{i}}_DenseMultivector*)data0;
    gen{{i}}_DenseMultivector* dense_out = (gen{{i}}_DenseMultivector*)out;
    gen{{i}}_DenseMultivector dense = {{"{{"}}0{{"}}"}};

{% for j in range(algebra.size) %}
    dense.value[{{j}}] = value*dense0->value[{{j}}];
{% endfor %}

    *dense_out = dense;
    return 1;
}

static int unary_dense{{i}}_reverse(void *out, void *data0, PyAlgebraObject *GA){
    gen{{i}}_DenseMultivector* dense0 = (gen{{i}}_DenseMultivector*)data0;
    gen{{i}}_DenseMultivector* dense_out = (gen{{i}}_DenseMultivector*)out;
    gen{{i}}_DenseMultivector dense = {{"{{"}}0{{"}}"}};

{% for j in range(algebra.size) %}
{% if algebra.reverse[algebra.GRADE(j)] == -1 %}
    dense.value[{{j}}] = -dense0->value[{{j}}];
{% else %}
    dense.value[{{j}}] = dense0->value[{{j}}];
{% endif %}
{% endfor %}

    *dense_out = dense;
    return 1;
}

static int unary_dense{{i}}_dual(void *out, void *data0, PyAlgebraObject *GA){
    gen{{i}}_DenseMultivector* dense0 = (gen{{i}}_DenseMultivector*)data0;
    gen{{i}}_DenseMultivector* dense_out = (gen{{i}}_DenseMultivector*)out;
    gen{{i}}_DenseMultivector dense = {{"{{"}}0{{"}}"}};

{% for j in range(algebra.size) %}
{% if algebra.dualsign[j] == -1 %}
    dense.value[{{algebra.dualbitmap[j]}}] = -dense0->value[{{j}}];
{% else %}
    dense.value[{{algebra.dualbitmap[j]}}] = dense0->value[{{j}}];
{% endif %}
{% endfor %}

    *dense_out = dense;
    return 1;
}

static int unary_dense{{i}}_undual(void *out, void *data0, PyAlgebraObject *GA){
    gen{{i}}_DenseMultivector* dense0 = (gen{{i}}_DenseMultivector*)data0;
    gen{{i}}_DenseMultivector* dense_out = (gen{{i}}_DenseMultivector*)out;
    gen{{i}}_DenseMultivector dense = {{"{{"}}0{{"}}"}};

{% for j in range(algebra.size) %}
{% if algebra.undualsign[j] == -1 %}
    dense.value[{{algebra.undualbitmap[j]}}] = -dense0->value[{{j}}];
{% else %}
    dense.value[{{algebra.undualbitmap[j]}}] = dense0->value[{{j}}];
{% endif %}
{% endfor %}

    *dense_out = dense;
    return 1;
}

{% for pindex in range(algebra.nproducts) %}
{% set product_name = algebra.product_names[pindex] %}
{% set zerosign = algebra.zerosigns[pindex] %}
{% set bitmaps = algebra.bitmaps[pindex] %}
{% set signs = algebra.signs[pindex] %}

static gen{{i}}_BladesMultivector gen{{i}}_blades_{{product_name}}product(gen{{i}}_BladesMultivector blades0, gen{{i}}_BladesMultivector blades1){
    gen{{i}}_BladesMultivector blades = {{"{"}}{% for j in range(algebra.ngrades) -%}{0},{% endfor %}{{"};"}}

{% for j in range(algebra.size) %}
{% set pj = algebra.position[j] %}
{% if zerosign[j] == True %}
    blades.value{{algebra.GRADE(j)}}[{{pj}}] =
{% for k in range(algebra.size) %}
{% set bitmap = bitmaps[k][j]%}
{% set pk = algebra.position[k] %}
{% set pbitmap = algebra.position[bitmap] %}
{% set sign = signs[k][j] %}
{% if sign == -1 %}
    -blades0.value{{algebra.GRADE(k)}}[{{pk}}]*blades1.value{{algebra.GRADE(bitmap)}}[{{pbitmap}}]
{% elif sign == 1 %}
    +blades0.value{{algebra.GRADE(k)}}[{{pk}}]*blades1.value{{algebra.GRADE(bitmap)}}[{{pbitmap}}]
{% endif %}
{% endfor %};
{% endif %}
{% endfor %}
    return blades;
}

{% for r in range(algebra.ngrades) %}
{# static void gen{{i}}_blades_grade{{r}}{{product_name}}product(gen{{i}}_BladesMultivector *blades, gen{{i}}_BladesMultivector blades0, gen{{i}}_BladesMultivector blades1){ #}
#define GEN{{i}}_BLADES_GRADE{{r}}{{product_name|upper}}PRODUCT(blades,blades0,blades1){\
{% for j in range(algebra.size) %}
{% if algebra.GRADE(j) == r %}
{% set pj = algebra.position[j] %}
{% if zerosign[j] == True %}
    blades.value{{algebra.GRADE(j)}}[{{pj}}] =\
{% for k in range(algebra.size) %}
{% set bitmap = bitmaps[k][j]%}
{% set pk = algebra.position[k] %}
{% set pbitmap = algebra.position[bitmap] %}
{% set sign = signs[k][j] %}
{% if sign == -1 %}
    -blades0.value{{algebra.GRADE(k)}}[{{pk}}]*blades1.value{{algebra.GRADE(bitmap)}}[{{pbitmap}}]\
{% elif sign == 1 %}
    +blades0.value{{algebra.GRADE(k)}}[{{pk}}]*blades1.value{{algebra.GRADE(bitmap)}}[{{pbitmap}}]\
{% endif %}
{% endfor %};\
{% endif %}
{% endif %}
{% endfor %}
}
{% endfor %}

static gen{{i}}_BladesMultivector gen{{i}}_blades_grade{{product_name}}product(gen{{i}}_BladesMultivector blades0, gen{{i}}_BladesMultivector blades1, int *grades, Py_ssize_t size){
    gen{{i}}_BladesMultivector blades = blades{{i}}zero;
    for(Py_ssize_t i = 0; i < size; i++){
        switch(grades[i]){
{% for r in range(algebra.ngrades) %}
            case {{r}}:
                GEN{{i}}_BLADES_GRADE{{r}}{{product_name|upper}}PRODUCT(blades,blades0,blades1);
                break;
{% endfor %}
            default:// do nothing for different values
                break;
        }
    }
    return blades;
}

{% endfor %}

static int atomic_blades{{i}}_add(void *out, void *data0, PyAlgebraObject *GA, Py_ssize_t size){
    gen{{i}}_BladesMultivector *blades_array = (gen{{i}}_BladesMultivector *)data0;
    gen{{i}}_BladesMultivector *blades_out = (gen{{i}}_BladesMultivector *)out;
    gen{{i}}_BladesMultivector blades = {{"{"}}{% for j in range(algebra.ngrades) -%}{0},{% endfor %}{{"};"}}

    for(Py_ssize_t i = 0; i < size; i++){
{% for gradesize in algebra.gradesize %}
{% set grade = loop.index0 %}
{% for j in range(gradesize) %}
       blades.value{{grade}}[{{j}}] += blades_array[i].value{{grade}}[{{j}}];
{% endfor %}
{% endfor %}
    }

    *blades_out = blades;
    return 1;
}

static int binary_blades{{i}}_add(void *out, void *data0, void *data1, PyAlgebraObject *GA, int sign){
    gen{{i}}_BladesMultivector *blades0 = (gen{{i}}_BladesMultivector *)data0;
    gen{{i}}_BladesMultivector *blades1 = (gen{{i}}_BladesMultivector *)data1;
    gen{{i}}_BladesMultivector *blades_out = (gen{{i}}_BladesMultivector *)out;

    gen{{i}}_BladesMultivector blades = {{"{"}}{% for j in range(algebra.ngrades) -%}{0},{% endfor %}{{"};"}}

    if(sign == -1){
{% for gradesize in algebra.gradesize %}
{% set grade = loop.index0 %}
{% for j in range(gradesize) %}
        blades.value{{grade}}[{{j}}] = blades0->value{{grade}}[{{j}}] - blades1->value{{grade}}[{{j}}];
{% endfor %}
{% endfor %}
    }else if(sign == 1){
{% for gradesize in algebra.gradesize %}
{% set grade = loop.index0 %}
{% for j in range(gradesize) %}
        blades.value{{grade}}[{{j}}] = blades0->value{{grade}}[{{j}}] + blades1->value{{grade}}[{{j}}];
{% endfor %}
{% endfor %}
    }else{
{% for gradesize in algebra.gradesize %}
{% set grade = loop.index0 %}
{% for j in range(gradesize) %}
        blades.value{{grade}}[{{j}}] = blades0->value{{grade}}[{{j}}] + sign*blades1->value{{grade}}[{{j}}];
{% endfor %}
{% endfor %}
    }
    *blades_out = blades;
    return 1;
}


static int binary_blades{{i}}_scalaradd(void *out, void *data0, PyAlgebraObject *GA, ga_float value, int sign){
    gen{{i}}_BladesMultivector *blades0 = (gen{{i}}_BladesMultivector *)data0;
    gen{{i}}_BladesMultivector *blades_out = (gen{{i}}_BladesMultivector *)out;

    gen{{i}}_BladesMultivector blades = {{"{"}}{% for j in range(algebra.ngrades) -%}{0},{% endfor %}{{"};"}}

    if(sign == -1){
{% for gradesize in algebra.gradesize %}
{% set grade = loop.index0 %}
{% for j in range(gradesize) %}
        blades.value{{grade}}[{{j}}] = -blades0->value{{grade}}[{{j}}];
{% endfor %}
{% endfor %}
    }else if(sign == 1){
{% for gradesize in algebra.gradesize %}
{% set grade = loop.index0 %}
{% for j in range(gradesize) %}
        blades.value{{grade}}[{{j}}] = blades0->value{{grade}}[{{j}}];
{% endfor %}
{% endfor %}
    }else{
{% for gradesize in algebra.gradesize %}
{% set grade = loop.index0 %}
{% for j in range(gradesize) %}
        blades.value{{grade}}[{{j}}] = sign*blades0->value{{grade}}[{{j}}];
{% endfor %}
{% endfor %}
    }
    blades.value0[0] += value;
    *blades_out = blades;
    return 1;
}


static int binary_blades{{i}}_scalarproduct(void *out, void *data0, PyAlgebraObject *GA, ga_float value){
    gen{{i}}_BladesMultivector *blades0 = (gen{{i}}_BladesMultivector *)data0;
    gen{{i}}_BladesMultivector *blades_out = (gen{{i}}_BladesMultivector *)out;

    gen{{i}}_BladesMultivector blades = {{"{"}}{% for j in range(algebra.ngrades) -%}{0},{% endfor %}{{"};"}}

{% for gradesize in algebra.gradesize %}
{% set grade = loop.index0 %}
{% for j in range(gradesize) %}
    blades.value{{grade}}[{{j}}] = value*blades0->value{{grade}}[{{j}}];
{% endfor %}
{% endfor %}
    *blades_out = blades;
    return 1;
}

static int unary_blades{{i}}_reverse(void *out, void *data0, PyAlgebraObject *GA){
    gen{{i}}_BladesMultivector *blades0 = (gen{{i}}_BladesMultivector *)data0;
    gen{{i}}_BladesMultivector *blades_out = (gen{{i}}_BladesMultivector *)out;

    gen{{i}}_BladesMultivector blades = {{"{"}}{% for j in range(algebra.ngrades) -%}{0},{% endfor %}{{"};"}}

{% for gradesize in algebra.gradesize %}
{% set grade = loop.index0 %}
{% for j in range(gradesize) %}
{% if algebra.reverse[grade] == -1 %}
    blades.value{{grade}}[{{j}}] = -blades0->value{{grade}}[{{j}}];
{% else %}
    blades.value{{grade}}[{{j}}] = blades0->value{{grade}}[{{j}}];
{% endif %}
{% endfor %}
{% endfor %}
    
    *blades_out = blades;
    return 1;
}


static int unary_blades{{i}}_dual(void *out, void *data0, PyAlgebraObject *GA){
    gen{{i}}_BladesMultivector *blades0 = (gen{{i}}_BladesMultivector *)data0;
    gen{{i}}_BladesMultivector *blades_out = (gen{{i}}_BladesMultivector *)out;

    gen{{i}}_BladesMultivector blades = {{"{"}}{% for j in range(algebra.ngrades) -%}{0},{% endfor %}{{"};"}}

{% for j in range(algebra.size) %}
{% set gradein = algebra.GRADE(j) %}
{% set gradeout = algebra.metric_size - algebra.GRADE(j) %}
{% set positionin = algebra.position[j] %}
{% set positionout = algebra.position[algebra.dualbitmap[j]] %}
{% if algebra.dualsign[j] == -1 %}
    blades.value{{gradeout}}[{{positionout}}] = -blades0->value{{gradein}}[{{positionin}}];
{% else %}
    blades.value{{gradeout}}[{{positionout}}] =  blades0->value{{gradein}}[{{positionin}}];
{% endif %}
{% endfor %}
    *blades_out = blades;
    return 1;
}

static int unary_blades{{i}}_undual(void *out, void *data0, PyAlgebraObject *GA){
    gen{{i}}_BladesMultivector *blades0 = (gen{{i}}_BladesMultivector*)data0;
    gen{{i}}_BladesMultivector *blades_out = (gen{{i}}_BladesMultivector*)out;

    gen{{i}}_BladesMultivector blades = {{"{"}}{% for j in range(algebra.ngrades) -%}{0},{% endfor %}{{"};"}}

{% for j in range(algebra.size) %}
{% set gradein = algebra.GRADE(j) %}
{% set gradeout = algebra.metric_size - algebra.GRADE(j) %}
{% set positionin = algebra.position[j] %}
{% set positionout = algebra.position[algebra.undualbitmap[j]] %}
{% if algebra.undualsign[j] == -1 %}
    blades.value{{gradeout}}[{{positionout}}] = -blades0->value{{gradein}}[{{positionin}}];
{% else %}
    blades.value{{gradeout}}[{{positionout}}] =  blades0->value{{gradein}}[{{positionin}}];
{% endif %}
{% endfor %}
    *blades_out = blades;
    return 1;
}




{% for type in types %}
{% set Type = Types[loop.index0] %}
static int binary_{{type}}{{i}}_product(void *out, void *data0, void *data1, PyAlgebraObject *GA, ProductType ptype){
    gen{{i}}_{{Type}}Multivector *p{{type}}0 = (gen{{i}}_{{Type}}Multivector*)data0;
    gen{{i}}_{{Type}}Multivector *p{{type}}1 = (gen{{i}}_{{Type}}Multivector*)data1;
    gen{{i}}_{{Type}}Multivector *p{{type}}  = (gen{{i}}_{{Type}}Multivector*)out;

    if(!p{{type}}0 || !p{{type}}1 || !p{{type}}){
        return 0; // raise error
    }

    switch(ptype){
{% for product_name in algebra.product_names %}
        case ProductType_{{product_name}}:
            *p{{type}} = gen{{i}}_{{type}}_{{product_name}}product(*p{{type}}0,*p{{type}}1);
            break;
{% endfor %}
        default:
            return 0;
    }

    return 1;
}
{% endfor %}


{% for type in types %}
{% set Type = Types[loop.index0] %}
static int binary_{{type}}{{i}}_gradeproduct(void *out, void *data0, void *data1, PyAlgebraObject *GA, ProductType ptype, GradeProjectMap gpmap){
    gen{{i}}_{{Type}}Multivector *p{{type}}0 = (gen{{i}}_{{Type}}Multivector*)data0;
    gen{{i}}_{{Type}}Multivector *p{{type}}1 = (gen{{i}}_{{Type}}Multivector*)data1;
    gen{{i}}_{{Type}}Multivector *p{{type}}  = (gen{{i}}_{{Type}}Multivector*)out;

    gen{{i}}_{{Type}}Multivector proj{{type}}0 = {% if type == "dense" %}{% raw -%}{{0}}{%- endraw %}{% else %} blades{{i}}zero{% endif %};
    gen{{i}}_{{Type}}Multivector proj{{type}}1 = {% if type == "dense" %}{% raw -%}{{0}}{%- endraw %}{% else %} blades{{i}}zero{% endif %};

    
    if(!p{{type}}0 || !p{{type}}1 || !p{{type}}){
        return 0; // raise error
    }
    // grade projection of the input
    if(gen{{i}}_{{type}}_gradeproject(&proj{{type}}0,p{{type}}0,gpmap.grades0,gpmap.size0) == -1) return 0;
    if(gen{{i}}_{{type}}_gradeproject(&proj{{type}}1,p{{type}}1,gpmap.grades0,gpmap.size0) == -1) return 0;


    switch(ptype){
{% for product_name in algebra.product_names %}
        case ProductType_{{product_name}}:
            *p{{type}} = gen{{i}}_{{type}}_grade{{product_name}}product(proj{{type}}0,proj{{type}}1,gpmap.grades,gpmap.size);
            break;
{% endfor %}
        default:
            return 0;
    }

    return 1;
}
{% endfor %}



{% for type in types %}
{% set Type = Types[loop.index0] %}
static int ternary_{{type}}{{i}}_product(void *out, void *data0, void *data1, void *data2, PyAlgebraObject *GA, ProductType ptype){
    gen{{i}}_{{Type}}Multivector *p{{type}}0 = (gen{{i}}_{{Type}}Multivector*)data0;
    gen{{i}}_{{Type}}Multivector *p{{type}}1 = (gen{{i}}_{{Type}}Multivector*)data1;
    gen{{i}}_{{Type}}Multivector *p{{type}}2 = (gen{{i}}_{{Type}}Multivector*)data2;
    gen{{i}}_{{Type}}Multivector *p{{type}}  = (gen{{i}}_{{Type}}Multivector*)out;
    
    if(!p{{type}}0 || !p{{type}}1 || !p{{type}}2 || !p{{type}}){
        return 0; // raise error
    }

    switch(ptype){
{% for product_name in algebra.product_names %}
        case ProductType_{{product_name}}:
            *p{{type}} = gen{{i}}_{{type}}_{{product_name}}product(*p{{type}}0,*p{{type}}1);
            *p{{type}} = gen{{i}}_{{type}}_{{product_name}}product(*p{{type}},*p{{type}}2);
            break;
{% endfor %}
        default:
            return 0;
    }

    return 1;
}
{% endfor %}

{% for type in types %}
{% set Type = Types[loop.index0] %}
static int unary_{{type}}{{i}}_gradeproject(void *out, void *self, PyAlgebraObject *GA, int *grades, Py_ssize_t size){
    
    //gen{{i}}_{{Type}}Multivector {{type}} = {% if type == "dense" %}{% raw -%}{{0}}{%- endraw %}{% else %} blades{{i}}zero{% endif %};
    gen{{i}}_{{Type}}Multivector *p{{type}} = (gen{{i}}_{{Type}}Multivector *)out;
    gen{{i}}_{{Type}}Multivector *p{{type}}0 = (gen{{i}}_{{Type}}Multivector*)self;

    if(gen{{i}}_{{type}}_gradeproject(p{{type}},p{{type}}0,grades,size) == -1) return 0;
    
    return 1;
}
{% endfor %}

{% for type in types %}
{% set Type = Types[loop.index0] %}
static int atomic_{{type}}{{i}}_product(void *out, void *data0, PyAlgebraObject *GA, Py_ssize_t size, ProductType ptype){
    if(size < 2) return 0;
    
    gen{{i}}_{{Type}}Multivector *p{{type}}0 = (gen{{i}}_{{Type}}Multivector*)data0;
    gen{{i}}_{{Type}}Multivector *p{{type}} = (gen{{i}}_{{Type}}Multivector*)out;
    gen{{i}}_{{Type}}Multivector {{type}};
    if(!out  || !p{{type}}){
        return 0; // raise memory error
    }
    switch(ptype){
{% for product_name in algebra.product_names %}
        case ProductType_{{product_name}}:
            {{type}} = gen{{i}}_{{type}}_{{product_name}}product(*p{{type}}0,p{{type}}0[1]);
            for(Py_ssize_t i = 2; i < size; i++){
                {{type}} = gen{{i}}_{{type}}_{{product_name}}product({{type}},p{{type}}0[i]);
            }
            break;
{% endfor %}
        default:
            return 0;
    }
    *p{{type}} = {{type}};

    return 1;
}
{% endfor %}

{% endfor %}

{% for i in range(nalgebras) %}
{% set algebra = algebras[i] %}

{% for type in types %}
static PyMultivectorMath_Funcs {{type}}{{i}}_math_funcs = {
    .atomic_add = atomic_{{type}}{{i}}_add,
    .atomic_product =  atomic_{{type}}{{i}}_product,
    .add =  binary_{{type}}{{i}}_add,
    .product =  binary_{{type}}{{i}}_product,
    .grade_project =  unary_{{type}}{{i}}_gradeproject,
    .scalar_product = binary_{{type}}{{i}}_scalarproduct,
    .scalar_add = binary_{{type}}{{i}}_scalaradd,
    .reverse = unary_{{type}}{{i}}_reverse,
    .dual = unary_{{type}}{{i}}_dual,
    .undual = unary_{{type}}{{i}}_undual,
    .ternary_product = ternary_{{type}}{{i}}_product,
    .graded_product = binary_{{type}}{{i}}_gradeproduct,
};

{% endfor %}

{% for type in types %}
static PyMultivectorData_Funcs {{type}}{{i}}_data_funcs = {
  .iter_next = {{type}}{{i}}_iternext,
  .iter_init = {{type}}{{i}}_iterinit,
  .init = {{type}}{{i}}_init,
  .cast = cast_to_{{type}}{{i}},
};

{% endfor %}

{% for type in types %}
{% set Type = Types[loop.index0] %}
static const PyMultivectorSubType {{type}}{{i}}_subtype = {
    .math_funcs = &{{type}}{{i}}_math_funcs,
    .data_funcs = &{{type}}{{i}}_data_funcs,
    .name = "{{algebra.name}}",
    .type_name = "{{type}}{{i}}",
    .generated = 1,
    .metric = {{"{"}}{% for v in algebra.metric -%}{{v}},{%- endfor %}{{"}"}},
    .msize = {{algebra.metric_size}},
    .ntype = {{typemin + 1 + i*2 + loop.index0}},
    .asize = {{algebra.size}},
    .basic_size = sizeof(gen{{i}}_{{Type}}Multivector),
};

{% endfor %}
{% endfor %}

// PyMultivectorSubType gen_subtypes_array[{{nalgebras*2}}] = {{"{"}}
// {%- for i in range(nalgebras) -%}
// {%- for type in types -%}
//   {{type}}{{i}}_subtype,
// {%- endfor -%}
// {%- endfor -%}{{"}"}};

 PyMultivectorSubType gen_subtypes_array[{{nalgebras*2}}] = {{"{"}}
{%- for i in range(nalgebras) -%}
{% set algebra = algebras[i] %}
{%- for type in types -%}
{% set Type = Types[loop.index0] %}
  {
    .math_funcs = &{{type}}{{i}}_math_funcs,
    .data_funcs = &{{type}}{{i}}_data_funcs,
    .name = "{{algebra.name}}",
    .type_name = "{{type}}{{i}}",
    .generated = 1,
    .metric = {{"{"}}{% for v in algebra.metric -%}{{v}},{%- endfor %}{{"}"}},
    .msize = {{algebra.metric_size}},
    .ntype = {{typemin + 1 + i*2 + loop.index0}},
    .asize = {{algebra.size}},
    .basic_size = sizeof(gen{{i}}_{{Type}}Multivector),
},
{%- endfor -%}
{%- endfor -%}{{"}"}};

PyMultivectorMixedMath_Funcs gen_multivector_mixed_fn = {
  .add = NULL,
  .product = NULL,
  .atomic_add = NULL,
  .atomic_product = NULL,
  .type_names = {
{%- for i in range(nalgebras) -%}
{%- for type in types -%}
"{{type}}{{i}}",
{%- endfor %}
{%- endfor %}NULL},
};
