Metadata-Version: 2.1
Name: wf_rappi
Version: 0.3.4
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.11.1
Requires-Dist: pandas>=1.0
Requires-Dist: matplotlib==3.8.3
Requires-Dist: openpyxl==3.1.2
Requires-Dist: packaging==23.2
Requires-Dist: pillow==10.2.0
Requires-Dist: psycopg2==2.9.9
Requires-Dist: pyarrow==15.0.0
Requires-Dist: pydantic==2.5.3
Requires-Dist: pydantic-core==2.14.6
Requires-Dist: requests==2.31.0
Requires-Dist: scikit-learn==1.3.2
Requires-Dist: snowflake-connector-python==3.7.1
Requires-Dist: snowflake-snowpark-python==1.13.0
Requires-Dist: SQLAlchemy==1.4.51
Requires-Dist: twine==5.1.0
Requires-Dist: xgboost==2.0.3

# Rappi WFM Data Analysis and Forecasting

This Python package provides functionality for data analysis and forecasting for Rappi's Workforce Management (WFM) system.

## Installation

You can install the package using pip:

```bash
pip install rappi-wfm


# #The package includes functions for processing and preparing data for analysis.

# from data_processing import *

# # Example usage
# date_range = ['2024-04-01', '2024-04-10']
# df_ordered = read_and_sort_orders(date_range)
# special_days = preprocess_special_dates('Calendario Rappi - BD_Feriados.csv')
# df_filtered = filter_special_dates(df_ordered, special_days)
# orders = pivot_orders(df_filtered)

# Modeling
# The package provides tools for building and training models for forecasting.
# from modeling import *

# # Example usage
# train, test = split_train_test_data(orders, '2024-01-01')
# train = create_features(train)
# test = create_features(test)
# X_train, y_train = extract_features_target(train)
# model = train_xgboost_model(X_train, y_train)

# Order Distribution
# The order_distribution module helps distribute financial orders based on predicted values and average daily weights.

# from order_distribution import *

# # Example usage
# ordenes_financieras = create_ordenes_financieras(df_ordered, abril)
# curva_ordenes = create_curva_ordenes(df_ordered)
# df3 = distribute_orders(ordenes_financieras, curva_ordenes)

# License
# This project is licensed under the MIT License - see the LICENSE file for details
