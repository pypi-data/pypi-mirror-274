# Code generated by protoc-gen-connect-python 0.1.0.dev2, DO NOT EDIT.
import connect

from cloud.agent.v1 import agent_pb2 as cloud_dot_agent_dot_v1_dot_agent__pb2

AgentServiceName = "cloud.agent.v1.AgentService"
SearchServiceName = "cloud.agent.v1.SearchService"
HistoryServiceName = "cloud.agent.v1.HistoryService"


class AgentServiceClient:
    def __init__(self, base_url, *, pool=None, compressor=None, json=False, **opts):
        self._register = connect.Client(
            pool=pool,
            url=f"{base_url}/{AgentServiceName}/Register",
            response_type=cloud_dot_agent_dot_v1_dot_agent__pb2.RegisterAgentResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._list = connect.Client(
            pool=pool,
            url=f"{base_url}/{AgentServiceName}/List",
            response_type=cloud_dot_agent_dot_v1_dot_agent__pb2.ListAgentResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._ask = connect.Client(
            pool=pool,
            url=f"{base_url}/{AgentServiceName}/Ask",
            response_type=cloud_dot_agent_dot_v1_dot_agent__pb2.AskAgentResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._create_glossary = connect.Client(
            pool=pool,
            url=f"{base_url}/{AgentServiceName}/CreateGlossary",
            response_type=cloud_dot_agent_dot_v1_dot_agent__pb2.CreateGlossaryResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._list_glossary = connect.Client(
            pool=pool,
            url=f"{base_url}/{AgentServiceName}/ListGlossary",
            response_type=cloud_dot_agent_dot_v1_dot_agent__pb2.ListGlossaryResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._deploy = connect.Client(
            pool=pool,
            url=f"{base_url}/{AgentServiceName}/Deploy",
            response_type=cloud_dot_agent_dot_v1_dot_agent__pb2.DeployAgentResponse,
            compressor=compressor,
            json=json,
            **opts
        )
        self._destroy = connect.Client(
            pool=pool,
            url=f"{base_url}/{AgentServiceName}/Destroy",
            response_type=cloud_dot_agent_dot_v1_dot_agent__pb2.DestroyAgentResponse,
            compressor=compressor,
            json=json,
            **opts
        )

    def register(self, req, **opts):
        return self._register.call_unary(req, **opts)

    def list(self, req, **opts):
        return self._list.call_unary(req, **opts)

    def ask(self, req, **opts):
        return self._ask.call_unary(req, **opts)

    def create_glossary(self, req, **opts):
        return self._create_glossary.call_unary(req, **opts)

    def list_glossary(self, req, **opts):
        return self._list_glossary.call_unary(req, **opts)

    def deploy(self, req, **opts):
        return self._deploy.call_unary(req, **opts)

    def destroy(self, req, **opts):
        return self._destroy.call_unary(req, **opts)


class SearchServiceClient:
    def __init__(self, base_url, *, pool=None, compressor=None, json=False, **opts):
        self._query = connect.Client(
            pool=pool,
            url=f"{base_url}/{SearchServiceName}/Query",
            response_type=cloud_dot_agent_dot_v1_dot_agent__pb2.QueryAgentResponse,
            compressor=compressor,
            json=json,
            **opts
        )

    def query(self, req, **opts):
        return self._query.call_unary(req, **opts)


class HistoryServiceClient:
    def __init__(self, base_url, *, pool=None, compressor=None, json=False, **opts):
        self._history = connect.Client(
            pool=pool,
            url=f"{base_url}/{HistoryServiceName}/History",
            response_type=cloud_dot_agent_dot_v1_dot_agent__pb2.HistoryAgentResponse,
            compressor=compressor,
            json=json,
            **opts
        )

    def history(self, req, **opts):
        return self._history.call_unary(req, **opts)
