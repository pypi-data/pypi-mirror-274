# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from juno.feeshare.v1 import tx_pb2 as juno_dot_feeshare_dot_v1_dot_tx__pb2


class MsgStub(object):
    """Msg defines the fees Msg service."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterFeeShare = channel.unary_unary(
            "/juno.feeshare.v1.Msg/RegisterFeeShare",
            request_serializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgRegisterFeeShare.SerializeToString,
            response_deserializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgRegisterFeeShareResponse.FromString,
        )
        self.UpdateFeeShare = channel.unary_unary(
            "/juno.feeshare.v1.Msg/UpdateFeeShare",
            request_serializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgUpdateFeeShare.SerializeToString,
            response_deserializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgUpdateFeeShareResponse.FromString,
        )
        self.CancelFeeShare = channel.unary_unary(
            "/juno.feeshare.v1.Msg/CancelFeeShare",
            request_serializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgCancelFeeShare.SerializeToString,
            response_deserializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgCancelFeeShareResponse.FromString,
        )


class MsgServicer(object):
    """Msg defines the fees Msg service."""

    def RegisterFeeShare(self, request, context):
        """RegisterFeeShare registers a new contract for receiving transaction fees"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateFeeShare(self, request, context):
        """UpdateFeeShare updates the withdrawer address of a FeeShare"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CancelFeeShare(self, request, context):
        """CancelFeeShare cancels a contract's fee registration and further receival
        of transaction fees
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "RegisterFeeShare": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterFeeShare,
            request_deserializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgRegisterFeeShare.FromString,
            response_serializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgRegisterFeeShareResponse.SerializeToString,
        ),
        "UpdateFeeShare": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateFeeShare,
            request_deserializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgUpdateFeeShare.FromString,
            response_serializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgUpdateFeeShareResponse.SerializeToString,
        ),
        "CancelFeeShare": grpc.unary_unary_rpc_method_handler(
            servicer.CancelFeeShare,
            request_deserializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgCancelFeeShare.FromString,
            response_serializer=juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgCancelFeeShareResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "juno.feeshare.v1.Msg", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the fees Msg service."""

    @staticmethod
    def RegisterFeeShare(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/juno.feeshare.v1.Msg/RegisterFeeShare",
            juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgRegisterFeeShare.SerializeToString,
            juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgRegisterFeeShareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateFeeShare(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/juno.feeshare.v1.Msg/UpdateFeeShare",
            juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgUpdateFeeShare.SerializeToString,
            juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgUpdateFeeShareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CancelFeeShare(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/juno.feeshare.v1.Msg/CancelFeeShare",
            juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgCancelFeeShare.SerializeToString,
            juno_dot_feeshare_dot_v1_dot_tx__pb2.MsgCancelFeeShareResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
