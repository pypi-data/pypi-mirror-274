# This file is used to manually specify the semi-automatic conversion of
# 'nipype.interfaces.afni.utils.MaskTool' from Nipype to Pydra.
#
# Please fill-in/edit the fields below where appropriate
#
# Inputs
# ------
# in_file : inputmultiobject
#    input file or files to 3dmask_tool
# out_file : file
#    output image file name
# count : bool
#    Instead of created a binary 0/1 mask dataset, create one with counts of voxel overlap, i.e., each voxel will contain the number of masks that it is set in.
# datum : enum
#    specify data type for output.
# dilate_inputs : str
#    Use this option to dilate and/or erode datasets as they are read. ex. '5 -5' to dilate and erode 5 times
# dilate_results : str
#    dilate and/or erode combined mask at the given levels.
# frac : float
#    When combining masks (across datasets and sub-bricks), use this option to restrict the result to a certain fraction of the set of volumes
# inter : bool
#    intersection, this means -frac 1.0
# union : bool
#    union, this means -frac 0
# fill_holes : bool
#    This option can be used to fill holes in the resulting mask, i.e. after all other processing has been done.
# fill_dirs : str
#    fill holes only in the given directions. This option is for use with -fill holes. should be a single string that specifies 1-3 of the axes using {x,y,z} labels (i.e. dataset axis order), or using the labels in {R,L,A,P,I,S}.
# verbose : int
#    specify verbosity level, for 0 to 3
# num_threads : int
#    set number of threads
# outputtype : enum
#    AFNI output filetype
# args : str
#    Additional parameters to the command
# environ : dict
#    Environment variables
#
# Outputs
# -------
# out_file : file
#    mask file
#
# Docs
# ----
# 3dmask_tool - for combining/dilating/eroding/filling masks
# 
#     For complete details, see the `3dmask_tool Documentation.
#     <https://afni.nimh.nih.gov/pub../pub/dist/doc/program_help/3dmask_tool.html>`_
# 
#     Examples
#     --------
#     >>> from nipype.interfaces import afni
#     >>> masktool = afni.MaskTool()
#     >>> masktool.inputs.in_file = 'functional.nii'
#     >>> masktool.inputs.outputtype = 'NIFTI'
#     >>> masktool.cmdline
#     '3dmask_tool -prefix functional_mask.nii -input functional.nii'
#     >>> res = automask.run()  # doctest: +SKIP
# 
#     
task_name: mask_tool
nipype_name: MaskTool
nipype_module: nipype.interfaces.afni.utils
inputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    in_file: medimage/nifti1+list-of
    out_file: generic/file
  metadata:
  # dict[str, dict[str, any]] - additional metadata to set on any of the input fields (e.g. out_file: position: 1)
outputs:
  omit:
  # list[str] - fields to omit from the Pydra interface
  rename:
  # dict[str, str] - fields to rename in the Pydra interface
  types:
  # dict[str, type] - override inferred types (use "mime-like" string for file-format types,
  # e.g. 'medimage/nifti-gz'). For most fields the type will be correctly inferred
  # from the nipype interface, but you may want to be more specific, particularly
  # for file types, where specifying the format also specifies the file that will be
  # passed to the field in the automatically generated unittests.
    out_file: generic/file
  callables:
  # dict[str, str] - names of methods/callable classes defined in the adjacent `*_callables.py`
  # to set to the `callable` attribute of output fields
  templates:
  # dict[str, str] - `output_file_template` values to be provided to output fields
  requirements:
  # dict[str, list[str]] - input fields that are required to be provided for the output field to be present
tests:
- inputs:
  # dict[str, str] - values to provide to inputs fields in the task initialisation
  # (if not specified, will try to choose a sensible value)
    in_file:
    outputtype: '"NIFTI"'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  expected_outputs:
  # dict[str, str] - expected values for selected outputs, noting that tests will typically
  # be terminated before they complete for time-saving reasons, and therefore
  # these values will be ignored, when running in CI
  timeout: 10
  # int - the value to set for the timeout in the generated test, 
  # after which the test will be considered to have been initialised 
  # successfully. Set to 0 to disable the timeout (warning, this could
  # lead to the unittests taking a very long time to complete)
  xfail: true
  # bool - whether the unittest is expected to fail or not. Set to false
  # when you are satisfied with the edits you have made to this file
doctests:
- cmdline: 3dmask_tool -prefix functional_mask.nii -input functional.nii
  # str - the expected cmdline output
  inputs:
  # dict[str, str] - name-value pairs for inputs to be provided to the doctest.
  # If the field is of file-format type and the value is None, then the
  # '.mock()' method of the corresponding class is used instead.
    in_file:
    outputtype: '"NIFTI"'
  imports:
  # list[nipype2pydra.task.importstatement] - list import statements required by the test, with each list item
  # consisting of 'module', 'name', and optionally 'alias' keys
  directive: ''''
  # str - any doctest directive to place on the cmdline call, e.g. # doctest: +ELLIPSIS
