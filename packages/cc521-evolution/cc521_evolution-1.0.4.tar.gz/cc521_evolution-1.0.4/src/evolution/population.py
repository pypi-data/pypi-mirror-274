#!/usr/bin/env python3
#
# Population class - Just a group of individuals generated by an specific domain encoder

from typing import List
from abc import ABC, abstractmethod
from .individual import Individual
from .encoding.base import DomainEncoder

class Population:
    """Just a group of individuals"""
    # initial_individuals attribute is added to support micro-AG evolution schema (transfer best individuals from a micro-AG to other AG to continue the evolution)
    def __init__(self, domain_encoder: DomainEncoder, population: int = 10, initial_individuals: List[Individual] = None):
        """
        IMPORTANT: If initial_individuals field is passed, them must have the same domain encoder with which is being creating this population"""

        n = population # random individuals to be created
        initial_individuals = [] if initial_individuals is None else initial_individuals
        if (init:=len(initial_individuals)) > n:
            self.individuals = initial_individuals[:population]
        else:
            n -= init
            self.individuals = initial_individuals + \
                [Individual(domain_encoder.random(), domain_encoder) for _ in range(n)]

    @property
    def size(self):
        return len(self.individuals)

    def __iter__(self):
        for individual in self.individuals:
            yield individual
