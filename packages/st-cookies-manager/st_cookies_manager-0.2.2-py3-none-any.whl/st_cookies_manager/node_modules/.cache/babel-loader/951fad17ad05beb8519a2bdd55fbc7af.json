{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from './schema';\nimport { Vector } from './vector';\nimport { Chunked } from './vector/chunked';\nexport class Column extends Chunked {\n  constructor(field) {\n    let vectors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let offsets = arguments.length > 2 ? arguments[2] : undefined;\n    vectors = Chunked.flatten(...vectors);\n    super(field.type, vectors, offsets);\n    this._field = field;\n    if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n      return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n    }\n  }\n  /** @nocollapse */\n  static new(field, data) {\n    for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      rest[_key - 2] = arguments[_key];\n    }\n    const chunks = Chunked.flatten(Array.isArray(data) ? [...data, ...rest] : data instanceof Vector ? [data, ...rest] : [Vector.new(data, ...rest)]);\n    if (typeof field === 'string') {\n      const type = chunks[0].data.type;\n      field = new Field(field, type, true);\n    } else if (!field.nullable && chunks.some(_ref => {\n      let {\n        nullCount\n      } = _ref;\n      return nullCount > 0;\n    })) {\n      field = field.clone({\n        nullable: true\n      });\n    }\n    return new Column(field, chunks);\n  }\n  get field() {\n    return this._field;\n  }\n  get name() {\n    return this._field.name;\n  }\n  get nullable() {\n    return this._field.nullable;\n  }\n  get metadata() {\n    return this._field.metadata;\n  }\n  clone() {\n    let chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n    return new Column(this._field, chunks);\n  }\n  getChildAt(index) {\n    if (index < 0 || index >= this.numChildren) {\n      return null;\n    }\n    let columns = this._children || (this._children = []);\n    let column, field, chunks;\n    if (column = columns[index]) {\n      return column;\n    }\n    if (field = (this.type.children || [])[index]) {\n      chunks = this._chunks.map(vector => vector.getChildAt(index)).filter(vec => vec != null);\n      if (chunks.length > 0) {\n        return columns[index] = new Column(field, chunks);\n      }\n    }\n    return null;\n  }\n}\n/** @ignore */\nclass SingleChunkColumn extends Column {\n  constructor(field, vector, offsets) {\n    super(field, [vector], offsets);\n    this._chunk = vector;\n  }\n  search(index, then) {\n    return then ? then(this, 0, index) : [0, index];\n  }\n  isValid(index) {\n    return this._chunk.isValid(index);\n  }\n  get(index) {\n    return this._chunk.get(index);\n  }\n  set(index, value) {\n    this._chunk.set(index, value);\n  }\n  indexOf(element, offset) {\n    return this._chunk.indexOf(element, offset);\n  }\n}","map":{"version":3,"sources":["column.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}