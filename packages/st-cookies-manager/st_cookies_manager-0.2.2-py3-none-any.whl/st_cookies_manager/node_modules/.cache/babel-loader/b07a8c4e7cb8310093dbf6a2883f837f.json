{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType } from '../type';\nTable.prototype.countBy = function (name) {\n  return new DataFrame(this.chunks).countBy(name);\n};\nTable.prototype.scan = function (next, bind) {\n  return new DataFrame(this.chunks).scan(next, bind);\n};\nTable.prototype.scanReverse = function (next, bind) {\n  return new DataFrame(this.chunks).scanReverse(next, bind);\n};\nTable.prototype.filter = function (predicate) {\n  return new DataFrame(this.chunks).filter(predicate);\n};\nexport class DataFrame extends Table {\n  filter(predicate) {\n    return new FilteredDataFrame(this.chunks, predicate);\n  }\n  scan(next, bind) {\n    const batches = this.chunks,\n      numBatches = batches.length;\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      if (bind) {\n        bind(batch);\n      }\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        next(index, batch);\n      }\n    }\n  }\n  scanReverse(next, bind) {\n    const batches = this.chunks,\n      numBatches = batches.length;\n    for (let batchIndex = numBatches; --batchIndex >= 0;) {\n      // load batches\n      const batch = batches[batchIndex];\n      if (bind) {\n        bind(batch);\n      }\n      // yield all indices\n      for (let index = batch.length; --index >= 0;) {\n        next(index, batch);\n      }\n    }\n  }\n  countBy(name) {\n    const batches = this.chunks,\n      numBatches = batches.length;\n    const count_by = typeof name === 'string' ? new Col(name) : name;\n    // Assume that all dictionary batches are deltas, which means that the\n    // last record batch has the most complete dictionary\n    count_by.bind(batches[numBatches - 1]);\n    const vector = count_by.vector;\n    if (!DataType.isDictionary(vector.type)) {\n      throw new Error('countBy currently only supports dictionary-encoded columns');\n    }\n    const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n    const CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n    const counts = new CountsArrayType(vector.dictionary.length);\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      // rebind the countBy Col\n      count_by.bind(batch);\n      const keys = count_by.vector.indices;\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        let key = keys.get(index);\n        if (key !== null) {\n          counts[key]++;\n        }\n      }\n    }\n    return new CountByResult(vector.dictionary, IntVector.from(counts));\n  }\n}\n/** @ignore */\nexport class CountByResult extends Table {\n  constructor(values, counts) {\n    const schema = new Schema([new Field('values', values.type), new Field('counts', counts.type)]);\n    super(new RecordBatch(schema, counts.length, [values, counts]));\n  }\n  toJSON() {\n    const values = this.getColumnAt(0);\n    const counts = this.getColumnAt(1);\n    const result = {};\n    for (let i = -1; ++i < this.length;) {\n      result[values.get(i)] = counts.get(i);\n    }\n    return result;\n  }\n}\n/** @ignore */\nexport class FilteredDataFrame extends DataFrame {\n  constructor(batches, predicate) {\n    super(batches);\n    this._predicate = predicate;\n  }\n  scan(next, bind) {\n    // inlined version of this:\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) next(idx, columns);\n    // });\n    const batches = this._chunks;\n    const numBatches = batches.length;\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      const predicate = this._predicate.bind(batch);\n      let isBound = false;\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          // bind batches lazily - if predicate doesn't match anything\n          // in the batch we don't need to call bind on the batch\n          if (bind && !isBound) {\n            bind(batch);\n            isBound = true;\n          }\n          next(index, batch);\n        }\n      }\n    }\n  }\n  scanReverse(next, bind) {\n    const batches = this._chunks;\n    const numBatches = batches.length;\n    for (let batchIndex = numBatches; --batchIndex >= 0;) {\n      // load batches\n      const batch = batches[batchIndex];\n      const predicate = this._predicate.bind(batch);\n      let isBound = false;\n      // yield all indices\n      for (let index = batch.length; --index >= 0;) {\n        if (predicate(index, batch)) {\n          // bind batches lazily - if predicate doesn't match anything\n          // in the batch we don't need to call bind on the batch\n          if (bind && !isBound) {\n            bind(batch);\n            isBound = true;\n          }\n          next(index, batch);\n        }\n      }\n    }\n  }\n  count() {\n    // inlined version of this:\n    // let sum = 0;\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) ++sum;\n    // });\n    // return sum;\n    let sum = 0;\n    const batches = this._chunks;\n    const numBatches = batches.length;\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      const predicate = this._predicate.bind(batch);\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          ++sum;\n        }\n      }\n    }\n    return sum;\n  }\n  *[Symbol.iterator]() {\n    // inlined version of this:\n    // this.parent.scan((idx, columns) => {\n    //     if (this.predicate(idx, columns)) next(idx, columns);\n    // });\n    const batches = this._chunks;\n    const numBatches = batches.length;\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      // TODO: bind batches lazily\n      // If predicate doesn't match anything in the batch we don't need\n      // to bind the callback\n      const predicate = this._predicate.bind(batch);\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        if (predicate(index, batch)) {\n          yield batch.get(index);\n        }\n      }\n    }\n  }\n  filter(predicate) {\n    return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));\n  }\n  countBy(name) {\n    const batches = this._chunks,\n      numBatches = batches.length;\n    const count_by = typeof name === 'string' ? new Col(name) : name;\n    // Assume that all dictionary batches are deltas, which means that the\n    // last record batch has the most complete dictionary\n    count_by.bind(batches[numBatches - 1]);\n    const vector = count_by.vector;\n    if (!DataType.isDictionary(vector.type)) {\n      throw new Error('countBy currently only supports dictionary-encoded columns');\n    }\n    const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n    const CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;\n    const counts = new CountsArrayType(vector.dictionary.length);\n    for (let batchIndex = -1; ++batchIndex < numBatches;) {\n      // load batches\n      const batch = batches[batchIndex];\n      const predicate = this._predicate.bind(batch);\n      // rebind the countBy Col\n      count_by.bind(batch);\n      const keys = count_by.vector.indices;\n      // yield all indices\n      for (let index = -1, numRows = batch.length; ++index < numRows;) {\n        let key = keys.get(index);\n        if (key !== null && predicate(index, batch)) {\n          counts[key]++;\n        }\n      }\n    }\n    return new CountByResult(vector.dictionary, IntVector.from(counts));\n  }\n}","map":{"version":3,"sources":["compute/dataframe.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}