{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder } from '../builder';\n/** @ignore */\nexport class IntBuilder extends FixedWidthBuilder {\n  setValue(index, value) {\n    this._values.set(index, value);\n  }\n}\n/** @ignore */\nexport class Int8Builder extends IntBuilder {}\n/** @ignore */\nexport class Int16Builder extends IntBuilder {}\n/** @ignore */\nexport class Int32Builder extends IntBuilder {}\n/** @ignore */\nexport class Int64Builder extends IntBuilder {\n  constructor(options) {\n    if (options['nullValues']) {\n      options['nullValues'] = options['nullValues'].map(toBigInt);\n    }\n    super(options);\n    this._values = new WideBufferBuilder(new Int32Array(0), 2);\n  }\n  get values64() {\n    return this._values.buffer64;\n  }\n  isValid(value) {\n    return super.isValid(toBigInt(value));\n  }\n}\n/** @ignore */\nexport class Uint8Builder extends IntBuilder {}\n/** @ignore */\nexport class Uint16Builder extends IntBuilder {}\n/** @ignore */\nexport class Uint32Builder extends IntBuilder {}\n/** @ignore */\nexport class Uint64Builder extends IntBuilder {\n  constructor(options) {\n    if (options['nullValues']) {\n      options['nullValues'] = options['nullValues'].map(toBigInt);\n    }\n    super(options);\n    this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n  }\n  get values64() {\n    return this._values.buffer64;\n  }\n  isValid(value) {\n    return super.isValid(toBigInt(value));\n  }\n}\nconst toBigInt = (memo => value => {\n  if (ArrayBuffer.isView(value)) {\n    memo.buffer = value.buffer;\n    memo.byteOffset = value.byteOffset;\n    memo.byteLength = value.byteLength;\n    value = bignumToBigInt(memo);\n    memo.buffer = null;\n  }\n  return value;\n})({\n  'BigIntArray': BigInt64Array\n});","map":{"version":3,"sources":["builder/int.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAS,cAAc,QAAQ,YAAY;AAC3C,SAAS,iBAAiB,QAAQ,UAAU;AAC5C,SAAS,aAAa,QAAQ,gBAAgB;AAC9C,SAAS,iBAAiB,QAAwB,YAAY;AAG9D;AACA,OAAM,MAAO,UAA6C,SAAQ,iBAA2B,CAAA;EAClF,QAAQ,CAAC,KAAa,EAAE,KAAkB,EAAA;IAC7C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;EAClC;AACH;AAED;AACA,OAAM,MAAO,WAAyB,SAAQ,UAAuB,CAAA;AACrE;AACA,OAAM,MAAO,YAA0B,SAAQ,UAAwB,CAAA;AACvE;AACA,OAAM,MAAO,YAA0B,SAAQ,UAAwB,CAAA;AACvE;AACA,OAAM,MAAO,YAA0B,SAAQ,UAAwB,CAAA;EAEnE,WAAA,CAAY,OAAqC,EAAA;IAC7C,IAAI,OAAO,CAAC,YAAY,CAAC,EAAE;MACvB,OAAO,CAAC,YAAY,CAAC,GAAI,OAAO,CAAC,YAAY,CAAa,CAAC,GAAG,CAAC,QAAQ,CAAC;IAC3E;IACD,KAAK,CAAC,OAAO,CAAC;IACd,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAiB,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC9D;EACA,IAAW,QAAQ,CAAA,EAAA;IAAK,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ;EAAE;EAC/C,OAAO,CAAC,KAAkC,EAAA;IAAI,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;EAAE;AAC/F;AAED;AACA,OAAM,MAAO,YAA0B,SAAQ,UAAwB,CAAA;AACvE;AACA,OAAM,MAAO,aAA2B,SAAQ,UAAyB,CAAA;AACzE;AACA,OAAM,MAAO,aAA2B,SAAQ,UAAyB,CAAA;AACzE;AACA,OAAM,MAAO,aAA2B,SAAQ,UAAyB,CAAA;EAErE,WAAA,CAAY,OAAsC,EAAA;IAC9C,IAAI,OAAO,CAAC,YAAY,CAAC,EAAE;MACvB,OAAO,CAAC,YAAY,CAAC,GAAI,OAAO,CAAC,YAAY,CAAa,CAAC,GAAG,CAAC,QAAQ,CAAC;IAC3E;IACD,KAAK,CAAC,OAAO,CAAC;IACd,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAiB,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/D;EACA,IAAW,QAAQ,CAAA,EAAA;IAAK,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ;EAAE;EAC/C,OAAO,CAAC,KAAmC,EAAA;IAAI,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;EAAE;AAChG;AAED,MAAM,QAAQ,GAAG,CAAE,IAAS,IAAM,KAAU,IAAI;EAC5C,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;IAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM;IAC1B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU;IAClC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU;IAClC,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC;IAC5B,IAAI,CAAC,MAAM,GAAG,IAAI;EACrB;EACD,OAAO,KAAK;AAChB,CAAC,EAAE;EAAE,aAAa,EAAE;AAAa,CAAE,CAAC","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n"]},"metadata":{},"sourceType":"module"}