{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nexport { Builder } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\nimport { Type } from '../enum';\nimport { Utf8Builder } from './utf8';\nimport { Builder } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n/** @nocollapse */\nBuilder.new = newBuilder;\nfunction newBuilder(options) {\n  const type = options.type;\n  const builder = new (getBuilderConstructor.getVisitFn(type)())(options);\n  if (type.children && type.children.length > 0) {\n    const children = options['children'] || [];\n    const defaultOptions = {\n      'nullValues': options['nullValues']\n    };\n    const getChildOptions = Array.isArray(children) ? (_, i) => children[i] || defaultOptions : _ref => {\n      let {\n        name\n      } = _ref;\n      return children[name] || defaultOptions;\n    };\n    type.children.forEach((field, index) => {\n      const {\n        type\n      } = field;\n      const opts = getChildOptions(field, index);\n      builder.children.push(newBuilder({\n        ...opts,\n        type\n      }));\n    });\n  }\n  return builder;\n}\nObject.keys(Type).map(T => Type[T]).filter(T => typeof T === 'number' && T !== Type.NONE).forEach(typeId => {\n  const BuilderCtor = getBuilderConstructor.visit(typeId);\n  BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n});\nUtf8Builder.prototype._setValue = setVisitor.visitBinary;","map":{"version":3,"sources":["builder/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n"]},"metadata":{},"sourceType":"module"}