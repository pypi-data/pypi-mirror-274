{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { toUint8Array } from '../util/buffer';\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n  constructor(buffer, byteLength) {\n    super();\n    this.position = 0;\n    this.buffer = toUint8Array(buffer);\n    this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n  }\n  readInt32(position) {\n    const {\n      buffer,\n      byteOffset\n    } = this.readAt(position, 4);\n    return new DataView(buffer, byteOffset).getInt32(0, true);\n  }\n  seek(position) {\n    this.position = Math.min(position, this.size);\n    return position < this.size;\n  }\n  read(nBytes) {\n    const {\n      buffer,\n      size,\n      position\n    } = this;\n    if (buffer && position < size) {\n      if (typeof nBytes !== 'number') {\n        nBytes = Infinity;\n      }\n      this.position = Math.min(size, position + Math.min(size - position, nBytes));\n      return buffer.subarray(position, this.position);\n    }\n    return null;\n  }\n  readAt(position, nBytes) {\n    const buf = this.buffer;\n    const end = Math.min(this.size, position + nBytes);\n    return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n  }\n  close() {\n    this.buffer && (this.buffer = null);\n  }\n  throw(value) {\n    this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n  return(value) {\n    this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n}\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n  constructor(file, byteLength) {\n    super();\n    this.position = 0;\n    this._handle = file;\n    if (typeof byteLength === 'number') {\n      this.size = byteLength;\n    } else {\n      this._pending = (async () => {\n        this.size = (await file.stat()).size;\n        delete this._pending;\n      })();\n    }\n  }\n  async readInt32(position) {\n    const {\n      buffer,\n      byteOffset\n    } = await this.readAt(position, 4);\n    return new DataView(buffer, byteOffset).getInt32(0, true);\n  }\n  async seek(position) {\n    this._pending && (await this._pending);\n    this.position = Math.min(position, this.size);\n    return position < this.size;\n  }\n  async read(nBytes) {\n    this._pending && (await this._pending);\n    const {\n      _handle: file,\n      size,\n      position\n    } = this;\n    if (file && position < size) {\n      if (typeof nBytes !== 'number') {\n        nBytes = Infinity;\n      }\n      let pos = position,\n        offset = 0,\n        bytesRead = 0;\n      let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n      let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n      while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n        ({\n          bytesRead\n        } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n      }\n      return buffer;\n    }\n    return null;\n  }\n  async readAt(position, nBytes) {\n    this._pending && (await this._pending);\n    const {\n      _handle: file,\n      size\n    } = this;\n    if (file && position + nBytes < size) {\n      const end = Math.min(size, position + nBytes);\n      const buffer = new Uint8Array(end - position);\n      return (await file.read(buffer, 0, nBytes, position)).buffer;\n    }\n    return new Uint8Array(nBytes);\n  }\n  async close() {\n    const f = this._handle;\n    this._handle = null;\n    f && (await f.close());\n  }\n  async throw(value) {\n    await this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n  async return(value) {\n    await this.close();\n    return {\n      done: true,\n      value\n    };\n  }\n}","map":{"version":3,"sources":["io/file.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n"]},"metadata":{},"sourceType":"module"}