{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { vectorFromValuesWithType } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\n/** @ignore */\nexport class IntVector extends BaseVector {\n  /** @nocollapse */\n  static from() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    let [input, is64bit = false] = args;\n    let ArrowType = vectorTypeToDataType(this, is64bit);\n    if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {\n      let InputType = arrayTypeToDataType(input.constructor, is64bit) || ArrowType;\n      // Special case, infer the Arrow DataType from the input if calling the base\n      // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n      if (ArrowType === null) {\n        ArrowType = InputType;\n      }\n      // If the DataType inferred from the Vector constructor matches the\n      // DataType inferred from the input arguments, return zero-copy view\n      if (ArrowType && ArrowType === InputType) {\n        let type = new ArrowType();\n        let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n        // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n        if (convert32To64Bit(ArrowType, input.constructor)) {\n          length *= 0.5;\n        }\n        return Vector.new(Data.Int(type, 0, length, 0, null, input));\n      }\n    }\n    if (ArrowType) {\n      // If the DataType inferred from the Vector constructor is different than\n      // the DataType inferred from the input TypedArray, or if input isn't a\n      // TypedArray, use the Builders to construct the result Vector\n      return vectorFromValuesWithType(() => new ArrowType(), input);\n    }\n    if (input instanceof DataView || input instanceof ArrayBuffer) {\n      throw new TypeError(\"Cannot infer integer type from instance of \".concat(input.constructor.name));\n    }\n    throw new TypeError('Unrecognized IntVector input');\n  }\n}\n/** @ignore */\nexport class Int8Vector extends IntVector {}\n/** @ignore */\nexport class Int16Vector extends IntVector {}\n/** @ignore */\nexport class Int32Vector extends IntVector {}\n/** @ignore */\nexport class Int64Vector extends IntVector {\n  toBigInt64Array() {\n    return toBigInt64Array(this.values);\n  }\n  get values64() {\n    return this._values64 || (this._values64 = this.toBigInt64Array());\n  }\n}\n/** @ignore */\nexport class Uint8Vector extends IntVector {}\n/** @ignore */\nexport class Uint16Vector extends IntVector {}\n/** @ignore */\nexport class Uint32Vector extends IntVector {}\n/** @ignore */\nexport class Uint64Vector extends IntVector {\n  toBigUint64Array() {\n    return toBigUint64Array(this.values);\n  }\n  get values64() {\n    return this._values64 || (this._values64 = this.toBigUint64Array());\n  }\n}\nconst convert32To64Bit = (typeCtor, dataCtor) => {\n  return (typeCtor === Int64 || typeCtor === Uint64) && (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n/** @ignore */\nconst arrayTypeToDataType = (ctor, is64bit) => {\n  switch (ctor) {\n    case Int8Array:\n      return Int8;\n    case Int16Array:\n      return Int16;\n    case Int32Array:\n      return is64bit ? Int64 : Int32;\n    case BigInt64Array:\n      return Int64;\n    case Uint8Array:\n      return Uint8;\n    case Uint16Array:\n      return Uint16;\n    case Uint32Array:\n      return is64bit ? Uint64 : Uint32;\n    case BigUint64Array:\n      return Uint64;\n    default:\n      return null;\n  }\n};\n/** @ignore */\nconst vectorTypeToDataType = (ctor, is64bit) => {\n  switch (ctor) {\n    case Int8Vector:\n      return Int8;\n    case Int16Vector:\n      return Int16;\n    case Int32Vector:\n      return is64bit ? Int64 : Int32;\n    case Int64Vector:\n      return Int64;\n    case Uint8Vector:\n      return Uint8;\n    case Uint16Vector:\n      return Uint16;\n    case Uint32Vector:\n      return is64bit ? Uint64 : Uint32;\n    case Uint64Vector:\n      return Uint64;\n    default:\n      return null;\n  }\n};","map":{"version":3,"sources":["vector/int.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}