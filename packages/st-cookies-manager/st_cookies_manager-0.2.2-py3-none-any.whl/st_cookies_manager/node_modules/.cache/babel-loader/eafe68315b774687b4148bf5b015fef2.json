{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from '../../util/buffer';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n/** @ignore */\nexport function toDOMStream(source, options) {\n  if (isAsyncIterable(source)) {\n    return asyncIterableAsReadableDOMStream(source, options);\n  }\n  if (isIterable(source)) {\n    return iterableAsReadableDOMStream(source, options);\n  }\n  /* istanbul ignore next */\n  throw new Error(\"toDOMStream() must be called with an Iterable or AsyncIterable\");\n}\n/** @ignore */\nfunction iterableAsReadableDOMStream(source, options) {\n  let it = null;\n  const bm = options && options.type === 'bytes' || false;\n  const hwm = options && options.highWaterMark || 2 ** 24;\n  return new ReadableStream({\n    ...options,\n    start(controller) {\n      next(controller, it || (it = source[Symbol.iterator]()));\n    },\n    pull(controller) {\n      it ? next(controller, it) : controller.close();\n    },\n    cancel() {\n      (it && it.return && it.return() || true) && (it = null);\n    }\n  }, {\n    highWaterMark: bm ? hwm : undefined,\n    ...options\n  });\n  function next(controller, it) {\n    let buf;\n    let r = null;\n    let size = controller.desiredSize || null;\n    while (!(r = it.next(bm ? size : null)).done) {\n      if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n        size != null && bm && (size = size - buf.byteLength + 1);\n        r.value = buf;\n      }\n      controller.enqueue(r.value);\n      if (size != null && --size <= 0) {\n        return;\n      }\n    }\n    controller.close();\n  }\n}\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream(source, options) {\n  let it = null;\n  const bm = options && options.type === 'bytes' || false;\n  const hwm = options && options.highWaterMark || 2 ** 24;\n  return new ReadableStream({\n    ...options,\n    async start(controller) {\n      await next(controller, it || (it = source[Symbol.asyncIterator]()));\n    },\n    async pull(controller) {\n      it ? await next(controller, it) : controller.close();\n    },\n    async cancel() {\n      (it && it.return && (await it.return()) || true) && (it = null);\n    }\n  }, {\n    highWaterMark: bm ? hwm : undefined,\n    ...options\n  });\n  async function next(controller, it) {\n    let buf;\n    let r = null;\n    let size = controller.desiredSize || null;\n    while (!(r = await it.next(bm ? size : null)).done) {\n      if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n        size != null && bm && (size = size - buf.byteLength + 1);\n        r.value = buf;\n      }\n      controller.enqueue(r.value);\n      if (size != null && --size <= 0) {\n        return;\n      }\n    }\n    controller.close();\n  }\n}","map":{"version":3,"sources":["io/whatwg/iterable.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAS,YAAY,QAAQ,mBAAmB;AAEhD,SAAS,UAAU,EAAE,eAAe,QAAQ,mBAAmB;AAE/D;AACA,OAAM,SAAU,WAAW,CAAI,MAAsC,EAAE,OAAkC,EAAA;EACrG,IAAI,eAAe,CAAI,MAAM,CAAC,EAAE;IAAE,OAAO,gCAAgC,CAAC,MAAM,EAAE,OAAO,CAAC;EAAG;EAC7F,IAAI,UAAU,CAAI,MAAM,CAAC,EAAE;IAAE,OAAO,2BAA2B,CAAC,MAAM,EAAE,OAAO,CAAC;EAAG;EACnF;EACA,MAAM,IAAI,KAAK,iEAAiE,CAAC;AACrF;AAEA;AACA,SAAS,2BAA2B,CAAI,MAAmB,EAAE,OAAkC,EAAA;EAE3F,IAAI,EAAE,GAAuB,IAAI;EACjC,MAAM,EAAE,GAAI,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,IAAK,KAAK;EACzD,MAAM,GAAG,GAAG,OAAO,IAAI,OAAO,CAAC,aAAa,IAAK,CAAC,IAAI,EAAG;EAEzD,OAAO,IAAI,cAAc,CAAI;IACzB,GAAG,OAAc;IACjB,KAAK,CAAC,UAAU,EAAA;MAAI,IAAI,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA,CAAE,CAAC,CAAC;IAAE,CAAC;IAC/E,IAAI,CAAC,UAAU,EAAA;MAAI,EAAE,GAAI,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,GAAI,UAAU,CAAC,KAAK,CAAA,CAAE;IAAE,CAAC;IACtE,MAAM,CAAA,EAAA;MAAK,CAAC,EAAE,IAAK,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,MAAM,CAAA,CAAG,IAAI,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC;IAAE;GACzE,EAAE;IAAE,aAAa,EAAE,EAAE,GAAG,GAAG,GAAG,SAAS;IAAE,GAAG;EAAO,CAAE,CAAC;EAEvD,SAAS,IAAI,CAAC,UAA8C,EAAE,EAAe,EAAA;IACzE,IAAI,GAAe;IACnB,IAAI,CAAC,GAA6B,IAAI;IACtC,IAAI,IAAI,GAAG,UAAU,CAAC,WAAW,IAAI,IAAI;IACzC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,IAAI,EAAE;MAC1C,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;QAC9D,IAAI,IAAI,IAAI,IAAI,EAAE,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC;QACxD,CAAC,CAAC,KAAK,GAAS,GAAG;MACtB;MACD,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;MAC3B,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,EAAE;QAAE;MAAS;IAC/C;IACD,UAAU,CAAC,KAAK,CAAA,CAAE;EACtB;AACJ;AAEA;AACA,SAAS,gCAAgC,CAAI,MAAwB,EAAE,OAAkC,EAAA;EAErG,IAAI,EAAE,GAA4B,IAAI;EACtC,MAAM,EAAE,GAAI,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,OAAO,IAAK,KAAK;EACzD,MAAM,GAAG,GAAG,OAAO,IAAI,OAAO,CAAC,aAAa,IAAK,CAAC,IAAI,EAAG;EAEzD,OAAO,IAAI,cAAc,CAAI;IACzB,GAAG,OAAc;IACjB,MAAM,KAAK,CAAC,UAAU,EAAA;MAAI,MAAM,IAAI,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAA,CAAE,CAAC,CAAC;IAAE,CAAC;IAChG,MAAM,IAAI,CAAC,UAAU,EAAA;MAAI,EAAE,GAAI,MAAM,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,GAAI,UAAU,CAAC,KAAK,CAAA,CAAE;IAAE,CAAC;IAClF,MAAM,MAAM,CAAA,EAAA;MAAK,CAAC,EAAE,IAAK,EAAE,CAAC,MAAM,KAAI,MAAM,EAAE,CAAC,MAAM,CAAA,CAAE,CAAC,IAAI,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC;IAAE;GACrF,EAAE;IAAE,aAAa,EAAE,EAAE,GAAG,GAAG,GAAG,SAAS;IAAE,GAAG;EAAO,CAAE,CAAC;EAEvD,eAAe,IAAI,CAAC,UAA8C,EAAE,EAAoB,EAAA;IACpF,IAAI,GAAe;IACnB,IAAI,CAAC,GAA6B,IAAI;IACtC,IAAI,IAAI,GAAG,UAAU,CAAC,WAAW,IAAI,IAAI;IACzC,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,IAAI,EAAE;MAChD,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;QAC9D,IAAI,IAAI,IAAI,IAAI,EAAE,KAAK,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC;QACxD,CAAC,CAAC,KAAK,GAAS,GAAG;MACtB;MACD,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;MAC3B,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,EAAE;QAAE;MAAS;IAC/C;IACD,UAAU,CAAC,KAAK,CAAA,CAAE;EACtB;AACJ","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}