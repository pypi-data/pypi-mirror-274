{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { StructVector } from './vector/index';\nexport class RecordBatch extends StructVector {\n  constructor() {\n    let data;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    let schema = args[0];\n    let children;\n    if (args[1] instanceof Data) {\n      [, data, children] = args;\n    } else {\n      const fields = schema.fields;\n      const [, length, childData] = args;\n      data = Data.Struct(new Struct(fields), 0, length, 0, null, childData);\n    }\n    super(data, children);\n    this._schema = schema;\n  }\n  /** @nocollapse */\n  static from(options) {\n    if (isIterable(options['values'])) {\n      return Table.from(options);\n    }\n    return Table.from(options);\n  }\n  /** @nocollapse */\n  static new() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    const [fs, xs] = selectFieldArgs(args);\n    const vs = xs.filter(x => x instanceof Vector);\n    return new RecordBatch(...ensureSameLengthData(new Schema(fs), vs.map(x => x.data)));\n  }\n  clone(data) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._children;\n    return new RecordBatch(this._schema, data, children);\n  }\n  concat() {\n    for (var _len3 = arguments.length, others = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      others[_key3] = arguments[_key3];\n    }\n    const schema = this._schema,\n      chunks = Chunked.flatten(this, ...others);\n    return new Table(schema, chunks.map(_ref => {\n      let {\n        data\n      } = _ref;\n      return new RecordBatch(schema, data);\n    }));\n  }\n  get schema() {\n    return this._schema;\n  }\n  get numCols() {\n    return this._schema.fields.length;\n  }\n  get dictionaries() {\n    return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n  }\n  select() {\n    const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name, i), new Map());\n    for (var _len4 = arguments.length, columnNames = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      columnNames[_key4] = arguments[_key4];\n    }\n    return this.selectAt(...columnNames.map(columnName => nameToIndex.get(columnName)).filter(x => x > -1));\n  }\n  selectAt() {\n    for (var _len5 = arguments.length, columnIndices = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      columnIndices[_key5] = arguments[_key5];\n    }\n    const schema = this._schema.selectAt(...columnIndices);\n    const childData = columnIndices.map(i => this.data.childData[i]).filter(Boolean);\n    return new RecordBatch(schema, this.length, childData);\n  }\n}\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch extends RecordBatch {\n  constructor(schema) {\n    super(schema, 0, schema.fields.map(f => Data.new(f.type, 0, 0, 0)));\n  }\n}\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n  constructor() {\n    super(...arguments);\n    this.dictionaries = new Map();\n  }\n  static collect(batch) {\n    return new DictionaryCollector().visit(batch.data, new Struct(batch.schema.fields)).dictionaries;\n  }\n  visit(data, type) {\n    if (DataType.isDictionary(type)) {\n      return this.visitDictionary(data, type);\n    } else {\n      data.childData.forEach((child, i) => this.visit(child, type.children[i].type));\n    }\n    return this;\n  }\n  visitDictionary(data, type) {\n    const dictionary = data.dictionary;\n    if (dictionary && dictionary.length > 0) {\n      this.dictionaries.set(type.id, dictionary);\n    }\n    return this;\n  }\n}","map":{"version":3,"sources":["recordbatch.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}