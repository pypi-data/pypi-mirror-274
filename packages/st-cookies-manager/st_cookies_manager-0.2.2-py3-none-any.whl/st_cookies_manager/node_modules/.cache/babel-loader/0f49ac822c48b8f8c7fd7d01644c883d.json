{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nexport function getBool(_data, _index, byte, bit) {\n  return (byte & 1 << bit) !== 0;\n}\n/** @ignore */\nexport function getBit(_data, _index, byte, bit) {\n  return (byte & 1 << bit) >> bit;\n}\n/** @ignore */\nexport function setBool(bytes, index, value) {\n  return value ? !!(bytes[index >> 3] |= 1 << index % 8) || true : !(bytes[index >> 3] &= ~(1 << index % 8)) && false;\n}\n/** @ignore */\nexport function truncateBitmap(offset, length, bitmap) {\n  const alignedSize = bitmap.byteLength + 7 & ~7;\n  if (offset > 0 || bitmap.byteLength < alignedSize) {\n    const bytes = new Uint8Array(alignedSize);\n    // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n    bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n    // Otherwise iterate each bit from the offset and return a new one\n    packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n    return bytes;\n  }\n  return bitmap;\n}\n/** @ignore */\nexport function packBools(values) {\n  let xs = [];\n  let i = 0,\n    bit = 0,\n    byte = 0;\n  for (const value of values) {\n    value && (byte |= 1 << bit);\n    if (++bit === 8) {\n      xs[i++] = byte;\n      byte = bit = 0;\n    }\n  }\n  if (i === 0 || bit > 0) {\n    xs[i++] = byte;\n  }\n  let b = new Uint8Array(xs.length + 7 & ~7);\n  b.set(xs);\n  return b;\n}\n/** @ignore */\nexport function* iterateBits(bytes, begin, length, context, get) {\n  let bit = begin % 8;\n  let byteIndex = begin >> 3;\n  let index = 0,\n    remaining = length;\n  for (; remaining > 0; bit = 0) {\n    let byte = bytes[byteIndex++];\n    do {\n      yield get(context, index++, byte, bit);\n    } while (--remaining > 0 && ++bit < 8);\n  }\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data, lhs, rhs) {\n  if (rhs - lhs <= 0) {\n    return 0;\n  }\n  // If the bit range is less than one byte, sum the 1 bits in the bit range\n  if (rhs - lhs < 8) {\n    let sum = 0;\n    for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n      sum += bit;\n    }\n    return sum;\n  }\n  // Get the next lowest multiple of 8 from the right hand side\n  const rhsInside = rhs >> 3 << 3;\n  // Get the next highest multiple of 8 from the left hand side\n  const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n  return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n    // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n    popcnt_bit_range(data, rhsInside, rhs) +\n    // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n    popcnt_array(data, lhsInside >> 3, rhsInside - lhsInside >> 3)\n  );\n}\n/** @ignore */\nexport function popcnt_array(arr, byteOffset, byteLength) {\n  let cnt = 0,\n    pos = byteOffset | 0;\n  const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n  const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n  while (len - pos >= 4) {\n    cnt += popcnt_uint32(view.getUint32(pos));\n    pos += 4;\n  }\n  while (len - pos >= 2) {\n    cnt += popcnt_uint32(view.getUint16(pos));\n    pos += 2;\n  }\n  while (len - pos >= 1) {\n    cnt += popcnt_uint32(view.getUint8(pos));\n    pos += 1;\n  }\n  return cnt;\n}\n/** @ignore */\nexport function popcnt_uint32(uint32) {\n  let i = uint32 | 0;\n  i = i - (i >>> 1 & 0x55555555);\n  i = (i & 0x33333333) + (i >>> 2 & 0x33333333);\n  return (i + (i >>> 4) & 0x0F0F0F0F) * 0x01010101 >>> 24;\n}","map":{"version":3,"sources":["util/bit.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n"]},"metadata":{},"sourceType":"module"}