{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array, joinUint8Arrays, toUint8ArrayIterator, toUint8ArrayAsyncIterator } from '../util/buffer';\n/** @ignore */\nexport default {\n  fromIterable(source) {\n    return pump(fromIterable(source));\n  },\n  fromAsyncIterable(source) {\n    return pump(fromAsyncIterable(source));\n  },\n  fromDOMStream(source) {\n    return pump(fromDOMStream(source));\n  },\n  fromNodeStream(stream) {\n    return pump(fromNodeStream(stream));\n  },\n  // @ts-ignore\n  toDOMStream(source, options) {\n    throw new Error(\"\\\"toDOMStream\\\" not available in this environment\");\n  },\n  // @ts-ignore\n  toNodeStream(source, options) {\n    throw new Error(\"\\\"toNodeStream\\\" not available in this environment\");\n  }\n};\n/** @ignore */\nconst pump = iterator => {\n  iterator.next();\n  return iterator;\n};\n/** @ignore */\nfunction* fromIterable(source) {\n  let done,\n    threw = false;\n  let buffers = [],\n    buffer;\n  let cmd,\n    size,\n    bufferLength = 0;\n  function byteRange() {\n    if (cmd === 'peek') {\n      return joinUint8Arrays(buffers, size)[0];\n    }\n    [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n    return buffer;\n  }\n  // Yield so the caller can inject the read command before creating the source Iterator\n  ({\n    cmd,\n    size\n  } = yield null);\n  // initialize the iterator\n  let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n  try {\n    do {\n      // read the next value\n      ({\n        done,\n        value: buffer\n      } = isNaN(size - bufferLength) ? it.next(undefined) : it.next(size - bufferLength));\n      // if chunk is not null or empty, push it onto the queue\n      if (!done && buffer.byteLength > 0) {\n        buffers.push(buffer);\n        bufferLength += buffer.byteLength;\n      }\n      // If we have enough bytes in our buffer, yield chunks until we don't\n      if (done || size <= bufferLength) {\n        do {\n          ({\n            cmd,\n            size\n          } = yield byteRange());\n        } while (size < bufferLength);\n      }\n    } while (!done);\n  } catch (e) {\n    (threw = true) && typeof it.throw === 'function' && it.throw(e);\n  } finally {\n    threw === false && typeof it.return === 'function' && it.return();\n  }\n}\n/** @ignore */\nasync function* fromAsyncIterable(source) {\n  let done,\n    threw = false;\n  let buffers = [],\n    buffer;\n  let cmd,\n    size,\n    bufferLength = 0;\n  function byteRange() {\n    if (cmd === 'peek') {\n      return joinUint8Arrays(buffers, size)[0];\n    }\n    [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n    return buffer;\n  }\n  // Yield so the caller can inject the read command before creating the source AsyncIterator\n  ({\n    cmd,\n    size\n  } = yield null);\n  // initialize the iterator\n  let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n  try {\n    do {\n      // read the next value\n      ({\n        done,\n        value: buffer\n      } = isNaN(size - bufferLength) ? await it.next(undefined) : await it.next(size - bufferLength));\n      // if chunk is not null or empty, push it onto the queue\n      if (!done && buffer.byteLength > 0) {\n        buffers.push(buffer);\n        bufferLength += buffer.byteLength;\n      }\n      // If we have enough bytes in our buffer, yield chunks until we don't\n      if (done || size <= bufferLength) {\n        do {\n          ({\n            cmd,\n            size\n          } = yield byteRange());\n        } while (size < bufferLength);\n      }\n    } while (!done);\n  } catch (e) {\n    (threw = true) && typeof it.throw === 'function' && (await it.throw(e));\n  } finally {\n    threw === false && typeof it.return === 'function' && (await it.return());\n  }\n}\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream(source) {\n  let done = false,\n    threw = false;\n  let buffers = [],\n    buffer;\n  let cmd,\n    size,\n    bufferLength = 0;\n  function byteRange() {\n    if (cmd === 'peek') {\n      return joinUint8Arrays(buffers, size)[0];\n    }\n    [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n    return buffer;\n  }\n  // Yield so the caller can inject the read command before we establish the ReadableStream lock\n  ({\n    cmd,\n    size\n  } = yield null);\n  // initialize the reader and lock the stream\n  let it = new AdaptiveByteReader(source);\n  try {\n    do {\n      // read the next value\n      ({\n        done,\n        value: buffer\n      } = isNaN(size - bufferLength) ? await it['read'](undefined) : await it['read'](size - bufferLength));\n      // if chunk is not null or empty, push it onto the queue\n      if (!done && buffer.byteLength > 0) {\n        buffers.push(toUint8Array(buffer));\n        bufferLength += buffer.byteLength;\n      }\n      // If we have enough bytes in our buffer, yield chunks until we don't\n      if (done || size <= bufferLength) {\n        do {\n          ({\n            cmd,\n            size\n          } = yield byteRange());\n        } while (size < bufferLength);\n      }\n    } while (!done);\n  } catch (e) {\n    (threw = true) && (await it['cancel'](e));\n  } finally {\n    threw === false ? await it['cancel']() : source['locked'] && it.releaseLock();\n  }\n}\n/** @ignore */\nclass AdaptiveByteReader {\n  constructor(source) {\n    this.source = source;\n    this.byobReader = null;\n    this.defaultReader = null;\n    try {\n      this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n    } catch (e) {\n      this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n    }\n  }\n  get closed() {\n    return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n  }\n  releaseLock() {\n    if (this.reader) {\n      this.reader.releaseLock();\n    }\n    this.reader = this.byobReader = this.defaultReader = null;\n  }\n  async cancel(reason) {\n    const {\n      reader,\n      source\n    } = this;\n    reader && (await reader['cancel'](reason).catch(() => {}));\n    source && source['locked'] && this.releaseLock();\n  }\n  async read(size) {\n    if (size === 0) {\n      return {\n        done: this.reader == null,\n        value: new Uint8Array(0)\n      };\n    }\n    const result = !this.supportsBYOB || typeof size !== 'number' ? await this.getDefaultReader().read() : await this.readFromBYOBReader(size);\n    !result.done && (result.value = toUint8Array(result));\n    return result;\n  }\n  getDefaultReader() {\n    if (this.byobReader) {\n      this.releaseLock();\n    }\n    if (!this.defaultReader) {\n      this.defaultReader = this.source['getReader']();\n      // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n      // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n      // about why these errors are raised, but I'm sure there's some important spec reason that\n      // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n      // only solution in this case :/\n      this.defaultReader['closed'].catch(() => {});\n    }\n    return this.reader = this.defaultReader;\n  }\n  getBYOBReader() {\n    if (this.defaultReader) {\n      this.releaseLock();\n    }\n    if (!this.byobReader) {\n      this.byobReader = this.source['getReader']({\n        mode: 'byob'\n      });\n      // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n      // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n      // about why these errors are raised, but I'm sure there's some important spec reason that\n      // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n      // only solution in this case :/\n      this.byobReader['closed'].catch(() => {});\n    }\n    return this.reader = this.byobReader;\n  }\n  // This strategy plucked from the example in the streams spec:\n  // https://streams.spec.whatwg.org/#example-manual-read-bytes\n  async readFromBYOBReader(size) {\n    return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n  }\n}\n/** @ignore */\nasync function readInto(reader, buffer, offset, size) {\n  if (offset >= size) {\n    return {\n      done: false,\n      value: new Uint8Array(buffer, 0, size)\n    };\n  }\n  const {\n    done,\n    value\n  } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n  if ((offset += value.byteLength) < size && !done) {\n    return await readInto(reader, value.buffer, offset, size);\n  }\n  return {\n    done,\n    value: new Uint8Array(value.buffer, 0, offset)\n  };\n}\n/** @ignore */\nconst onEvent = (stream, event) => {\n  let handler = _ => resolve([event, _]);\n  let resolve;\n  return [event, handler, new Promise(r => (resolve = r) && stream['once'](event, handler))];\n};\n/** @ignore */\nasync function* fromNodeStream(stream) {\n  let events = [];\n  let event = 'error';\n  let done = false,\n    err = null;\n  let cmd,\n    size,\n    bufferLength = 0;\n  let buffers = [],\n    buffer;\n  function byteRange() {\n    if (cmd === 'peek') {\n      return joinUint8Arrays(buffers, size)[0];\n    }\n    [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n    return buffer;\n  }\n  // Yield so the caller can inject the read command before we\n  // add the listener for the source stream's 'readable' event.\n  ({\n    cmd,\n    size\n  } = yield null);\n  // ignore stdin if it's a TTY\n  if (stream['isTTY']) {\n    return yield new Uint8Array(0);\n  }\n  try {\n    // initialize the stream event handlers\n    events[0] = onEvent(stream, 'end');\n    events[1] = onEvent(stream, 'error');\n    do {\n      events[2] = onEvent(stream, 'readable');\n      // wait on the first message event from the stream\n      [event, err] = await Promise.race(events.map(x => x[2]));\n      // if the stream emitted an Error, rethrow it\n      if (event === 'error') {\n        break;\n      }\n      if (!(done = event === 'end')) {\n        // If the size is NaN, request to read everything in the stream's internal buffer\n        if (!isFinite(size - bufferLength)) {\n          buffer = toUint8Array(stream['read'](undefined));\n        } else {\n          buffer = toUint8Array(stream['read'](size - bufferLength));\n          // If the byteLength is 0, then the requested amount is more than the stream has\n          // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n          // continue emitting readable events, so request to read everything the stream\n          // has in its internal buffer right now.\n          if (buffer.byteLength < size - bufferLength) {\n            buffer = toUint8Array(stream['read'](undefined));\n          }\n        }\n        // if chunk is not null or empty, push it onto the queue\n        if (buffer.byteLength > 0) {\n          buffers.push(buffer);\n          bufferLength += buffer.byteLength;\n        }\n      }\n      // If we have enough bytes in our buffer, yield chunks until we don't\n      if (done || size <= bufferLength) {\n        do {\n          ({\n            cmd,\n            size\n          } = yield byteRange());\n        } while (size < bufferLength);\n      }\n    } while (!done);\n  } finally {\n    await cleanup(events, event === 'error' ? err : null);\n  }\n  function cleanup(events, err) {\n    buffer = buffers = null;\n    return new Promise(async (resolve, reject) => {\n      for (const [evt, fn] of events) {\n        stream['off'](evt, fn);\n      }\n      try {\n        // Some stream implementations don't call the destroy callback,\n        // because it's really a node-internal API. Just calling `destroy`\n        // here should be enough to conform to the ReadableStream contract\n        const destroy = stream['destroy'];\n        destroy && destroy.call(stream, err);\n        err = undefined;\n      } catch (e) {\n        err = e || err;\n      } finally {\n        err != null ? reject(err) : resolve();\n      }\n    });\n  }\n}","map":{"version":3,"sources":["io/adapters.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}