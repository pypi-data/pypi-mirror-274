{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from '../enum';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { AbstractVector, Vector } from '../vector';\n/** @ignore */\nexport class BaseVector extends AbstractVector {\n  constructor(data, children) {\n    super();\n    this._children = children;\n    this.numChildren = data.childData.length;\n    this._bindDataAccessors(this.data = data);\n  }\n  get type() {\n    return this.data.type;\n  }\n  get typeId() {\n    return this.data.typeId;\n  }\n  get length() {\n    return this.data.length;\n  }\n  get offset() {\n    return this.data.offset;\n  }\n  get stride() {\n    return this.data.stride;\n  }\n  get nullCount() {\n    return this.data.nullCount;\n  }\n  get byteLength() {\n    return this.data.byteLength;\n  }\n  get VectorName() {\n    return \"\".concat(Type[this.typeId], \"Vector\");\n  }\n  get ArrayType() {\n    return this.type.ArrayType;\n  }\n  get values() {\n    return this.data.values;\n  }\n  get typeIds() {\n    return this.data.typeIds;\n  }\n  get nullBitmap() {\n    return this.data.nullBitmap;\n  }\n  get valueOffsets() {\n    return this.data.valueOffsets;\n  }\n  get [Symbol.toStringTag]() {\n    return \"\".concat(this.VectorName, \"<\").concat(this.type[Symbol.toStringTag], \">\");\n  }\n  clone(data) {\n    let children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._children;\n    return Vector.new(data, children);\n  }\n  concat() {\n    for (var _len = arguments.length, others = new Array(_len), _key = 0; _key < _len; _key++) {\n      others[_key] = arguments[_key];\n    }\n    return Chunked.concat(this, ...others);\n  }\n  slice(begin, end) {\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    return clampRange(this, begin, end, this._sliceInternal);\n  }\n  isValid(index) {\n    if (this.nullCount > 0) {\n      const idx = this.offset + index;\n      const val = this.nullBitmap[idx >> 3];\n      const mask = val & 1 << idx % 8;\n      return mask !== 0;\n    }\n    return true;\n  }\n  getChildAt(index) {\n    return index < 0 || index >= this.numChildren ? null : (this._children || (this._children = []))[index] || (this._children[index] = Vector.new(this.data.childData[index]));\n  }\n  toJSON() {\n    return [...this];\n  }\n  _sliceInternal(self, begin, end) {\n    return self.clone(self.data.slice(begin, end - begin), null);\n  }\n  // @ts-ignore\n  _bindDataAccessors(data) {\n    // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n  }\n}\nBaseVector.prototype[Symbol.isConcatSpreadable] = true;","map":{"version":3,"sources":["vector/base.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n"]},"metadata":{},"sourceType":"module"}