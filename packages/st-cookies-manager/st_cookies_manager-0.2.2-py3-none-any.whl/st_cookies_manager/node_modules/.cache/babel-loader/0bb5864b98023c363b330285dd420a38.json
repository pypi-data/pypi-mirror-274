{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays } from '../util/buffer';\nimport { isPromise, isFetchResponse, isIterable, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\n/** @ignore */\nexport class AsyncByteQueue extends AsyncQueue {\n  write(value) {\n    if ((value = toUint8Array(value)).byteLength > 0) {\n      return super.write(value);\n    }\n  }\n  toString() {\n    let sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return sync ? decodeUtf8(this.toUint8Array(true)) : this.toUint8Array(false).then(decodeUtf8);\n  }\n  toUint8Array() {\n    let sync = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return sync ? joinUint8Arrays(this._values)[0] : (async () => {\n      let buffers = [],\n        byteLength = 0;\n      for await (const chunk of this) {\n        buffers.push(chunk);\n        byteLength += chunk.byteLength;\n      }\n      return joinUint8Arrays(buffers, byteLength)[0];\n    })();\n  }\n}\n/** @ignore */\nexport class ByteStream {\n  constructor(source) {\n    if (source) {\n      this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n    }\n  }\n  [Symbol.iterator]() {\n    return this;\n  }\n  next(value) {\n    return this.source.next(value);\n  }\n  throw(value) {\n    return this.source.throw(value);\n  }\n  return(value) {\n    return this.source.return(value);\n  }\n  peek(size) {\n    return this.source.peek(size);\n  }\n  read(size) {\n    return this.source.read(size);\n  }\n}\n/** @ignore */\nexport class AsyncByteStream {\n  constructor(source) {\n    if (source instanceof AsyncByteStream) {\n      this.source = source.source;\n    } else if (source instanceof AsyncByteQueue) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    } else if (isReadableNodeStream(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n    } else if (isReadableDOMStream(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n    } else if (isFetchResponse(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body));\n    } else if (isIterable(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n    } else if (isPromise(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    } else if (isAsyncIterable(source)) {\n      this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n    }\n  }\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n  next(value) {\n    return this.source.next(value);\n  }\n  throw(value) {\n    return this.source.throw(value);\n  }\n  return(value) {\n    return this.source.return(value);\n  }\n  get closed() {\n    return this.source.closed;\n  }\n  cancel(reason) {\n    return this.source.cancel(reason);\n  }\n  peek(size) {\n    return this.source.peek(size);\n  }\n  read(size) {\n    return this.source.read(size);\n  }\n}\n/** @ignore */\nclass ByteStreamSource {\n  constructor(source) {\n    this.source = source;\n  }\n  cancel(reason) {\n    this.return(reason);\n  }\n  peek(size) {\n    return this.next(size, 'peek').value;\n  }\n  read(size) {\n    return this.next(size, 'read').value;\n  }\n  next(size) {\n    let cmd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'read';\n    return this.source.next({\n      cmd,\n      size\n    });\n  }\n  throw(value) {\n    return Object.create(this.source.throw && this.source.throw(value) || ITERATOR_DONE);\n  }\n  return(value) {\n    return Object.create(this.source.return && this.source.return(value) || ITERATOR_DONE);\n  }\n}\n/** @ignore */\nclass AsyncByteStreamSource {\n  constructor(source) {\n    this.source = source;\n    this._closedPromise = new Promise(r => this._closedPromiseResolve = r);\n  }\n  async cancel(reason) {\n    await this.return(reason);\n  }\n  get closed() {\n    return this._closedPromise;\n  }\n  async read(size) {\n    return (await this.next(size, 'read')).value;\n  }\n  async peek(size) {\n    return (await this.next(size, 'peek')).value;\n  }\n  async next(size) {\n    let cmd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'read';\n    return await this.source.next({\n      cmd,\n      size\n    });\n  }\n  async throw(value) {\n    const result = this.source.throw && (await this.source.throw(value)) || ITERATOR_DONE;\n    this._closedPromiseResolve && this._closedPromiseResolve();\n    this._closedPromiseResolve = undefined;\n    return Object.create(result);\n  }\n  async return(value) {\n    const result = this.source.return && (await this.source.return(value)) || ITERATOR_DONE;\n    this._closedPromiseResolve && this._closedPromiseResolve();\n    this._closedPromiseResolve = undefined;\n    return Object.create(result);\n  }\n}","map":{"version":3,"sources":["io/stream.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}