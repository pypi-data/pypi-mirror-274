{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType } from './type';\nexport class Visitor {\n  visitMany(nodes) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return nodes.map((node, i) => this.visit(node, ...args.map(x => x[i])));\n  }\n  visit() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return this.getVisitFn(args[0], false).apply(this, args);\n  }\n  getVisitFn(node) {\n    let throwIfNotFound = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return getVisitFn(this, node, throwIfNotFound);\n  }\n  visitNull(_node) {\n    return null;\n  }\n  visitBool(_node) {\n    return null;\n  }\n  visitInt(_node) {\n    return null;\n  }\n  visitFloat(_node) {\n    return null;\n  }\n  visitUtf8(_node) {\n    return null;\n  }\n  visitBinary(_node) {\n    return null;\n  }\n  visitFixedSizeBinary(_node) {\n    return null;\n  }\n  visitDate(_node) {\n    return null;\n  }\n  visitTimestamp(_node) {\n    return null;\n  }\n  visitTime(_node) {\n    return null;\n  }\n  visitDecimal(_node) {\n    return null;\n  }\n  visitList(_node) {\n    return null;\n  }\n  visitStruct(_node) {\n    return null;\n  }\n  visitUnion(_node) {\n    return null;\n  }\n  visitDictionary(_node) {\n    return null;\n  }\n  visitInterval(_node) {\n    return null;\n  }\n  visitFixedSizeList(_node) {\n    return null;\n  }\n  visitMap(_node) {\n    return null;\n  }\n}\n/** @ignore */\nfunction getVisitFn(visitor, node) {\n  let throwIfNotFound = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let fn = null;\n  let dtype = Type.NONE;\n  // tslint:disable\n  if (node instanceof Data) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof Vector) {\n    dtype = inferDType(node.type);\n  } else if (node instanceof DataType) {\n    dtype = inferDType(node);\n  } else if (typeof (dtype = node) !== 'number') {\n    dtype = Type[node];\n  }\n  switch (dtype) {\n    case Type.Null:\n      fn = visitor.visitNull;\n      break;\n    case Type.Bool:\n      fn = visitor.visitBool;\n      break;\n    case Type.Int:\n      fn = visitor.visitInt;\n      break;\n    case Type.Int8:\n      fn = visitor.visitInt8 || visitor.visitInt;\n      break;\n    case Type.Int16:\n      fn = visitor.visitInt16 || visitor.visitInt;\n      break;\n    case Type.Int32:\n      fn = visitor.visitInt32 || visitor.visitInt;\n      break;\n    case Type.Int64:\n      fn = visitor.visitInt64 || visitor.visitInt;\n      break;\n    case Type.Uint8:\n      fn = visitor.visitUint8 || visitor.visitInt;\n      break;\n    case Type.Uint16:\n      fn = visitor.visitUint16 || visitor.visitInt;\n      break;\n    case Type.Uint32:\n      fn = visitor.visitUint32 || visitor.visitInt;\n      break;\n    case Type.Uint64:\n      fn = visitor.visitUint64 || visitor.visitInt;\n      break;\n    case Type.Float:\n      fn = visitor.visitFloat;\n      break;\n    case Type.Float16:\n      fn = visitor.visitFloat16 || visitor.visitFloat;\n      break;\n    case Type.Float32:\n      fn = visitor.visitFloat32 || visitor.visitFloat;\n      break;\n    case Type.Float64:\n      fn = visitor.visitFloat64 || visitor.visitFloat;\n      break;\n    case Type.Utf8:\n      fn = visitor.visitUtf8;\n      break;\n    case Type.Binary:\n      fn = visitor.visitBinary;\n      break;\n    case Type.FixedSizeBinary:\n      fn = visitor.visitFixedSizeBinary;\n      break;\n    case Type.Date:\n      fn = visitor.visitDate;\n      break;\n    case Type.DateDay:\n      fn = visitor.visitDateDay || visitor.visitDate;\n      break;\n    case Type.DateMillisecond:\n      fn = visitor.visitDateMillisecond || visitor.visitDate;\n      break;\n    case Type.Timestamp:\n      fn = visitor.visitTimestamp;\n      break;\n    case Type.TimestampSecond:\n      fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMillisecond:\n      fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampMicrosecond:\n      fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n      break;\n    case Type.TimestampNanosecond:\n      fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n      break;\n    case Type.Time:\n      fn = visitor.visitTime;\n      break;\n    case Type.TimeSecond:\n      fn = visitor.visitTimeSecond || visitor.visitTime;\n      break;\n    case Type.TimeMillisecond:\n      fn = visitor.visitTimeMillisecond || visitor.visitTime;\n      break;\n    case Type.TimeMicrosecond:\n      fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n      break;\n    case Type.TimeNanosecond:\n      fn = visitor.visitTimeNanosecond || visitor.visitTime;\n      break;\n    case Type.Decimal:\n      fn = visitor.visitDecimal;\n      break;\n    case Type.List:\n      fn = visitor.visitList;\n      break;\n    case Type.Struct:\n      fn = visitor.visitStruct;\n      break;\n    case Type.Union:\n      fn = visitor.visitUnion;\n      break;\n    case Type.DenseUnion:\n      fn = visitor.visitDenseUnion || visitor.visitUnion;\n      break;\n    case Type.SparseUnion:\n      fn = visitor.visitSparseUnion || visitor.visitUnion;\n      break;\n    case Type.Dictionary:\n      fn = visitor.visitDictionary;\n      break;\n    case Type.Interval:\n      fn = visitor.visitInterval;\n      break;\n    case Type.IntervalDayTime:\n      fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n      break;\n    case Type.IntervalYearMonth:\n      fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n      break;\n    case Type.FixedSizeList:\n      fn = visitor.visitFixedSizeList;\n      break;\n    case Type.Map:\n      fn = visitor.visitMap;\n      break;\n  }\n  if (typeof fn === 'function') return fn;\n  if (!throwIfNotFound) return () => null;\n  throw new Error(\"Unrecognized type '\".concat(Type[dtype], \"'\"));\n}\n/** @ignore */\nfunction inferDType(type) {\n  switch (type.typeId) {\n    case Type.Null:\n      return Type.Null;\n    case Type.Int:\n      const {\n        bitWidth,\n        isSigned\n      } = type;\n      switch (bitWidth) {\n        case 8:\n          return isSigned ? Type.Int8 : Type.Uint8;\n        case 16:\n          return isSigned ? Type.Int16 : Type.Uint16;\n        case 32:\n          return isSigned ? Type.Int32 : Type.Uint32;\n        case 64:\n          return isSigned ? Type.Int64 : Type.Uint64;\n      }\n      return Type.Int;\n    case Type.Float:\n      switch (type.precision) {\n        case Precision.HALF:\n          return Type.Float16;\n        case Precision.SINGLE:\n          return Type.Float32;\n        case Precision.DOUBLE:\n          return Type.Float64;\n      }\n      return Type.Float;\n    case Type.Binary:\n      return Type.Binary;\n    case Type.Utf8:\n      return Type.Utf8;\n    case Type.Bool:\n      return Type.Bool;\n    case Type.Decimal:\n      return Type.Decimal;\n    case Type.Time:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimeSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimeMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimeMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimeNanosecond;\n      }\n      return Type.Time;\n    case Type.Timestamp:\n      switch (type.unit) {\n        case TimeUnit.SECOND:\n          return Type.TimestampSecond;\n        case TimeUnit.MILLISECOND:\n          return Type.TimestampMillisecond;\n        case TimeUnit.MICROSECOND:\n          return Type.TimestampMicrosecond;\n        case TimeUnit.NANOSECOND:\n          return Type.TimestampNanosecond;\n      }\n      return Type.Timestamp;\n    case Type.Date:\n      switch (type.unit) {\n        case DateUnit.DAY:\n          return Type.DateDay;\n        case DateUnit.MILLISECOND:\n          return Type.DateMillisecond;\n      }\n      return Type.Date;\n    case Type.Interval:\n      switch (type.unit) {\n        case IntervalUnit.DAY_TIME:\n          return Type.IntervalDayTime;\n        case IntervalUnit.YEAR_MONTH:\n          return Type.IntervalYearMonth;\n      }\n      return Type.Interval;\n    case Type.Map:\n      return Type.Map;\n    case Type.List:\n      return Type.List;\n    case Type.Struct:\n      return Type.Struct;\n    case Type.Union:\n      switch (type.mode) {\n        case UnionMode.Dense:\n          return Type.DenseUnion;\n        case UnionMode.Sparse:\n          return Type.SparseUnion;\n      }\n      return Type.Union;\n    case Type.FixedSizeBinary:\n      return Type.FixedSizeBinary;\n    case Type.FixedSizeList:\n      return Type.FixedSizeList;\n    case Type.Dictionary:\n      return Type.Dictionary;\n  }\n  throw new Error(\"Unrecognized type '\".concat(Type[type.typeId], \"'\"));\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;","map":{"version":3,"sources":["visitor.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n"]},"metadata":{},"sourceType":"module"}