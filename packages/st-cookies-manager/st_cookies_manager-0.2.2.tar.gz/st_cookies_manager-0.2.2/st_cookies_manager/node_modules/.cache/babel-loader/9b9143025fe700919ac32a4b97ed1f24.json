{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { clampRange } from '../util/vector';\nimport { DataType } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { AbstractVector, Vector } from '../vector';\n/** @ignore */\nexport class Chunked extends AbstractVector {\n  constructor(type) {\n    let chunks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let offsets = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : calculateOffsets(chunks);\n    super();\n    this._nullCount = -1;\n    this._type = type;\n    this._chunks = chunks;\n    this._chunkOffsets = offsets;\n    this._length = offsets[offsets.length - 1];\n    this._numChildren = (this._type.children || []).length;\n  }\n  /** @nocollapse */\n  static flatten() {\n    for (var _len = arguments.length, vectors = new Array(_len), _key = 0; _key < _len; _key++) {\n      vectors[_key] = arguments[_key];\n    }\n    return selectChunkArgs(Vector, vectors);\n  }\n  /** @nocollapse */\n  static concat() {\n    const chunks = Chunked.flatten(...arguments);\n    return new Chunked(chunks[0].type, chunks);\n  }\n  get type() {\n    return this._type;\n  }\n  get length() {\n    return this._length;\n  }\n  get chunks() {\n    return this._chunks;\n  }\n  get typeId() {\n    return this._type.typeId;\n  }\n  get VectorName() {\n    return \"Chunked<\".concat(this._type, \">\");\n  }\n  get data() {\n    return this._chunks[0] ? this._chunks[0].data : null;\n  }\n  get ArrayType() {\n    return this._type.ArrayType;\n  }\n  get numChildren() {\n    return this._numChildren;\n  }\n  get stride() {\n    return this._chunks[0] ? this._chunks[0].stride : 1;\n  }\n  get byteLength() {\n    return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n  }\n  get nullCount() {\n    let nullCount = this._nullCount;\n    if (nullCount < 0) {\n      this._nullCount = nullCount = this._chunks.reduce((x, _ref) => {\n        let {\n          nullCount\n        } = _ref;\n        return x + nullCount;\n      }, 0);\n    }\n    return nullCount;\n  }\n  get indices() {\n    if (DataType.isDictionary(this._type)) {\n      if (!this._indices) {\n        const chunks = this._chunks;\n        this._indices = chunks.length === 1 ? chunks[0].indices : Chunked.concat(...chunks.map(x => x.indices));\n      }\n      return this._indices;\n    }\n    return null;\n  }\n  get dictionary() {\n    if (DataType.isDictionary(this._type)) {\n      return this._chunks[this._chunks.length - 1].data.dictionary;\n    }\n    return null;\n  }\n  *[Symbol.iterator]() {\n    for (const chunk of this._chunks) {\n      yield* chunk;\n    }\n  }\n  clone() {\n    let chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._chunks;\n    return new Chunked(this._type, chunks);\n  }\n  concat() {\n    for (var _len2 = arguments.length, others = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      others[_key2] = arguments[_key2];\n    }\n    return this.clone(Chunked.flatten(this, ...others));\n  }\n  slice(begin, end) {\n    return clampRange(this, begin, end, this._sliceInternal);\n  }\n  getChildAt(index) {\n    if (index < 0 || index >= this._numChildren) {\n      return null;\n    }\n    let columns = this._children || (this._children = []);\n    let child, field, chunks;\n    if (child = columns[index]) {\n      return child;\n    }\n    if (field = (this._type.children || [])[index]) {\n      chunks = this._chunks.map(vector => vector.getChildAt(index)).filter(vec => vec != null);\n      if (chunks.length > 0) {\n        return columns[index] = new Chunked(field.type, chunks);\n      }\n    }\n    return null;\n  }\n  search(index, then) {\n    let idx = index;\n    // binary search to find the child vector and value indices\n    let offsets = this._chunkOffsets,\n      rhs = offsets.length - 1;\n    // return early if out of bounds, or if there's just one child\n    if (idx < 0) {\n      return null;\n    }\n    if (idx >= offsets[rhs]) {\n      return null;\n    }\n    if (rhs <= 1) {\n      return then ? then(this, 0, idx) : [0, idx];\n    }\n    let lhs = 0,\n      pos = 0,\n      mid = 0;\n    do {\n      if (lhs + 1 === rhs) {\n        return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n      }\n      mid = lhs + (rhs - lhs) / 2 | 0;\n      idx >= offsets[mid] ? lhs = mid : rhs = mid;\n    } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n    return null;\n  }\n  isValid(index) {\n    return !!this.search(index, this.isValidInternal);\n  }\n  get(index) {\n    return this.search(index, this.getInternal);\n  }\n  set(index, value) {\n    this.search(index, (_ref2, i, j) => {\n      let {\n        chunks\n      } = _ref2;\n      return chunks[i].set(j, value);\n    });\n  }\n  indexOf(element, offset) {\n    if (offset && typeof offset === 'number') {\n      return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element));\n    }\n    return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n  }\n  toArray() {\n    const {\n      chunks\n    } = this;\n    const n = chunks.length;\n    let ArrayType = this._type.ArrayType;\n    if (n <= 0) {\n      return new ArrayType(0);\n    }\n    if (n <= 1) {\n      return chunks[0].toArray();\n    }\n    let len = 0,\n      src = new Array(n);\n    for (let i = -1; ++i < n;) {\n      len += (src[i] = chunks[i].toArray()).length;\n    }\n    if (ArrayType !== src[0].constructor) {\n      ArrayType = src[0].constructor;\n    }\n    let dst = new ArrayType(len);\n    let set = ArrayType === Array ? arraySet : typedSet;\n    for (let i = -1, idx = 0; ++i < n;) {\n      idx = set(src[i], dst, idx);\n    }\n    return dst;\n  }\n  getInternal(_ref3, i, j) {\n    let {\n      _chunks\n    } = _ref3;\n    return _chunks[i].get(j);\n  }\n  isValidInternal(_ref4, i, j) {\n    let {\n      _chunks\n    } = _ref4;\n    return _chunks[i].isValid(j);\n  }\n  indexOfInternal(_ref5, chunkIndex, fromIndex, element) {\n    let {\n      _chunks\n    } = _ref5;\n    let i = chunkIndex - 1,\n      n = _chunks.length;\n    let start = fromIndex,\n      offset = 0,\n      found = -1;\n    while (++i < n) {\n      if (~(found = _chunks[i].indexOf(element, start))) {\n        return offset + found;\n      }\n      start = 0;\n      offset += _chunks[i].length;\n    }\n    return -1;\n  }\n  _sliceInternal(self, begin, end) {\n    const slices = [];\n    const {\n      chunks,\n      _chunkOffsets: chunkOffsets\n    } = self;\n    for (let i = -1, n = chunks.length; ++i < n;) {\n      const chunk = chunks[i];\n      const chunkLength = chunk.length;\n      const chunkOffset = chunkOffsets[i];\n      // If the child is to the right of the slice boundary, we can stop\n      if (chunkOffset >= end) {\n        break;\n      }\n      // If the child is to the left of of the slice boundary, exclude\n      if (begin >= chunkOffset + chunkLength) {\n        continue;\n      }\n      // If the child is between both left and right boundaries, include w/o slicing\n      if (chunkOffset >= begin && chunkOffset + chunkLength <= end) {\n        slices.push(chunk);\n        continue;\n      }\n      // If the child overlaps one of the slice boundaries, include that slice\n      const from = Math.max(0, begin - chunkOffset);\n      const to = Math.min(end - chunkOffset, chunkLength);\n      slices.push(chunk.slice(from, to));\n    }\n    return self.clone(slices);\n  }\n}\n/** @ignore */\nfunction calculateOffsets(vectors) {\n  let offsets = new Uint32Array((vectors || []).length + 1);\n  let offset = offsets[0] = 0,\n    length = offsets.length;\n  for (let index = 0; ++index < length;) {\n    offsets[index] = offset += vectors[index - 1].length;\n  }\n  return offsets;\n}\n/** @ignore */\nconst typedSet = (src, dst, offset) => {\n  dst.set(src, offset);\n  return offset + src.length;\n};\n/** @ignore */\nconst arraySet = (src, dst, offset) => {\n  let idx = offset;\n  for (let i = -1, n = src.length; ++i < n;) {\n    dst[idx++] = src[i];\n  }\n  return idx;\n};","map":{"version":3,"sources":["vector/chunked.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n"]},"metadata":{},"sourceType":"module"}