{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\nexport class ListBuilder extends VariableWidthBuilder {\n  constructor(opts) {\n    super(opts);\n    this._run = new Run();\n    this._offsets = new OffsetsBufferBuilder();\n  }\n  addChild(child) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n    if (this.numChildren > 0) {\n      throw new Error('ListBuilder can only have one child.');\n    }\n    this.children[this.numChildren] = child;\n    this.type = new List(new Field(name, child.type, true));\n    return this.numChildren - 1;\n  }\n  clear() {\n    this._run.clear();\n    return super.clear();\n  }\n  _flushPending(pending) {\n    const run = this._run;\n    const offsets = this._offsets;\n    const setValue = this._setValue;\n    let index = 0,\n      value;\n    for ([index, value] of pending) {\n      if (value === undefined) {\n        offsets.set(index, 0);\n      } else {\n        offsets.set(index, value.length);\n        setValue(this, index, run.bind(value));\n      }\n    }\n  }\n}","map":{"version":3,"sources":["builder/list.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAS,GAAG,QAAQ,OAAO;AAC3B,SAAS,KAAK,QAAQ,WAAW;AACjC,SAAmB,IAAI,QAAQ,SAAS;AACxC,SAAS,oBAAoB,QAAQ,UAAU;AAC/C,SAAkC,oBAAoB,QAAQ,YAAY;AAE1E;AACA,OAAM,MAAO,WAAmD,SAAQ,oBAAoC,CAAA;EAGxG,WAAA,CAAY,IAAoC,EAAA;IAC5C,KAAK,CAAC,IAAI,CAAC;IAHL,IAAA,CAAA,IAAI,GAAG,IAAI,GAAG,CAAA,CAAY;IAIhC,IAAI,CAAC,QAAQ,GAAG,IAAI,oBAAoB,CAAA,CAAE;EAC9C;EACO,QAAQ,CAAC,KAAiB,EAAY;IAAA,IAAV,IAAI,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,GAAG;IACzC,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE;MACtB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC;IAC1D;IACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,KAAK;IACvC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACvD,OAAO,IAAI,CAAC,WAAW,GAAG,CAAC;EAC/B;EACO,KAAK,CAAA,EAAA;IACR,IAAI,CAAC,IAAI,CAAC,KAAK,CAAA,CAAE;IACjB,OAAO,KAAK,CAAC,KAAK,CAAA,CAAE;EACxB;EACU,aAAa,CAAC,OAA6C,EAAA;IACjE,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI;IACrB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ;IAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS;IAC/B,IAAI,KAAK,GAAG,CAAC;MAAE,KAA6B;IAC5C,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,OAAO,EAAE;MAC5B,IAAI,KAAK,KAAK,SAAS,EAAE;QACrB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;OACxB,MAAM;QACH,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC;QAChC,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;MACzC;IACJ;EACL;AACH","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}