{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DictionaryVector } from '../vector/dictionary';\n/** @ignore */\nexport class Value {\n  eq(other) {\n    if (!(other instanceof Value)) {\n      other = new Literal(other);\n    }\n    return new Equals(this, other);\n  }\n  le(other) {\n    if (!(other instanceof Value)) {\n      other = new Literal(other);\n    }\n    return new LTeq(this, other);\n  }\n  ge(other) {\n    if (!(other instanceof Value)) {\n      other = new Literal(other);\n    }\n    return new GTeq(this, other);\n  }\n  lt(other) {\n    return new Not(this.ge(other));\n  }\n  gt(other) {\n    return new Not(this.le(other));\n  }\n  ne(other) {\n    return new Not(this.eq(other));\n  }\n}\n/** @ignore */\nexport class Literal extends Value {\n  constructor(v) {\n    super();\n    this.v = v;\n  }\n}\n/** @ignore */\nexport class Col extends Value {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n  bind(batch) {\n    if (!this.colidx) {\n      // Assume column index doesn't change between calls to bind\n      //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n      this.colidx = -1;\n      const fields = batch.schema.fields;\n      for (let idx = -1; ++idx < fields.length;) {\n        if (fields[idx].name === this.name) {\n          this.colidx = idx;\n          break;\n        }\n      }\n      if (this.colidx < 0) {\n        throw new Error(\"Failed to bind Col \\\"\".concat(this.name, \"\\\"\"));\n      }\n    }\n    const vec = this.vector = batch.getChildAt(this.colidx);\n    return idx => vec.get(idx);\n  }\n}\n/** @ignore */\nexport class Predicate {\n  and() {\n    for (var _len = arguments.length, expr = new Array(_len), _key = 0; _key < _len; _key++) {\n      expr[_key] = arguments[_key];\n    }\n    return new And(this, ...expr);\n  }\n  or() {\n    for (var _len2 = arguments.length, expr = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      expr[_key2] = arguments[_key2];\n    }\n    return new Or(this, ...expr);\n  }\n  not() {\n    return new Not(this);\n  }\n}\n/** @ignore */\nexport class ComparisonPredicate extends Predicate {\n  constructor(left, right) {\n    super();\n    this.left = left;\n    this.right = right;\n  }\n  bind(batch) {\n    if (this.left instanceof Literal) {\n      if (this.right instanceof Literal) {\n        return this._bindLitLit(batch, this.left, this.right);\n      } else {\n        // right is a Col\n        return this._bindLitCol(batch, this.left, this.right);\n      }\n    } else {\n      // left is a Col\n      if (this.right instanceof Literal) {\n        return this._bindColLit(batch, this.left, this.right);\n      } else {\n        // right is a Col\n        return this._bindColCol(batch, this.left, this.right);\n      }\n    }\n  }\n}\n/** @ignore */\nexport class CombinationPredicate extends Predicate {\n  constructor() {\n    super();\n    for (var _len3 = arguments.length, children = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      children[_key3] = arguments[_key3];\n    }\n    this.children = children;\n  }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\nCombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety\n/** @ignore */\nexport class And extends CombinationPredicate {\n  constructor() {\n    for (var _len4 = arguments.length, children = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      children[_key4] = arguments[_key4];\n    }\n    // Flatten any Ands\n    children = children.reduce((accum, p) => {\n      return accum.concat(p instanceof And ? p.children : p);\n    }, []);\n    super(...children);\n  }\n  bind(batch) {\n    const bound = this.children.map(p => p.bind(batch));\n    return (idx, batch) => bound.every(p => p(idx, batch));\n  }\n}\n/** @ignore */\nexport class Or extends CombinationPredicate {\n  constructor() {\n    for (var _len5 = arguments.length, children = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      children[_key5] = arguments[_key5];\n    }\n    // Flatten any Ors\n    children = children.reduce((accum, p) => {\n      return accum.concat(p instanceof Or ? p.children : p);\n    }, []);\n    super(...children);\n  }\n  bind(batch) {\n    const bound = this.children.map(p => p.bind(batch));\n    return (idx, batch) => bound.some(p => p(idx, batch));\n  }\n}\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n  _bindLitLit(_batch, left, right) {\n    const rtrn = left.v == right.v;\n    return () => rtrn;\n  }\n  _bindColCol(batch, left, right) {\n    const left_func = left.bind(batch);\n    const right_func = right.bind(batch);\n    return (idx, batch) => left_func(idx, batch) == right_func(idx, batch);\n  }\n  _bindColLit(batch, col, lit) {\n    const col_func = col.bind(batch);\n    if (col.vector instanceof DictionaryVector) {\n      let key;\n      const vector = col.vector;\n      if (vector.dictionary !== this.lastDictionary) {\n        key = vector.reverseLookup(lit.v);\n        this.lastDictionary = vector.dictionary;\n        this.lastKey = key;\n      } else {\n        key = this.lastKey;\n      }\n      if (key === -1) {\n        // the value doesn't exist in the dictionary - always return\n        // false\n        // TODO: special-case of PredicateFunc that encapsulates this\n        // \"always false\" behavior. That way filtering operations don't\n        // have to bother checking\n        return () => false;\n      } else {\n        return idx => {\n          return vector.getKey(idx) === key;\n        };\n      }\n    } else {\n      return (idx, cols) => col_func(idx, cols) == lit.v;\n    }\n  }\n  _bindLitCol(batch, lit, col) {\n    // Equals is commutative\n    return this._bindColLit(batch, col, lit);\n  }\n}\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n  _bindLitLit(_batch, left, right) {\n    const rtrn = left.v <= right.v;\n    return () => rtrn;\n  }\n  _bindColCol(batch, left, right) {\n    const left_func = left.bind(batch);\n    const right_func = right.bind(batch);\n    return (idx, cols) => left_func(idx, cols) <= right_func(idx, cols);\n  }\n  _bindColLit(batch, col, lit) {\n    const col_func = col.bind(batch);\n    return (idx, cols) => col_func(idx, cols) <= lit.v;\n  }\n  _bindLitCol(batch, lit, col) {\n    const col_func = col.bind(batch);\n    return (idx, cols) => lit.v <= col_func(idx, cols);\n  }\n}\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n  _bindLitLit(_batch, left, right) {\n    const rtrn = left.v >= right.v;\n    return () => rtrn;\n  }\n  _bindColCol(batch, left, right) {\n    const left_func = left.bind(batch);\n    const right_func = right.bind(batch);\n    return (idx, cols) => left_func(idx, cols) >= right_func(idx, cols);\n  }\n  _bindColLit(batch, col, lit) {\n    const col_func = col.bind(batch);\n    return (idx, cols) => col_func(idx, cols) >= lit.v;\n  }\n  _bindLitCol(batch, lit, col) {\n    const col_func = col.bind(batch);\n    return (idx, cols) => lit.v >= col_func(idx, cols);\n  }\n}\n/** @ignore */\nexport class Not extends Predicate {\n  constructor(child) {\n    super();\n    this.child = child;\n  }\n  bind(batch) {\n    const func = this.child.bind(batch);\n    return (idx, batch) => !func(idx, batch);\n  }\n}\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n  constructor(next, bind_) {\n    super();\n    this.next = next;\n    this.bind_ = bind_;\n  }\n  bind(batch) {\n    this.bind_(batch);\n    return this.next;\n  }\n}\nexport function lit(v) {\n  return new Literal(v);\n}\nexport function col(n) {\n  return new Col(n);\n}\nexport function and() {\n  for (var _len6 = arguments.length, p = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    p[_key6] = arguments[_key6];\n  }\n  return new And(...p);\n}\nexport function or() {\n  for (var _len7 = arguments.length, p = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    p[_key7] = arguments[_key7];\n  }\n  return new Or(...p);\n}\nexport function custom(next, bind) {\n  return new CustomPredicate(next, bind);\n}","map":{"version":3,"sources":["compute/predicate.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n"]},"metadata":{},"sourceType":"module"}