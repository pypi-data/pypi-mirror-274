{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { vectorFromValuesWithType } from './index';\nimport { Float16, Float32, Float64 } from '../type';\n/** @ignore */\nexport class FloatVector extends BaseVector {\n  /** @nocollapse */\n  static from(input) {\n    let ArrowType = vectorTypeToDataType(this);\n    if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {\n      let InputType = arrayTypeToDataType(input.constructor) || ArrowType;\n      // Special case, infer the Arrow DataType from the input if calling the base\n      // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n      if (ArrowType === null) {\n        ArrowType = InputType;\n      }\n      // If the DataType inferred from the Vector constructor matches the\n      // DataType inferred from the input arguments, return zero-copy view\n      if (ArrowType && ArrowType === InputType) {\n        let type = new ArrowType();\n        let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n        // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n        // let the Float16Builder handle casting the input values to Uint16s.\n        if (!convertTo16Bit(ArrowType, input.constructor)) {\n          return Vector.new(Data.Float(type, 0, length, 0, null, input));\n        }\n      }\n    }\n    if (ArrowType) {\n      // If the DataType inferred from the Vector constructor is different than\n      // the DataType inferred from the input TypedArray, or if input isn't a\n      // TypedArray, use the Builders to construct the result Vector\n      return vectorFromValuesWithType(() => new ArrowType(), input);\n    }\n    if (input instanceof DataView || input instanceof ArrayBuffer) {\n      throw new TypeError(\"Cannot infer float type from instance of \".concat(input.constructor.name));\n    }\n    throw new TypeError('Unrecognized FloatVector input');\n  }\n}\n/** @ignore */\nexport class Float16Vector extends FloatVector {\n  // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n  // of the underlying Uint16Array data. This behavior ensures we don't incur\n  // extra compute or copies if you're calling `toArray()` in order to create\n  // a buffer for something like WebGL. Buf if you're using JS and want typed\n  // arrays of 4-to-8-byte precision, these methods will enumerate the values\n  // and clamp to the desired byte lengths.\n  toFloat32Array() {\n    return new Float32Array(this);\n  }\n  toFloat64Array() {\n    return new Float64Array(this);\n  }\n}\n/** @ignore */\nexport class Float32Vector extends FloatVector {}\n/** @ignore */\nexport class Float64Vector extends FloatVector {}\nconst convertTo16Bit = (typeCtor, dataCtor) => {\n  return typeCtor === Float16 && dataCtor !== Uint16Array;\n};\n/** @ignore */\nconst arrayTypeToDataType = ctor => {\n  switch (ctor) {\n    case Uint16Array:\n      return Float16;\n    case Float32Array:\n      return Float32;\n    case Float64Array:\n      return Float64;\n    default:\n      return null;\n  }\n};\n/** @ignore */\nconst vectorTypeToDataType = ctor => {\n  switch (ctor) {\n    case Float16Vector:\n      return Float16;\n    case Float32Vector:\n      return Float32;\n    case Float64Vector:\n      return Float64;\n    default:\n      return null;\n  }\n};","map":{"version":3,"sources":["vector/float.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAS,IAAI,QAAQ,SAAS;AAC9B,SAAS,MAAM,QAAQ,WAAW;AAElC,SAAS,UAAU,QAAQ,QAAQ;AAEnC,SAAS,wBAAwB,QAAQ,SAAS;AAElD,SAAgB,OAAO,EAAE,OAAO,EAAE,OAAO,QAAoB,SAAS;AAqBtE;AACA,OAAM,MAAO,WAAqC,SAAQ,UAAa,CAAA;EAkBnE;EACO,OAAO,IAAI,CAA8D,KAA0B,EAAA;IAEtG,IAAI,SAAS,GAAG,oBAAoB,CAAC,IAAI,CAAC;IAE1C,IAAK,KAAK,YAAY,WAAW,IAAK,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;MAC7D,IAAI,SAAS,GAAG,mBAAmB,CAAC,KAAK,CAAC,WAA6B,CAAC,IAAI,SAAS;MACrF;MACA;MACA,IAAI,SAAS,KAAK,IAAI,EAAE;QACpB,SAAS,GAAG,SAAS;MACxB;MACD;MACA;MACA,IAAI,SAAS,IAAI,SAAS,KAAK,SAAS,EAAE;QACtC,IAAI,IAAI,GAAG,IAAI,SAAS,CAAA,CAAE;QAC1B,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB;QAChE;QACA;QACA,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,WAAW,CAAC,EAAE;UAC/C,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAmB,CAAC,CAAC;QAC/E;MACJ;IACJ;IAED,IAAI,SAAS,EAAE;MACX;MACA;MACA;MACA,OAAO,wBAAwB,CAAC,MAAM,IAAI,SAAU,CAAA,CAAO,EAAE,KAAK,CAAC;IACtE;IAED,IAAK,KAAK,YAAY,QAAQ,IAAM,KAAK,YAAY,WAAY,EAAE;MAC/D,MAAM,IAAI,SAAS,6CAAA,MAAA,CAA6C,KAAK,CAAC,WAAW,CAAC,IAAI,CAAE,CAAC;IAC5F;IAED,MAAM,IAAI,SAAS,CAAC,gCAAgC,CAAC;EACzD;AACH;AAED;AACA,OAAM,MAAO,aAAc,SAAQ,WAAoB,CAAA;EACnD;EACA;EACA;EACA;EACA;EACA;EACO,cAAc,CAAA,EAAA;IAAK,OAAO,IAAI,YAAY,CAAC,IAAwB,CAAC;EAAE;EACtE,cAAc,CAAA,EAAA;IAAK,OAAO,IAAI,YAAY,CAAC,IAAwB,CAAC;EAAE;AAChF;AAED;AACA,OAAM,MAAO,aAAc,SAAQ,WAAoB,CAAA;AACvD;AACA,OAAM,MAAO,aAAc,SAAQ,WAAoB,CAAA;AAEvD,MAAM,cAAc,GAAG,CAAC,QAAa,EAAE,QAAa,KAAI;EACpD,OAAQ,QAAQ,KAAK,OAAO,IAAM,QAAQ,KAAK,WAAY;AAC/D,CAAC;AAED;AACA,MAAM,mBAAmB,GAAI,IAAoB,IAAI;EACjD,QAAQ,IAAI;IACR,KAAK,WAAW;MAAK,OAAO,OAAO;IACnC,KAAK,YAAY;MAAI,OAAO,OAAO;IACnC,KAAK,YAAY;MAAI,OAAO,OAAO;IACnC;MAAS,OAAO,IAAI;EACvB;AACL,CAAC;AAED;AACA,MAAM,oBAAoB,GAAI,IAA6B,IAAI;EAC3D,QAAQ,IAAI;IACR,KAAK,aAAa;MAAE,OAAO,OAAO;IAClC,KAAK,aAAa;MAAE,OAAO,OAAO;IAClC,KAAK,aAAa;MAAE,OAAO,OAAO;IAClC;MAAS,OAAO,IAAI;EACvB;AACL,CAAC","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}