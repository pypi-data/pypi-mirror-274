{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\n/** @ignore */\nexport const ITERATOR_DONE = Object.freeze({\n  done: true,\n  value: void 0\n});\n/** @ignore */\nexport class ArrowJSON {\n  // @ts-ignore\n  constructor(_json) {\n    this._json = _json;\n  }\n  get schema() {\n    return this._json['schema'];\n  }\n  get batches() {\n    return this._json['batches'] || [];\n  }\n  get dictionaries() {\n    return this._json['dictionaries'] || [];\n  }\n}\n/** @ignore */\nexport class ReadableInterop {\n  tee() {\n    return this._getDOMStream().tee();\n  }\n  pipe(writable, options) {\n    return this._getNodeStream().pipe(writable, options);\n  }\n  pipeTo(writable, options) {\n    return this._getDOMStream().pipeTo(writable, options);\n  }\n  pipeThrough(duplex, options) {\n    return this._getDOMStream().pipeThrough(duplex, options);\n  }\n  _getDOMStream() {\n    return this._DOMStream || (this._DOMStream = this.toDOMStream());\n  }\n  _getNodeStream() {\n    return this._nodeStream || (this._nodeStream = this.toNodeStream());\n  }\n}\n/** @ignore */\nexport class AsyncQueue extends ReadableInterop {\n  constructor() {\n    super();\n    this._values = [];\n    this.resolvers = [];\n    this._closedPromise = new Promise(r => this._closedPromiseResolve = r);\n  }\n  get closed() {\n    return this._closedPromise;\n  }\n  async cancel(reason) {\n    await this.return(reason);\n  }\n  write(value) {\n    if (this._ensureOpen()) {\n      this.resolvers.length <= 0 ? this._values.push(value) : this.resolvers.shift().resolve({\n        done: false,\n        value\n      });\n    }\n  }\n  abort(value) {\n    if (this._closedPromiseResolve) {\n      this.resolvers.length <= 0 ? this._error = {\n        error: value\n      } : this.resolvers.shift().reject({\n        done: true,\n        value\n      });\n    }\n  }\n  close() {\n    if (this._closedPromiseResolve) {\n      const {\n        resolvers\n      } = this;\n      while (resolvers.length > 0) {\n        resolvers.shift().resolve(ITERATOR_DONE);\n      }\n      this._closedPromiseResolve();\n      this._closedPromiseResolve = undefined;\n    }\n  }\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n  toDOMStream(options) {\n    return streamAdapters.toDOMStream(this._closedPromiseResolve || this._error ? this : this._values, options);\n  }\n  toNodeStream(options) {\n    return streamAdapters.toNodeStream(this._closedPromiseResolve || this._error ? this : this._values, options);\n  }\n  async throw(_) {\n    await this.abort(_);\n    return ITERATOR_DONE;\n  }\n  async return(_) {\n    await this.close();\n    return ITERATOR_DONE;\n  }\n  async read(size) {\n    return (await this.next(size, 'read')).value;\n  }\n  async peek(size) {\n    return (await this.next(size, 'peek')).value;\n  }\n  next() {\n    if (this._values.length > 0) {\n      return Promise.resolve({\n        done: false,\n        value: this._values.shift()\n      });\n    } else if (this._error) {\n      return Promise.reject({\n        done: true,\n        value: this._error.error\n      });\n    } else if (!this._closedPromiseResolve) {\n      return Promise.resolve(ITERATOR_DONE);\n    } else {\n      return new Promise((resolve, reject) => {\n        this.resolvers.push({\n          resolve,\n          reject\n        });\n      });\n    }\n  }\n  _ensureOpen() {\n    if (this._closedPromiseResolve) {\n      return true;\n    }\n    throw new Error(\"\".concat(this, \" is closed\"));\n  }\n}","map":{"version":3,"sources":["io/interfaces.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}