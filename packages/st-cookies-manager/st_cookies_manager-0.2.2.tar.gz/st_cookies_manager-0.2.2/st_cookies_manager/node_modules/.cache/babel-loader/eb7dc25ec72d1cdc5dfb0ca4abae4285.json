{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len, BPE) => (len * BPE + 63 & ~63 || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = function (arr) {\n  let len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return arr.length >= len ? arr.subarray(0, len) : memcpy(new arr.constructor(len), arr, 0);\n};\n/** @ignore */\nexport class BufferBuilder {\n  constructor(buffer) {\n    let stride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.buffer = buffer;\n    this.stride = stride;\n    this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n    this.ArrayType = buffer.constructor;\n    this._resize(this.length = buffer.length / stride | 0);\n  }\n  get byteLength() {\n    return this.length * this.stride * this.BYTES_PER_ELEMENT | 0;\n  }\n  get reservedLength() {\n    return this.buffer.length / this.stride;\n  }\n  get reservedByteLength() {\n    return this.buffer.byteLength;\n  }\n  // @ts-ignore\n  set(index, value) {\n    return this;\n  }\n  append(value) {\n    return this.set(this.length, value);\n  }\n  reserve(extra) {\n    if (extra > 0) {\n      this.length += extra;\n      const stride = this.stride;\n      const length = this.length * stride;\n      const reserved = this.buffer.length;\n      if (length >= reserved) {\n        this._resize(reserved === 0 ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT) : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT));\n      }\n    }\n    return this;\n  }\n  flush() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;\n    length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n    const array = sliceOrExtendArray(this.buffer, length);\n    this.clear();\n    return array;\n  }\n  clear() {\n    this.length = 0;\n    this._resize(0);\n    return this;\n  }\n  _resize(newLength) {\n    return this.buffer = memcpy(new this.ArrayType(newLength), this.buffer);\n  }\n}\nBufferBuilder.prototype.offset = 0;\n/** @ignore */\nexport class DataBufferBuilder extends BufferBuilder {\n  last() {\n    return this.get(this.length - 1);\n  }\n  get(index) {\n    return this.buffer[index];\n  }\n  set(index, value) {\n    this.reserve(index - this.length + 1);\n    this.buffer[index * this.stride] = value;\n    return this;\n  }\n}\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder {\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Uint8Array(0);\n    super(data, 1 / 8);\n    this.numValid = 0;\n  }\n  get numInvalid() {\n    return this.length - this.numValid;\n  }\n  get(idx) {\n    return this.buffer[idx >> 3] >> idx % 8 & 1;\n  }\n  set(idx, val) {\n    const {\n      buffer\n    } = this.reserve(idx - this.length + 1);\n    const byte = idx >> 3,\n      bit = idx % 8,\n      cur = buffer[byte] >> bit & 1;\n    // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n    // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n    val ? cur === 0 && (buffer[byte] |= 1 << bit, ++this.numValid) : cur === 1 && (buffer[byte] &= ~(1 << bit), --this.numValid);\n    return this;\n  }\n  clear() {\n    this.numValid = 0;\n    return super.clear();\n  }\n}\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder {\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Int32Array(1);\n    super(data, 1);\n  }\n  append(value) {\n    return this.set(this.length - 1, value);\n  }\n  set(index, value) {\n    const offset = this.length - 1;\n    const buffer = this.reserve(index - offset + 1).buffer;\n    if (offset < index++) {\n      buffer.fill(buffer[offset], offset, index);\n    }\n    buffer[index] = buffer[index - 1] + value;\n    return this;\n  }\n  flush() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length - 1;\n    if (length > this.length) {\n      this.set(length - 1, 0);\n    }\n    return super.flush(length + 1);\n  }\n}\n/** @ignore */\nexport class WideBufferBuilder extends BufferBuilder {\n  get ArrayType64() {\n    return this._ArrayType64 || (this._ArrayType64 = this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array);\n  }\n  set(index, value) {\n    this.reserve(index - this.length + 1);\n    switch (typeof value) {\n      case 'bigint':\n        this.buffer64[index] = value;\n        break;\n      case 'number':\n        this.buffer[index * this.stride] = value;\n        break;\n      default:\n        this.buffer.set(value, index * this.stride);\n    }\n    return this;\n  }\n  _resize(newLength) {\n    const data = super._resize(newLength);\n    const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n    if (BigIntAvailable) {\n      this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n    }\n    return data;\n  }\n}","map":{"version":3,"sources":["builder/buffer.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}