{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from './buffer';\nimport { TextDecoder as TextDecoderPolyfill, TextEncoder as TextEncoderPolyfill } from 'text-encoding-utf-8';\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n/** @ignore */\nexport const decodeUtf8 = (TextDecoder => {\n  if (useNativeEncoders || !_Buffer) {\n    const decoder = new TextDecoder('utf-8');\n    return buffer => decoder.decode(buffer);\n  }\n  return input => {\n    const {\n      buffer,\n      byteOffset,\n      length\n    } = toUint8Array(input);\n    return _Buffer.from(buffer, byteOffset, length).toString();\n  };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n/** @ignore */\nexport const encodeUtf8 = (TextEncoder => {\n  if (useNativeEncoders || !_Buffer) {\n    const encoder = new TextEncoder();\n    return value => encoder.encode(value);\n  }\n  return function () {\n    let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return toUint8Array(_Buffer.from(input, 'utf8'));\n  };\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);","map":{"version":3,"sources":["util/utf8.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAS,YAAY,QAAQ,UAAU;AACvC,SACI,WAAW,IAAI,mBAAmB,EAClC,WAAW,IAAI,mBAAmB,QAC/B,qBAAqB;AAE5B;AACA,MAAM,OAAO,GAAG,OAAO,MAAM,KAAK,UAAU,GAAG,MAAM,GAAG,IAAI;AAC5D;AACA,MAAM,iBAAiB,GAAG,OAAO,WAAW,KAAK,UAAU,IAAI,OAAO,WAAW,KAAK,UAAU;AAEhG;AACA,OAAO,MAAM,UAAU,GAAG,CAAE,WAAW,IAAI;EACvC,IAAI,iBAAiB,IAAI,CAAC,OAAO,EAAE;IAC/B,MAAM,OAAO,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC;IACxC,OAAQ,MAAsC,IAAK,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;EAC5E;EACD,OAAQ,KAAwC,IAAI;IAChD,MAAM;MAAE,MAAM;MAAE,UAAU;MAAE;IAAM,CAAE,GAAG,YAAY,CAAC,KAAK,CAAC;IAC1D,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAA,CAAE;EAC9D,CAAC;AACL,CAAC,EAAE,OAAO,WAAW,KAAK,WAAW,GAAG,WAAW,GAAG,mBAAmB,CAAC;AAE1E;AACA,OAAO,MAAM,UAAU,GAAG,CAAE,WAAW,IAAI;EACvC,IAAI,iBAAiB,IAAI,CAAC,OAAO,EAAE;IAC/B,MAAM,OAAO,GAAG,IAAI,WAAW,CAAA,CAAE;IACjC,OAAQ,KAAc,IAAK,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;EACnD;EACD,OAAO;IAAA,IAAC,KAAK,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAG,EAAE;IAAA,OAAK,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;EAAA;AACpE,CAAC,EAAE,OAAO,WAAW,KAAK,WAAW,GAAG,WAAW,GAAG,mBAAmB,CAAC","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n"]},"metadata":{},"sourceType":"module"}