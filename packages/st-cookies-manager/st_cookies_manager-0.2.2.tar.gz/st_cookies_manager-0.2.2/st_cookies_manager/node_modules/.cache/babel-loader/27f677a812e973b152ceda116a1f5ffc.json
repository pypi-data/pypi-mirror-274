{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\nexport class Utf8Builder extends VariableWidthBuilder {\n  constructor(opts) {\n    super(opts);\n    this._values = new BufferBuilder(new Uint8Array(0));\n  }\n  get byteLength() {\n    let size = this._pendingLength + this.length * 4;\n    this._offsets && (size += this._offsets.byteLength);\n    this._values && (size += this._values.byteLength);\n    this._nulls && (size += this._nulls.byteLength);\n    return size;\n  }\n  setValue(index, value) {\n    return super.setValue(index, encodeUtf8(value));\n  }\n  // @ts-ignore\n  _flushPending(pending, pendingLength) {}\n}\nUtf8Builder.prototype._flushPending = BinaryBuilder.prototype._flushPending;","map":{"version":3,"sources":["builder/utf8.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAAS,UAAU,QAAQ,cAAc;AACzC,SAAS,aAAa,QAAQ,UAAU;AACxC,SAAS,aAAa,QAAQ,UAAU;AACxC,SAAS,oBAAoB,QAAwB,YAAY;AAEjE;AACA,OAAM,MAAO,WAAyB,SAAQ,oBAAiC,CAAA;EAC3E,WAAA,CAAY,IAAiC,EAAA;IACzC,KAAK,CAAC,IAAI,CAAC;IACX,IAAI,CAAC,OAAO,GAAG,IAAI,aAAa,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;EACvD;EACA,IAAW,UAAU,CAAA,EAAA;IACjB,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,GAAI,IAAI,CAAC,MAAM,GAAG,CAAE;IAClD,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;IACnD,IAAI,CAAC,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAI,CAAC,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IAC/C,OAAO,IAAI;EACf;EACO,QAAQ,CAAC,KAAa,EAAE,KAAa,EAAA;IACxC,OAAO,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,KAAK,CAAQ,CAAC;EAC1D;EACA;EACU,aAAa,CAAC,OAA4C,EAAE,aAAqB,EAAA,CAAS;AACvG;AAEA,WAAW,CAAC,SAAiB,CAAC,aAAa,GAAI,aAAa,CAAC,SAAiB,CAAC,aAAa","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n"]},"metadata":{},"sourceType":"module"}