{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n/** @ignore */\nconst SharedArrayBuf = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer;\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks) {\n  let result = chunks[0] ? [chunks[0]] : [];\n  let xOffset, yOffset, xLen, yLen;\n  for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n    x = result[j];\n    y = chunks[i];\n    // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n    if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n    ({\n      byteOffset: xOffset,\n      byteLength: xLen\n    } = x);\n    ({\n      byteOffset: yOffset,\n      byteLength: yLen\n    } = y);\n    // continue if the byte ranges of x and y aren't contiguous\n    if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {\n      y && (result[++j] = y);\n      continue;\n    }\n    result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n  }\n  return result;\n}\n/** @ignore */\nexport function memcpy(target, source) {\n  let targetByteOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let sourceByteLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : source.byteLength;\n  const targetByteLength = target.byteLength;\n  const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n  const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n  dst.set(src, targetByteOffset);\n  return target;\n}\n/** @ignore */\nexport function joinUint8Arrays(chunks, size) {\n  // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n  // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n  // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n  let result = collapseContiguousByteRanges(chunks);\n  let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n  let source, sliced, buffer;\n  let offset = 0,\n    index = -1,\n    length = Math.min(size || Infinity, byteLength);\n  for (let n = result.length; ++index < n;) {\n    source = result[index];\n    sliced = source.subarray(0, Math.min(source.length, length - offset));\n    if (length <= offset + sliced.length) {\n      if (sliced.length < source.length) {\n        result[index] = source.subarray(sliced.length);\n      } else if (sliced.length === source.length) {\n        index++;\n      }\n      buffer ? memcpy(buffer, sliced, offset) : buffer = sliced;\n      break;\n    }\n    memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n    offset += sliced.length;\n  }\n  return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\nexport function toArrayBufferView(ArrayBufferViewCtor, input) {\n  let value = isIteratorResult(input) ? input.value : input;\n  if (value instanceof ArrayBufferViewCtor) {\n    if (ArrayBufferViewCtor === Uint8Array) {\n      // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n      // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n      return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n    }\n    return value;\n  }\n  if (!value) {\n    return new ArrayBufferViewCtor(0);\n  }\n  if (typeof value === 'string') {\n    value = encodeUtf8(value);\n  }\n  if (value instanceof ArrayBuffer) {\n    return new ArrayBufferViewCtor(value);\n  }\n  if (value instanceof SharedArrayBuf) {\n    return new ArrayBufferViewCtor(value);\n  }\n  if (value instanceof ByteBuffer) {\n    return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n  }\n  return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n/** @ignore */\nexport const toInt8Array = input => toArrayBufferView(Int8Array, input);\n/** @ignore */\nexport const toInt16Array = input => toArrayBufferView(Int16Array, input);\n/** @ignore */\nexport const toInt32Array = input => toArrayBufferView(Int32Array, input);\n/** @ignore */\nexport const toBigInt64Array = input => toArrayBufferView(BigInt64Array, input);\n/** @ignore */\nexport const toUint8Array = input => toArrayBufferView(Uint8Array, input);\n/** @ignore */\nexport const toUint16Array = input => toArrayBufferView(Uint16Array, input);\n/** @ignore */\nexport const toUint32Array = input => toArrayBufferView(Uint32Array, input);\n/** @ignore */\nexport const toBigUint64Array = input => toArrayBufferView(BigUint64Array, input);\n/** @ignore */\nexport const toFloat32Array = input => toArrayBufferView(Float32Array, input);\n/** @ignore */\nexport const toFloat64Array = input => toArrayBufferView(Float64Array, input);\n/** @ignore */\nexport const toUint8ClampedArray = input => toArrayBufferView(Uint8ClampedArray, input);\n/** @ignore */\nconst pump = iterator => {\n  iterator.next();\n  return iterator;\n};\n/** @ignore */\nexport function* toArrayBufferViewIterator(ArrayCtor, source) {\n  const wrap = function* (x) {\n    yield x;\n  };\n  const buffers = typeof source === 'string' ? wrap(source) : ArrayBuffer.isView(source) ? wrap(source) : source instanceof ArrayBuffer ? wrap(source) : source instanceof SharedArrayBuf ? wrap(source) : !isIterable(source) ? wrap(source) : source;\n  yield* pump(function* (it) {\n    let r = null;\n    do {\n      r = it.next(yield toArrayBufferView(ArrayCtor, r));\n    } while (!r.done);\n  }(buffers[Symbol.iterator]()));\n}\n/** @ignore */\nexport const toInt8ArrayIterator = input => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */\nexport const toInt16ArrayIterator = input => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */\nexport const toInt32ArrayIterator = input => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */\nexport const toUint8ArrayIterator = input => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */\nexport const toUint16ArrayIterator = input => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */\nexport const toUint32ArrayIterator = input => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */\nexport const toFloat32ArrayIterator = input => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */\nexport const toFloat64ArrayIterator = input => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */\nexport const toUint8ClampedArrayIterator = input => toArrayBufferViewIterator(Uint8ClampedArray, input);\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator(ArrayCtor, source) {\n  // if a Promise, unwrap the Promise and iterate the resolved value\n  if (isPromise(source)) {\n    return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n  }\n  const wrap = async function* (x) {\n    yield await x;\n  };\n  const emit = async function* (source) {\n    yield* pump(function* (it) {\n      let r = null;\n      do {\n        r = it.next(yield r && r.value);\n      } while (!r.done);\n    }(source[Symbol.iterator]()));\n  };\n  const buffers = typeof source === 'string' ? wrap(source) // if string, wrap in an AsyncIterableIterator\n  : ArrayBuffer.isView(source) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n  : source instanceof ArrayBuffer ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n  : source instanceof SharedArrayBuf ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n  : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n  : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n  : source; // otherwise if AsyncIterable, use it\n  yield* pump(async function* (it) {\n    let r = null;\n    do {\n      r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n    } while (!r.done);\n  }(buffers[Symbol.asyncIterator]()));\n}\n/** @ignore */\nexport const toInt8ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */\nexport const toInt16ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */\nexport const toInt32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */\nexport const toUint8ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */\nexport const toUint16ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */\nexport const toUint32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */\nexport const toFloat32ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */\nexport const toFloat64ArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */\nexport const toUint8ClampedArrayAsyncIterator = input => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n/** @ignore */\nexport function rebaseValueOffsets(offset, length, valueOffsets) {\n  // If we have a non-zero offset, create a new offsets array with the values\n  // shifted by the start offset, such that the new start offset is 0\n  if (offset !== 0) {\n    valueOffsets = valueOffsets.slice(0, length + 1);\n    for (let i = -1; ++i <= length;) {\n      valueOffsets[i] += offset;\n    }\n  }\n  return valueOffsets;\n}\n/** @ignore */\nexport function compareArrayLike(a, b) {\n  let i = 0,\n    n = a.length;\n  if (n !== b.length) {\n    return false;\n  }\n  if (n > 0) {\n    do {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    } while (++i < n);\n  }\n  return true;\n}","map":{"version":3,"sources":["util/buffer.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"module"}