{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport { strideForType } from './type';\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport class Builder {\n  /**\n   * Construct a builder with the given Arrow DataType with optional null values,\n   * which will be interpreted as \"null\" when set or appended to the `Builder`.\n   * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n   */\n  constructor(_ref) {\n    let {\n      'type': type,\n      'nullValues': nulls\n    } = _ref;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    this.length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    this.finished = false;\n    this.type = type;\n    this.children = [];\n    this.nullValues = nulls;\n    this.stride = strideForType(type);\n    this._nulls = new BitmapBufferBuilder();\n    if (nulls && nulls.length > 0) {\n      this._isValid = createIsValidFunction(nulls);\n    }\n  }\n  /**\n   * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n   * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n   * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n   *\n   * @typeparam T The `DataType` of the `Builder` to create.\n   * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n   * @nocollapse\n   */\n  // @ts-ignore\n  static new(options) {}\n  /** @nocollapse */\n  // @ts-ignore\n  static throughNode(options) {\n    throw new Error(\"\\\"throughNode\\\" not available in this environment\");\n  }\n  /** @nocollapse */\n  // @ts-ignore\n  static throughDOM(options) {\n    throw new Error(\"\\\"throughDOM\\\" not available in this environment\");\n  }\n  /**\n   * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n   * sequence of Arrow Vector<T> following the chunking semantics defined in\n   * the supplied `options` argument.\n   *\n   * This function returns a function that accepts an `Iterable` of values to\n   * transform. When called, this function returns an Iterator of `Vector<T>`.\n   *\n   * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n   * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n   *\n   * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n   *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n   *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n   * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n   *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n   *   reaches or exceeds the supplied `highWaterMark`.\n   *\n   * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n   * @returns A function which accepts a JavaScript `Iterable` of values to\n   *          write, and returns an `Iterator` that yields Vectors according\n   *          to the chunking semantics defined in the `options` argument.\n   * @nocollapse\n   */\n  static throughIterable(options) {\n    return throughIterable(options);\n  }\n  /**\n   * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n   * sequence of Arrow Vector<T> following the chunking semantics defined in\n   * the supplied `options` argument.\n   *\n   * This function returns a function that accepts an `AsyncIterable` of values to\n   * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n   *\n   * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n   * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n   *\n   * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n   *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n   *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n   * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n   *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n   *   reaches or exceeds the supplied `highWaterMark`.\n   *\n   * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n   * @returns A function which accepts a JavaScript `AsyncIterable` of values\n   *          to write, and returns an `AsyncIterator` that yields Vectors\n   *          according to the chunking semantics defined in the `options`\n   *          argument.\n   * @nocollapse\n   */\n  static throughAsyncIterable(options) {\n    return throughAsyncIterable(options);\n  }\n  /**\n   * Flush the `Builder` and return a `Vector<T>`.\n   * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n   */\n  toVector() {\n    return Vector.new(this.flush());\n  }\n  get ArrayType() {\n    return this.type.ArrayType;\n  }\n  get nullCount() {\n    return this._nulls.numInvalid;\n  }\n  get numChildren() {\n    return this.children.length;\n  }\n  /**\n   * @returns The aggregate length (in bytes) of the values that have been written.\n   */\n  get byteLength() {\n    let size = 0;\n    this._offsets && (size += this._offsets.byteLength);\n    this._values && (size += this._values.byteLength);\n    this._nulls && (size += this._nulls.byteLength);\n    this._typeIds && (size += this._typeIds.byteLength);\n    return this.children.reduce((size, child) => size + child.byteLength, size);\n  }\n  /**\n   * @returns The aggregate number of rows that have been reserved to write new values.\n   */\n  get reservedLength() {\n    return this._nulls.reservedLength;\n  }\n  /**\n   * @returns The aggregate length (in bytes) that has been reserved to write new values.\n   */\n  get reservedByteLength() {\n    let size = 0;\n    this._offsets && (size += this._offsets.reservedByteLength);\n    this._values && (size += this._values.reservedByteLength);\n    this._nulls && (size += this._nulls.reservedByteLength);\n    this._typeIds && (size += this._typeIds.reservedByteLength);\n    return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n  }\n  get valueOffsets() {\n    return this._offsets ? this._offsets.buffer : null;\n  }\n  get values() {\n    return this._values ? this._values.buffer : null;\n  }\n  get nullBitmap() {\n    return this._nulls ? this._nulls.buffer : null;\n  }\n  get typeIds() {\n    return this._typeIds ? this._typeIds.buffer : null;\n  }\n  /**\n   * Appends a value (or null) to this `Builder`.\n   * This is equivalent to `builder.set(builder.length, value)`.\n   * @param {T['TValue'] | TNull } value The value to append.\n   */\n  append(value) {\n    return this.set(this.length, value);\n  }\n  /**\n   * Validates whether a value is valid (true), or null (false)\n   * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n   */\n  // @ts-ignore\n  isValid(value) {\n    return this._isValid(value);\n  }\n  /**\n   * Write a value (or null-value sentinel) at the supplied index.\n   * If the value matches one of the null-value representations, a 1-bit is\n   * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n   * the null `BitmapBufferBuilder`, and the value is passed to\n   * `Builder.prototype.setValue()`.\n   * @param {number} index The index of the value to write.\n   * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n   * @returns {this} The updated `Builder` instance.\n   */\n  set(index, value) {\n    if (this.setValid(index, this.isValid(value))) {\n      this.setValue(index, value);\n    }\n    return this;\n  }\n  /**\n   * Write a value to the underlying buffers at the supplied index, bypassing\n   * the null-value check. This is a low-level method that\n   * @param {number} index\n   * @param {T['TValue'] | TNull } value\n   */\n  // @ts-ignore\n  setValue(index, value) {\n    this._setValue(this, index, value);\n  }\n  setValid(index, valid) {\n    this.length = this._nulls.set(index, +valid).length;\n    return valid;\n  }\n  // @ts-ignore\n  addChild(child) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\".concat(this.numChildren);\n    throw new Error(\"Cannot append children to non-nested type \\\"\".concat(this.type, \"\\\"\"));\n  }\n  /**\n   * Retrieve the child `Builder` at the supplied `index`, or null if no child\n   * exists at that index.\n   * @param {number} index The index of the child `Builder` to retrieve.\n   * @returns {Builder | null} The child Builder at the supplied index or null.\n   */\n  getChildAt(index) {\n    return this.children[index] || null;\n  }\n  /**\n   * Commit all the values that have been written to their underlying\n   * ArrayBuffers, including any child Builders if applicable, and reset\n   * the internal `Builder` state.\n   * @returns A `Data<T>` of the buffers and childData representing the values written.\n   */\n  flush() {\n    const buffers = [];\n    const values = this._values;\n    const offsets = this._offsets;\n    const typeIds = this._typeIds;\n    const {\n      length,\n      nullCount\n    } = this;\n    if (typeIds) {\n      /* Unions */\n      buffers[BufferType.TYPE] = typeIds.flush(length);\n      // DenseUnions\n      offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n    } else if (offsets) {\n      /* Variable-width primitives (Binary, Utf8) and Lists */\n      // Binary, Utf8\n      values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n      buffers[BufferType.OFFSET] = offsets.flush(length);\n    } else if (values) {\n      /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n      buffers[BufferType.DATA] = values.flush(length);\n    }\n    nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n    const data = Data.new(this.type, 0, length, nullCount, buffers, this.children.map(child => child.flush()));\n    this.clear();\n    return data;\n  }\n  /**\n   * Finalize this `Builder`, and child builders if applicable.\n   * @returns {this} The finalized `Builder` instance.\n   */\n  finish() {\n    this.finished = true;\n    this.children.forEach(child => child.finish());\n    return this;\n  }\n  /**\n   * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n   * @returns {this} The cleared `Builder` instance.\n   */\n  clear() {\n    this.length = 0;\n    this._offsets && this._offsets.clear();\n    this._values && this._values.clear();\n    this._nulls && this._nulls.clear();\n    this._typeIds && this._typeIds.clear();\n    this.children.forEach(child => child.clear());\n    return this;\n  }\n}\nBuilder.prototype.length = 1;\nBuilder.prototype.stride = 1;\nBuilder.prototype.children = null;\nBuilder.prototype.finished = false;\nBuilder.prototype.nullValues = null;\nBuilder.prototype._isValid = () => true;\n/** @ignore */\nexport class FixedWidthBuilder extends Builder {\n  constructor(opts) {\n    super(opts);\n    this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n  }\n  setValue(index, value) {\n    const values = this._values;\n    values.reserve(index - values.length + 1);\n    return super.setValue(index, value);\n  }\n}\n/** @ignore */\nexport class VariableWidthBuilder extends Builder {\n  constructor(opts) {\n    super(opts);\n    this._pendingLength = 0;\n    this._offsets = new OffsetsBufferBuilder();\n  }\n  setValue(index, value) {\n    const pending = this._pending || (this._pending = new Map());\n    const current = pending.get(index);\n    current && (this._pendingLength -= current.length);\n    this._pendingLength += value.length;\n    pending.set(index, value);\n  }\n  setValid(index, isValid) {\n    if (!super.setValid(index, isValid)) {\n      (this._pending || (this._pending = new Map())).set(index, undefined);\n      return false;\n    }\n    return true;\n  }\n  clear() {\n    this._pendingLength = 0;\n    this._pending = undefined;\n    return super.clear();\n  }\n  flush() {\n    this._flush();\n    return super.flush();\n  }\n  finish() {\n    this._flush();\n    return super.finish();\n  }\n  _flush() {\n    const pending = this._pending;\n    const pendingLength = this._pendingLength;\n    this._pendingLength = 0;\n    this._pending = undefined;\n    if (pending && pending.size > 0) {\n      this._flushPending(pending, pendingLength);\n    }\n    return this;\n  }\n}\n/** @ignore */\nfunction throughIterable(options) {\n  const {\n    ['queueingStrategy']: queueingStrategy = 'count'\n  } = options;\n  const {\n    ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14\n  } = options;\n  const sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n  return function* (source) {\n    let numChunks = 0;\n    let builder = Builder.new(options);\n    for (const value of source) {\n      if (builder.append(value)[sizeProperty] >= highWaterMark) {\n        ++numChunks && (yield builder.toVector());\n      }\n    }\n    if (builder.finish().length > 0 || numChunks === 0) {\n      yield builder.toVector();\n    }\n  };\n}\n/** @ignore */\nfunction throughAsyncIterable(options) {\n  const {\n    ['queueingStrategy']: queueingStrategy = 'count'\n  } = options;\n  const {\n    ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14\n  } = options;\n  const sizeProperty = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n  return async function* (source) {\n    let numChunks = 0;\n    let builder = Builder.new(options);\n    for await (const value of source) {\n      if (builder.append(value)[sizeProperty] >= highWaterMark) {\n        ++numChunks && (yield builder.toVector());\n      }\n    }\n    if (builder.finish().length > 0 || numChunks === 0) {\n      yield builder.toVector();\n    }\n  };\n}","map":{"version":3,"sources":["builder.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughAsyncIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"module"}