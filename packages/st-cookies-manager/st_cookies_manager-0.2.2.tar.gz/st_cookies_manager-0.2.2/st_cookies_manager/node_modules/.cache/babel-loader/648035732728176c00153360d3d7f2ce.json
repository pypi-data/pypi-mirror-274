{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n  visitNull() {\n    return NullVector;\n  }\n  visitBool() {\n    return BoolVector;\n  }\n  visitInt() {\n    return IntVector;\n  }\n  visitInt8() {\n    return Int8Vector;\n  }\n  visitInt16() {\n    return Int16Vector;\n  }\n  visitInt32() {\n    return Int32Vector;\n  }\n  visitInt64() {\n    return Int64Vector;\n  }\n  visitUint8() {\n    return Uint8Vector;\n  }\n  visitUint16() {\n    return Uint16Vector;\n  }\n  visitUint32() {\n    return Uint32Vector;\n  }\n  visitUint64() {\n    return Uint64Vector;\n  }\n  visitFloat() {\n    return FloatVector;\n  }\n  visitFloat16() {\n    return Float16Vector;\n  }\n  visitFloat32() {\n    return Float32Vector;\n  }\n  visitFloat64() {\n    return Float64Vector;\n  }\n  visitUtf8() {\n    return Utf8Vector;\n  }\n  visitBinary() {\n    return BinaryVector;\n  }\n  visitFixedSizeBinary() {\n    return FixedSizeBinaryVector;\n  }\n  visitDate() {\n    return DateVector;\n  }\n  visitDateDay() {\n    return DateDayVector;\n  }\n  visitDateMillisecond() {\n    return DateMillisecondVector;\n  }\n  visitTimestamp() {\n    return TimestampVector;\n  }\n  visitTimestampSecond() {\n    return TimestampSecondVector;\n  }\n  visitTimestampMillisecond() {\n    return TimestampMillisecondVector;\n  }\n  visitTimestampMicrosecond() {\n    return TimestampMicrosecondVector;\n  }\n  visitTimestampNanosecond() {\n    return TimestampNanosecondVector;\n  }\n  visitTime() {\n    return TimeVector;\n  }\n  visitTimeSecond() {\n    return TimeSecondVector;\n  }\n  visitTimeMillisecond() {\n    return TimeMillisecondVector;\n  }\n  visitTimeMicrosecond() {\n    return TimeMicrosecondVector;\n  }\n  visitTimeNanosecond() {\n    return TimeNanosecondVector;\n  }\n  visitDecimal() {\n    return DecimalVector;\n  }\n  visitList() {\n    return ListVector;\n  }\n  visitStruct() {\n    return StructVector;\n  }\n  visitUnion() {\n    return UnionVector;\n  }\n  visitDenseUnion() {\n    return DenseUnionVector;\n  }\n  visitSparseUnion() {\n    return SparseUnionVector;\n  }\n  visitDictionary() {\n    return DictionaryVector;\n  }\n  visitInterval() {\n    return IntervalVector;\n  }\n  visitIntervalDayTime() {\n    return IntervalDayTimeVector;\n  }\n  visitIntervalYearMonth() {\n    return IntervalYearMonthVector;\n  }\n  visitFixedSizeList() {\n    return FixedSizeListVector;\n  }\n  visitMap() {\n    return MapVector;\n  }\n}\n/** @ignore */\nexport const instance = new GetVectorConstructor();","map":{"version":3,"sources":["visitor/vectorctor.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n"]},"metadata":{},"sourceType":"module"}