{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream(writableStrategy, readableStrategy) {\n  const queue = new AsyncByteQueue();\n  let reader = null;\n  const readable = new ReadableStream({\n    async cancel() {\n      await queue.close();\n    },\n    async start(controller) {\n      await next(controller, reader || (reader = await open()));\n    },\n    async pull(controller) {\n      reader ? await next(controller, reader) : controller.close();\n    }\n  });\n  return {\n    writable: new WritableStream(queue, {\n      'highWaterMark': 2 ** 14,\n      ...writableStrategy\n    }),\n    readable\n  };\n  async function open() {\n    return await (await RecordBatchReader.from(queue)).open(readableStrategy);\n  }\n  async function next(controller, reader) {\n    let size = controller.desiredSize;\n    let r = null;\n    while (!(r = await reader.next()).done) {\n      controller.enqueue(r.value);\n      if (size != null && --size <= 0) {\n        return;\n      }\n    }\n    controller.close();\n  }\n}","map":{"version":3,"sources":["io/whatwg/reader.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,SAAS,cAAc,QAAQ,iBAAiB;AAChD,SAAS,iBAAiB,QAAQ,kBAAkB;AAEpD;AACA,OAAM,SAAU,iCAAiC,CAA8C,gBAA4C,EAAE,gBAA2C,EAAA;EAEpL,MAAM,KAAK,GAAG,IAAI,cAAc,CAAA,CAAE;EAClC,IAAI,MAAM,GAAgC,IAAI;EAE9C,MAAM,QAAQ,GAAG,IAAI,cAAc,CAAiB;IAChD,MAAM,MAAM,CAAA,EAAA;MAAK,MAAM,KAAK,CAAC,KAAK,CAAA,CAAE;IAAE,CAAC;IACvC,MAAM,KAAK,CAAC,UAAU,EAAA;MAAI,MAAM,IAAI,CAAC,UAAU,EAAE,MAAM,KAAK,MAAM,GAAG,MAAM,IAAI,CAAA,CAAE,CAAC,CAAC;IAAE,CAAC;IACtF,MAAM,IAAI,CAAC,UAAU,EAAA;MAAI,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,GAAG,UAAU,CAAC,KAAK,CAAA,CAAE;IAAE;GAC1F,CAAC;EAEF,OAAO;IAAE,QAAQ,EAAE,IAAI,cAAc,CAAC,KAAK,EAAE;MAAE,eAAe,EAAE,CAAC,IAAI,EAAE;MAAE,GAAG;IAAgB,CAAE,CAAC;IAAE;EAAQ,CAAE;EAE3G,eAAe,IAAI,CAAA,EAAA;IACf,OAAO,MAAM,CAAC,MAAM,iBAAiB,CAAC,IAAI,CAAI,KAAK,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC;EAChF;EAEA,eAAe,IAAI,CAAC,UAA2D,EAAE,MAA4B,EAAA;IACzG,IAAI,IAAI,GAAG,UAAU,CAAC,WAAW;IACjC,IAAI,CAAC,GAA0C,IAAI;IACnD,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,MAAM,CAAC,IAAI,CAAA,CAAE,EAAE,IAAI,EAAE;MACpC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;MAC3B,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,EAAE;QAC7B;MACH;IACJ;IACD,UAAU,CAAC,KAAK,CAAA,CAAE;EACtB;AACJ","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}