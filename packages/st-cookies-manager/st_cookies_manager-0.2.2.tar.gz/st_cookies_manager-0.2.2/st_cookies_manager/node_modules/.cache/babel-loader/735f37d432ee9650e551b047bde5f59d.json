{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\nexport class BinaryBuilder extends VariableWidthBuilder {\n  constructor(opts) {\n    super(opts);\n    this._values = new BufferBuilder(new Uint8Array(0));\n  }\n  get byteLength() {\n    let size = this._pendingLength + this.length * 4;\n    this._offsets && (size += this._offsets.byteLength);\n    this._values && (size += this._values.byteLength);\n    this._nulls && (size += this._nulls.byteLength);\n    return size;\n  }\n  setValue(index, value) {\n    return super.setValue(index, toUint8Array(value));\n  }\n  _flushPending(pending, pendingLength) {\n    const offsets = this._offsets;\n    const data = this._values.reserve(pendingLength).buffer;\n    let index = 0,\n      length = 0,\n      offset = 0,\n      value;\n    for ([index, value] of pending) {\n      if (value === undefined) {\n        offsets.set(index, 0);\n      } else {\n        length = value.length;\n        data.set(value, offset);\n        offsets.set(index, length);\n        offset += length;\n      }\n    }\n  }\n}","map":{"version":3,"sources":["builder/binary.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,SAAS,YAAY,QAAQ,gBAAgB;AAC7C,SAAS,aAAa,QAAQ,UAAU;AACxC,SAAS,oBAAoB,QAAwB,YAAY;AAEjE;AACA,OAAM,MAAO,aAA2B,SAAQ,oBAAmC,CAAA;EAC/E,WAAA,CAAY,IAAmC,EAAA;IAC3C,KAAK,CAAC,IAAI,CAAC;IACX,IAAI,CAAC,OAAO,GAAG,IAAI,aAAa,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;EACvD;EACA,IAAW,UAAU,CAAA,EAAA;IACjB,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,GAAI,IAAI,CAAC,MAAM,GAAG,CAAE;IAClD,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;IACnD,IAAI,CAAC,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;IACjD,IAAI,CAAC,MAAM,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IAC/C,OAAO,IAAI;EACf;EACO,QAAQ,CAAC,KAAa,EAAE,KAAiB,EAAA;IAC5C,OAAO,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;EACrD;EACU,aAAa,CAAC,OAA4C,EAAE,aAAqB,EAAA;IACvF,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ;IAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,MAAM;IACvD,IAAI,KAAK,GAAG,CAAC;MAAE,MAAM,GAAG,CAAC;MAAE,MAAM,GAAG,CAAC;MAAE,KAA6B;IACpE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,OAAO,EAAE;MAC5B,IAAI,KAAK,KAAK,SAAS,EAAE;QACrB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;OACxB,MAAM;QACH,MAAM,GAAG,KAAK,CAAC,MAAM;QACrB,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;QACvB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;QAC1B,MAAM,IAAI,MAAM;MACnB;IACJ;EACL;AACH","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}