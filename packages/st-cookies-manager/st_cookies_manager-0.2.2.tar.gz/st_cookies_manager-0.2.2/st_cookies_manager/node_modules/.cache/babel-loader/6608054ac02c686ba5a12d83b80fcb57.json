{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema';\nimport { Map_ } from '../type';\nimport { VariableWidthBuilder } from '../builder';\n/** @ignore */\nexport class MapBuilder extends VariableWidthBuilder {\n  set(index, value) {\n    return super.set(index, value);\n  }\n  setValue(index, value) {\n    value = value instanceof Map ? value : new Map(Object.entries(value));\n    const pending = this._pending || (this._pending = new Map());\n    const current = pending.get(index);\n    current && (this._pendingLength -= current.size);\n    this._pendingLength += value.size;\n    pending.set(index, value);\n  }\n  addChild(child) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\".concat(this.numChildren);\n    if (this.numChildren > 0) {\n      throw new Error('ListBuilder can only have one child.');\n    }\n    this.children[this.numChildren] = child;\n    this.type = new Map_(new Field(name, child.type, true), this.type.keysSorted);\n    return this.numChildren - 1;\n  }\n  _flushPending(pending) {\n    const offsets = this._offsets;\n    const setValue = this._setValue;\n    pending.forEach((value, index) => {\n      if (value === undefined) {\n        offsets.set(index, 0);\n      } else {\n        offsets.set(index, value.size);\n        setValue(this, index, value);\n      }\n    });\n  }\n}","map":{"version":3,"sources":["builder/map.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAS,KAAK,QAAQ,WAAW;AACjC,SAAmB,IAAI,QAAgB,SAAS;AAChD,SAAkB,oBAAoB,QAAQ,YAAY;AAM1D;AACA,OAAM,MAAO,UAA4E,SAAQ,oBAAuC,CAAA;EAG7H,GAAG,CAAC,KAAa,EAAE,KAAgC,EAAA;IACtD,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,KAA+B,CAAC;EAC5D;EAEO,QAAQ,CAAC,KAAa,EAAE,KAAwB,EAAA;IACnD,KAAK,GAAG,KAAK,YAAY,GAAG,GAAG,KAAK,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACrE,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAA,CAAqB,CAAC;IAC/E,MAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;IAClC,OAAO,KAAK,IAAI,CAAC,cAAc,IAAI,OAAO,CAAC,IAAI,CAAC;IAChD,IAAI,CAAC,cAAc,IAAI,KAAK,CAAC,IAAI;IACjC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;EAC7B;EAEO,QAAQ,CAAC,KAA4C,EAA8B;IAAA,IAA5B,IAAI,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,SAAA,MAAA,CAAM,IAAI,CAAC,WAAW;IACpF,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE;MACtB,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC;IAC1D;IACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,KAAK;IACvC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAO,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;IACnF,OAAO,IAAI,CAAC,WAAW,GAAG,CAAC;EAC/B;EAEU,aAAa,CAAC,OAAwB,EAAA;IAC5C,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ;IAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS;IAC/B,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,KAAI;MAC7B,IAAI,KAAK,KAAK,SAAS,EAAE;QACrB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC;OACxB,MAAM;QACH,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC;QAC9B,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;MAC/B;IACL,CAAC,CAAC;EACN;AACH","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}