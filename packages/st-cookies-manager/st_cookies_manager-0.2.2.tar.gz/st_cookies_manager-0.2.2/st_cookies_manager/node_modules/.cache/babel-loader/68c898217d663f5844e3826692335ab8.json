{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nconst carryBit16 = 1 << 16;\n/** @ignore */\nfunction intAsHex(value) {\n  if (value < 0) {\n    value = 0xFFFFFFFF + value + 1;\n  }\n  return \"0x\".concat(value.toString(16));\n}\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];\n/** @ignore */\nexport class BaseInt64 {\n  constructor(buffer) {\n    this.buffer = buffer;\n  }\n  high() {\n    return this.buffer[1];\n  }\n  low() {\n    return this.buffer[0];\n  }\n  _times(other) {\n    // Break the left and right numbers into 16 bit chunks\n    // so that we can multiply them without overflow.\n    const L = new Uint32Array([this.buffer[1] >>> 16, this.buffer[1] & 0xFFFF, this.buffer[0] >>> 16, this.buffer[0] & 0xFFFF]);\n    const R = new Uint32Array([other.buffer[1] >>> 16, other.buffer[1] & 0xFFFF, other.buffer[0] >>> 16, other.buffer[0] & 0xFFFF]);\n    let product = L[3] * R[3];\n    this.buffer[0] = product & 0xFFFF;\n    let sum = product >>> 16;\n    product = L[2] * R[3];\n    sum += product;\n    product = L[3] * R[2] >>> 0;\n    sum += product;\n    this.buffer[0] += sum << 16;\n    this.buffer[1] = sum >>> 0 < product ? carryBit16 : 0;\n    this.buffer[1] += sum >>> 16;\n    this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n    this.buffer[1] += L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0] << 16;\n    return this;\n  }\n  _plus(other) {\n    const sum = this.buffer[0] + other.buffer[0] >>> 0;\n    this.buffer[1] += other.buffer[1];\n    if (sum < this.buffer[0] >>> 0) {\n      ++this.buffer[1];\n    }\n    this.buffer[0] = sum;\n  }\n  lessThan(other) {\n    return this.buffer[1] < other.buffer[1] || this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0];\n  }\n  equals(other) {\n    return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n  }\n  greaterThan(other) {\n    return other.lessThan(this);\n  }\n  hex() {\n    return \"\".concat(intAsHex(this.buffer[1]), \" \").concat(intAsHex(this.buffer[0]));\n  }\n}\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n  times(other) {\n    this._times(other);\n    return this;\n  }\n  plus(other) {\n    this._plus(other);\n    return this;\n  }\n  /** @nocollapse */\n  static from(val) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    return Uint64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromNumber(num) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    // Always parse numbers as strings - pulling out high and low bits\n    // directly seems to lose precision sometimes\n    // For example:\n    //     > -4613034156400212000 >>> 0\n    //     721782784\n    // The correct lower 32-bits are 721782752\n    return Uint64.fromString(num.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromString(str) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    const length = str.length;\n    let out = new Uint64(out_buffer);\n    for (let posn = 0; posn < length;) {\n      const group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n      const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n      const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n      out.times(multiple);\n      out.plus(chunk);\n      posn += group;\n    }\n    return out;\n  }\n  /** @nocollapse */\n  static convertArray(values) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n      Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data;\n  }\n  /** @nocollapse */\n  static multiply(left, right) {\n    let rtrn = new Uint64(new Uint32Array(left.buffer));\n    return rtrn.times(right);\n  }\n  /** @nocollapse */\n  static add(left, right) {\n    let rtrn = new Uint64(new Uint32Array(left.buffer));\n    return rtrn.plus(right);\n  }\n}\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n  negate() {\n    this.buffer[0] = ~this.buffer[0] + 1;\n    this.buffer[1] = ~this.buffer[1];\n    if (this.buffer[0] == 0) {\n      ++this.buffer[1];\n    }\n    return this;\n  }\n  times(other) {\n    this._times(other);\n    return this;\n  }\n  plus(other) {\n    this._plus(other);\n    return this;\n  }\n  lessThan(other) {\n    // force high bytes to be signed\n    const this_high = this.buffer[1] << 0;\n    const other_high = other.buffer[1] << 0;\n    return this_high < other_high || this_high === other_high && this.buffer[0] < other.buffer[0];\n  }\n  /** @nocollapse */\n  static from(val) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    return Int64.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromNumber(num) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    // Always parse numbers as strings - pulling out high and low bits\n    // directly seems to lose precision sometimes\n    // For example:\n    //     > -4613034156400212000 >>> 0\n    //     721782784\n    // The correct lower 32-bits are 721782752\n    return Int64.fromString(num.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromString(str) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(2);\n    // TODO: Assert that out_buffer is 0 and length = 2\n    const negate = str.startsWith('-');\n    const length = str.length;\n    let out = new Int64(out_buffer);\n    for (let posn = negate ? 1 : 0; posn < length;) {\n      const group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n      const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n      const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n      out.times(multiple);\n      out.plus(chunk);\n      posn += group;\n    }\n    return negate ? out.negate() : out;\n  }\n  /** @nocollapse */\n  static convertArray(values) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n      Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data;\n  }\n  /** @nocollapse */\n  static multiply(left, right) {\n    let rtrn = new Int64(new Uint32Array(left.buffer));\n    return rtrn.times(right);\n  }\n  /** @nocollapse */\n  static add(left, right) {\n    let rtrn = new Int64(new Uint32Array(left.buffer));\n    return rtrn.plus(right);\n  }\n}\n/** @ignore */\nexport class Int128 {\n  constructor(buffer) {\n    this.buffer = buffer;\n    // buffer[3] MSB (high)\n    // buffer[2]\n    // buffer[1]\n    // buffer[0] LSB (low)\n  }\n  high() {\n    return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n  }\n  low() {\n    return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n  }\n  negate() {\n    this.buffer[0] = ~this.buffer[0] + 1;\n    this.buffer[1] = ~this.buffer[1];\n    this.buffer[2] = ~this.buffer[2];\n    this.buffer[3] = ~this.buffer[3];\n    if (this.buffer[0] == 0) {\n      ++this.buffer[1];\n    }\n    if (this.buffer[1] == 0) {\n      ++this.buffer[2];\n    }\n    if (this.buffer[2] == 0) {\n      ++this.buffer[3];\n    }\n    return this;\n  }\n  times(other) {\n    // Break the left and right numbers into 32 bit chunks\n    // so that we can multiply them without overflow.\n    const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n    const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n    const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n    const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n    const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n    const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n    const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n    const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n    let product = Uint64.multiply(L3, R3);\n    this.buffer[0] = product.low();\n    let sum = new Uint64(new Uint32Array([product.high(), 0]));\n    product = Uint64.multiply(L2, R3);\n    sum.plus(product);\n    product = Uint64.multiply(L3, R2);\n    sum.plus(product);\n    this.buffer[1] = sum.low();\n    this.buffer[3] = sum.lessThan(product) ? 1 : 0;\n    this.buffer[2] = sum.high();\n    let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    high.plus(Uint64.multiply(L1, R3)).plus(Uint64.multiply(L2, R2)).plus(Uint64.multiply(L3, R1));\n    this.buffer[3] += Uint64.multiply(L0, R3).plus(Uint64.multiply(L1, R2)).plus(Uint64.multiply(L2, R1)).plus(Uint64.multiply(L3, R0)).low();\n    return this;\n  }\n  plus(other) {\n    let sums = new Uint32Array(4);\n    sums[3] = this.buffer[3] + other.buffer[3] >>> 0;\n    sums[2] = this.buffer[2] + other.buffer[2] >>> 0;\n    sums[1] = this.buffer[1] + other.buffer[1] >>> 0;\n    sums[0] = this.buffer[0] + other.buffer[0] >>> 0;\n    if (sums[0] < this.buffer[0] >>> 0) {\n      ++sums[1];\n    }\n    if (sums[1] < this.buffer[1] >>> 0) {\n      ++sums[2];\n    }\n    if (sums[2] < this.buffer[2] >>> 0) {\n      ++sums[3];\n    }\n    this.buffer[3] = sums[3];\n    this.buffer[2] = sums[2];\n    this.buffer[1] = sums[1];\n    this.buffer[0] = sums[0];\n    return this;\n  }\n  hex() {\n    return \"\".concat(intAsHex(this.buffer[3]), \" \").concat(intAsHex(this.buffer[2]), \" \").concat(intAsHex(this.buffer[1]), \" \").concat(intAsHex(this.buffer[0]));\n  }\n  /** @nocollapse */\n  static multiply(left, right) {\n    let rtrn = new Int128(new Uint32Array(left.buffer));\n    return rtrn.times(right);\n  }\n  /** @nocollapse */\n  static add(left, right) {\n    let rtrn = new Int128(new Uint32Array(left.buffer));\n    return rtrn.plus(right);\n  }\n  /** @nocollapse */\n  static from(val) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n    return Int128.fromString(typeof val === 'string' ? val : val.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromNumber(num) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n    // Always parse numbers as strings - pulling out high and low bits\n    // directly seems to lose precision sometimes\n    // For example:\n    //     > -4613034156400212000 >>> 0\n    //     721782784\n    // The correct lower 32-bits are 721782752\n    return Int128.fromString(num.toString(), out_buffer);\n  }\n  /** @nocollapse */\n  static fromString(str) {\n    let out_buffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Uint32Array(4);\n    // TODO: Assert that out_buffer is 0 and length = 4\n    const negate = str.startsWith('-');\n    const length = str.length;\n    let out = new Int128(out_buffer);\n    for (let posn = negate ? 1 : 0; posn < length;) {\n      const group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;\n      const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n      const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n      out.times(multiple);\n      out.plus(chunk);\n      posn += group;\n    }\n    return negate ? out.negate() : out;\n  }\n  /** @nocollapse */\n  static convertArray(values) {\n    // TODO: Distinguish between string and number at compile-time\n    const data = new Uint32Array(values.length * 4);\n    for (let i = -1, n = values.length; ++i < n;) {\n      Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n    }\n    return data;\n  }\n}","map":{"version":3,"sources":["util/int.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}