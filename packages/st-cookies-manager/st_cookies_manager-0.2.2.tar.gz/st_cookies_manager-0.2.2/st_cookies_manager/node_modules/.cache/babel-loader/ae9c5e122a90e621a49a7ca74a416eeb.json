{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\nimport * as fn from '../util/fn';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder } from '../builder';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n/** @nocollapse */\nVector.new = newVector;\n/** @nocollapse */\nVector.from = vectorFrom;\n/** @ignore */\nfunction newVector(data) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  return new (getVectorConstructor.getVisitFn(data)())(data, ...args);\n}\n/** @ignore */\nexport function vectorFromValuesWithType(newDataType, input) {\n  if (isIterable(input)) {\n    return Vector.from({\n      'nullValues': [null, undefined],\n      type: newDataType(),\n      'values': input\n    });\n  } else if (isAsyncIterable(input)) {\n    return Vector.from({\n      'nullValues': [null, undefined],\n      type: newDataType(),\n      'values': input\n    });\n  }\n  const {\n    'values': values = [],\n    'type': type = newDataType(),\n    'nullValues': nullValues = [null, undefined]\n  } = {\n    ...input\n  };\n  return isIterable(values) ? Vector.from({\n    nullValues,\n    ...input,\n    type\n  }) : Vector.from({\n    nullValues,\n    ...input,\n    type\n  });\n}\nfunction vectorFrom(input) {\n  const {\n    'values': values = [],\n    ...options\n  } = {\n    'nullValues': [null, undefined],\n    ...input\n  };\n  if (isIterable(values)) {\n    const chunks = [...Builder.throughIterable(options)(values)];\n    return chunks.length === 1 ? chunks[0] : Chunked.concat(chunks);\n  }\n  return (async chunks => {\n    const transform = Builder.throughAsyncIterable(options);\n    for await (const chunk of transform(values)) {\n      chunks.push(chunk);\n    }\n    return chunks.length === 1 ? chunks[0] : Chunked.concat(chunks);\n  })([]);\n}\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\nBaseVector.prototype.get = function baseVectorGet(index) {\n  return getVisitor.visit(this, index);\n};\nBaseVector.prototype.set = function baseVectorSet(index, value) {\n  return setVisitor.visit(this, index, value);\n};\nBaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {\n  return indexOfVisitor.visit(this, value, fromIndex);\n};\nBaseVector.prototype.toArray = function baseVectorToArray() {\n  return toArrayVisitor.visit(this);\n};\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {\n  return byteWidthVisitor.visit(this.type);\n};\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {\n  return iteratorVisitor.visit(this);\n};\nBaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors;\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\nObject.keys(Type).map(T => Type[T]).filter(T => typeof T === 'number').filter(typeId => typeId !== Type.NONE).forEach(typeId => {\n  const VectorCtor = getVectorConstructor.visit(typeId);\n  VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n  VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n  VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n});\n/** @ignore */\nfunction partialType0(visit) {\n  return function () {\n    return visit(this.type);\n  };\n}\n/** @ignore */\nfunction wrapNullableGet(fn) {\n  return function (i) {\n    return this.isValid(i) ? fn.call(this, i) : null;\n  };\n}\n/** @ignore */\nfunction wrapNullableSet(fn) {\n  return function (i, a) {\n    if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n      fn.call(this, i, a);\n    }\n  };\n}\n/** @ignore */\nfunction bindBaseVectorDataAccessors() {\n  const nullBitmap = this.nullBitmap;\n  if (nullBitmap && nullBitmap.byteLength > 0) {\n    this.get = wrapNullableGet(this.get);\n    this.set = wrapNullableSet(this.set);\n  }\n}","map":{"version":3,"sources":["vector/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}