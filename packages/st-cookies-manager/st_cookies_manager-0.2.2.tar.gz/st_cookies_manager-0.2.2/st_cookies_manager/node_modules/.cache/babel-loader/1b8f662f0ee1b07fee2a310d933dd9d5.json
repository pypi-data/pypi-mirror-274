{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* tslint:disable:class-name */\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar _Block = File_.org.apache.arrow.flatbuf.Block;\nvar _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\n/** @ignore */\nclass Footer_ {\n  constructor(schema) {\n    let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n    let recordBatches = arguments.length > 2 ? arguments[2] : undefined;\n    let dictionaryBatches = arguments.length > 3 ? arguments[3] : undefined;\n    this.schema = schema;\n    this.version = version;\n    recordBatches && (this._recordBatches = recordBatches);\n    dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n  }\n  /** @nocollapse */\n  static decode(buf) {\n    buf = new ByteBuffer(toUint8Array(buf));\n    const footer = _Footer.getRootAsFooter(buf);\n    const schema = Schema.decode(footer.schema());\n    return new OffHeapFooter(schema, footer);\n  }\n  /** @nocollapse */\n  static encode(footer) {\n    const b = new Builder();\n    const schemaOffset = Schema.encode(b, footer.schema);\n    _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n    [...footer.recordBatches()].slice().reverse().forEach(rb => FileBlock.encode(b, rb));\n    const recordBatchesOffset = b.endVector();\n    _Footer.startDictionariesVector(b, footer.numDictionaries);\n    [...footer.dictionaryBatches()].slice().reverse().forEach(db => FileBlock.encode(b, db));\n    const dictionaryBatchesOffset = b.endVector();\n    _Footer.startFooter(b);\n    _Footer.addSchema(b, schemaOffset);\n    _Footer.addVersion(b, MetadataVersion.V4);\n    _Footer.addRecordBatches(b, recordBatchesOffset);\n    _Footer.addDictionaries(b, dictionaryBatchesOffset);\n    _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n    return b.asUint8Array();\n  }\n  get numRecordBatches() {\n    return this._recordBatches.length;\n  }\n  get numDictionaries() {\n    return this._dictionaryBatches.length;\n  }\n  *recordBatches() {\n    for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n      if (block = this.getRecordBatch(i)) {\n        yield block;\n      }\n    }\n  }\n  *dictionaryBatches() {\n    for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n      if (block = this.getDictionaryBatch(i)) {\n        yield block;\n      }\n    }\n  }\n  getRecordBatch(index) {\n    return index >= 0 && index < this.numRecordBatches && this._recordBatches[index] || null;\n  }\n  getDictionaryBatch(index) {\n    return index >= 0 && index < this.numDictionaries && this._dictionaryBatches[index] || null;\n  }\n}\nexport { Footer_ as Footer };\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n  constructor(schema, _footer) {\n    super(schema, _footer.version());\n    this._footer = _footer;\n  }\n  get numRecordBatches() {\n    return this._footer.recordBatchesLength();\n  }\n  get numDictionaries() {\n    return this._footer.dictionariesLength();\n  }\n  getRecordBatch(index) {\n    if (index >= 0 && index < this.numRecordBatches) {\n      const fileBlock = this._footer.recordBatches(index);\n      if (fileBlock) {\n        return FileBlock.decode(fileBlock);\n      }\n    }\n    return null;\n  }\n  getDictionaryBatch(index) {\n    if (index >= 0 && index < this.numDictionaries) {\n      const fileBlock = this._footer.dictionaries(index);\n      if (fileBlock) {\n        return FileBlock.decode(fileBlock);\n      }\n    }\n    return null;\n  }\n}\n/** @ignore */\nexport class FileBlock {\n  /** @nocollapse */\n  static decode(block) {\n    return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n  }\n  /** @nocollapse */\n  static encode(b, fileBlock) {\n    const {\n      metaDataLength\n    } = fileBlock;\n    const offset = new Long(fileBlock.offset, 0);\n    const bodyLength = new Long(fileBlock.bodyLength, 0);\n    return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n  }\n  constructor(metaDataLength, bodyLength, offset) {\n    this.metaDataLength = metaDataLength;\n    this.offset = typeof offset === 'number' ? offset : offset.low;\n    this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n  }\n}","map":{"version":3,"sources":["ipc/metadata/file.ts"],"names":[],"mappings":"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","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}