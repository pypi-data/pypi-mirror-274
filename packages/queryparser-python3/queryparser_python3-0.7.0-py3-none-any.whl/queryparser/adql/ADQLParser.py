# Generated from src/queryparser/adql/ADQLParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,299,1206,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,3,2,265,
        8,2,1,2,1,2,1,3,1,3,3,3,271,8,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,
        1,5,1,6,1,6,1,7,1,7,1,8,3,8,287,8,8,1,8,1,8,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,10,3,10,299,8,10,1,11,1,11,1,11,1,11,1,11,1,11,5,
        11,307,8,11,10,11,12,11,310,9,11,1,12,1,12,3,12,314,8,12,1,13,1,
        13,1,13,1,13,1,13,3,13,321,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,3,
        17,342,8,17,1,17,1,17,1,17,1,17,3,17,348,8,17,5,17,350,8,17,10,17,
        12,17,353,9,17,1,18,1,18,1,18,1,18,1,18,3,18,360,8,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,3,19,370,8,19,1,20,1,20,1,21,1,21,
        1,21,5,21,377,8,21,10,21,12,21,380,9,21,1,22,1,22,1,22,3,22,385,
        8,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,
        3,29,412,8,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,
        1,34,3,34,425,8,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,3,36,
        435,8,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,3,38,453,8,38,1,38,1,38,1,39,1,39,1,39,
        3,39,460,8,39,3,39,462,8,39,1,39,1,39,3,39,466,8,39,1,40,1,40,1,
        40,1,41,3,41,472,8,41,1,41,1,41,1,42,1,42,1,42,1,42,5,42,480,8,42,
        10,42,12,42,483,9,42,1,43,1,43,1,44,1,44,1,44,3,44,490,8,44,1,44,
        1,44,1,44,1,45,1,45,1,45,1,45,1,45,3,45,500,8,45,1,46,1,46,1,46,
        1,46,1,47,1,47,1,48,1,48,1,48,5,48,511,8,48,10,48,12,48,514,9,48,
        1,49,1,49,1,49,1,50,1,50,3,50,521,8,50,1,51,1,51,3,51,525,8,51,1,
        51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,3,52,535,8,52,1,53,1,53,1,
        53,5,53,540,8,53,10,53,12,53,543,9,53,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,55,1,55,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,58,1,58,3,
        58,563,8,58,1,59,1,59,1,59,3,59,568,8,59,3,59,570,8,59,1,60,1,60,
        3,60,574,8,60,1,60,3,60,577,8,60,1,60,1,60,1,60,3,60,582,8,60,1,
        60,1,60,1,60,1,60,3,60,588,8,60,1,61,1,61,3,61,592,8,61,1,61,1,61,
        1,61,1,61,1,61,3,61,599,8,61,1,61,1,61,1,61,3,61,604,8,61,1,62,1,
        62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,668,8,63,1,63,1,
        63,1,63,1,63,1,63,1,63,3,63,676,8,63,1,63,1,63,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,690,8,63,1,63,1,63,3,63,694,
        8,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,3,65,705,8,65,
        1,65,1,65,1,65,1,65,1,65,3,65,712,8,65,1,65,1,65,3,65,716,8,65,1,
        66,1,66,1,66,1,66,1,66,3,66,723,8,66,1,67,1,67,1,67,1,67,3,67,729,
        8,67,1,67,1,67,3,67,733,8,67,1,68,1,68,3,68,737,8,68,1,69,1,69,1,
        69,3,69,742,8,69,1,69,1,69,1,70,1,70,3,70,748,8,70,1,71,3,71,751,
        8,71,1,71,1,71,3,71,755,8,71,1,72,1,72,1,72,1,72,1,72,3,72,762,8,
        72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
        72,1,72,1,72,1,72,1,72,1,72,5,72,782,8,72,10,72,12,72,785,9,72,1,
        73,1,73,1,73,1,73,3,73,791,8,73,1,74,1,74,1,74,1,75,1,75,1,75,1,
        75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,79,1,79,1,79,3,79,811,
        8,79,1,79,1,79,1,79,1,80,1,80,3,80,818,8,80,1,81,1,81,1,81,1,81,
        1,81,3,81,825,8,81,1,81,1,81,1,81,1,81,1,81,4,81,832,8,81,11,81,
        12,81,833,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,
        846,8,82,1,83,1,83,3,83,850,8,83,1,84,1,84,1,84,3,84,855,8,84,1,
        85,1,85,1,85,3,85,860,8,85,1,85,1,85,1,85,3,85,865,8,85,1,85,1,85,
        1,85,1,85,3,85,871,8,85,1,85,5,85,874,8,85,10,85,12,85,877,9,85,
        1,86,1,86,1,87,1,87,1,87,1,88,1,88,3,88,886,8,88,1,88,1,88,1,89,
        1,89,1,89,3,89,893,8,89,1,89,1,89,1,89,3,89,898,8,89,1,89,5,89,901,
        8,89,10,89,12,89,904,9,89,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,
        1,93,1,93,1,93,1,93,5,93,918,8,93,10,93,12,93,921,9,93,1,94,1,94,
        1,94,5,94,926,8,94,10,94,12,94,929,9,94,1,94,1,94,1,94,1,94,1,94,
        5,94,936,8,94,10,94,12,94,939,9,94,3,94,941,8,94,3,94,943,8,94,1,
        95,1,95,3,95,947,8,95,1,95,3,95,950,8,95,1,95,1,95,1,95,1,96,1,96,
        1,96,1,96,1,96,3,96,960,8,96,1,97,1,97,1,97,1,97,1,97,3,97,967,8,
        97,1,98,1,98,1,99,1,99,1,99,1,100,1,100,1,101,1,101,1,102,3,102,
        979,8,102,1,102,1,102,1,103,1,103,1,103,3,103,986,8,103,1,104,1,
        104,3,104,990,8,104,1,105,1,105,1,105,5,105,995,8,105,10,105,12,
        105,998,9,105,1,106,1,106,1,107,1,107,3,107,1004,8,107,1,108,1,108,
        1,108,1,108,1,109,1,109,3,109,1012,8,109,1,109,3,109,1015,8,109,
        1,109,3,109,1018,8,109,1,109,3,109,1021,8,109,1,109,3,109,1024,8,
        109,1,110,1,110,1,110,3,110,1029,8,110,1,110,1,110,1,111,1,111,1,
        111,3,111,1036,8,111,1,111,1,111,1,111,1,111,1,111,1,111,1,111,3,
        111,1045,8,111,1,111,1,111,3,111,1049,8,111,1,111,3,111,1052,8,111,
        1,111,1,111,1,111,3,111,1057,8,111,5,111,1059,8,111,10,111,12,111,
        1062,9,111,1,112,1,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        1,113,1,113,1,113,1,113,1,113,5,113,1078,8,113,10,113,12,113,1081,
        9,113,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,1,114,
        1,114,1,114,1,114,1,114,3,114,1130,8,114,1,115,1,115,1,116,1,116,
        1,117,1,117,1,118,1,118,3,118,1140,8,118,1,119,1,119,1,119,3,119,
        1145,8,119,1,120,1,120,1,121,1,121,1,121,1,121,1,121,5,121,1154,
        8,121,10,121,12,121,1157,9,121,3,121,1159,8,121,1,121,1,121,1,122,
        1,122,1,123,1,123,1,124,1,124,1,124,1,124,3,124,1171,8,124,1,125,
        1,125,1,125,1,125,1,125,1,125,1,125,3,125,1180,8,125,1,126,1,126,
        1,126,1,127,1,127,1,127,1,127,1,127,5,127,1190,8,127,10,127,12,127,
        1193,9,127,1,127,1,127,3,127,1197,8,127,1,127,1,127,1,127,3,127,
        1202,8,127,1,127,1,127,1,127,0,8,22,34,144,170,178,186,222,226,128,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
        254,0,7,2,0,121,121,243,243,2,0,283,285,291,293,2,0,48,48,100,100,
        3,0,129,129,159,159,208,208,4,0,52,52,82,82,165,166,228,228,2,0,
        41,41,105,105,2,0,277,277,279,279,1235,0,256,1,0,0,0,2,258,1,0,0,
        0,4,264,1,0,0,0,6,268,1,0,0,0,8,277,1,0,0,0,10,279,1,0,0,0,12,281,
        1,0,0,0,14,283,1,0,0,0,16,286,1,0,0,0,18,290,1,0,0,0,20,298,1,0,
        0,0,22,300,1,0,0,0,24,313,1,0,0,0,26,315,1,0,0,0,28,329,1,0,0,0,
        30,331,1,0,0,0,32,336,1,0,0,0,34,341,1,0,0,0,36,354,1,0,0,0,38,369,
        1,0,0,0,40,371,1,0,0,0,42,373,1,0,0,0,44,384,1,0,0,0,46,388,1,0,
        0,0,48,390,1,0,0,0,50,394,1,0,0,0,52,396,1,0,0,0,54,403,1,0,0,0,
        56,407,1,0,0,0,58,411,1,0,0,0,60,413,1,0,0,0,62,415,1,0,0,0,64,417,
        1,0,0,0,66,421,1,0,0,0,68,424,1,0,0,0,70,428,1,0,0,0,72,432,1,0,
        0,0,74,436,1,0,0,0,76,438,1,0,0,0,78,465,1,0,0,0,80,467,1,0,0,0,
        82,471,1,0,0,0,84,475,1,0,0,0,86,484,1,0,0,0,88,486,1,0,0,0,90,499,
        1,0,0,0,92,501,1,0,0,0,94,505,1,0,0,0,96,507,1,0,0,0,98,515,1,0,
        0,0,100,520,1,0,0,0,102,522,1,0,0,0,104,534,1,0,0,0,106,536,1,0,
        0,0,108,544,1,0,0,0,110,551,1,0,0,0,112,555,1,0,0,0,114,557,1,0,
        0,0,116,562,1,0,0,0,118,569,1,0,0,0,120,587,1,0,0,0,122,603,1,0,
        0,0,124,605,1,0,0,0,126,693,1,0,0,0,128,695,1,0,0,0,130,715,1,0,
        0,0,132,722,1,0,0,0,134,732,1,0,0,0,136,736,1,0,0,0,138,738,1,0,
        0,0,140,747,1,0,0,0,142,754,1,0,0,0,144,761,1,0,0,0,146,790,1,0,
        0,0,148,792,1,0,0,0,150,795,1,0,0,0,152,799,1,0,0,0,154,801,1,0,
        0,0,156,803,1,0,0,0,158,805,1,0,0,0,160,817,1,0,0,0,162,819,1,0,
        0,0,164,845,1,0,0,0,166,849,1,0,0,0,168,854,1,0,0,0,170,859,1,0,
        0,0,172,878,1,0,0,0,174,880,1,0,0,0,176,885,1,0,0,0,178,892,1,0,
        0,0,180,905,1,0,0,0,182,907,1,0,0,0,184,909,1,0,0,0,186,911,1,0,
        0,0,188,942,1,0,0,0,190,944,1,0,0,0,192,959,1,0,0,0,194,966,1,0,
        0,0,196,968,1,0,0,0,198,970,1,0,0,0,200,973,1,0,0,0,202,975,1,0,
        0,0,204,978,1,0,0,0,206,985,1,0,0,0,208,987,1,0,0,0,210,991,1,0,
        0,0,212,999,1,0,0,0,214,1003,1,0,0,0,216,1005,1,0,0,0,218,1009,1,
        0,0,0,220,1028,1,0,0,0,222,1044,1,0,0,0,224,1063,1,0,0,0,226,1065,
        1,0,0,0,228,1129,1,0,0,0,230,1131,1,0,0,0,232,1133,1,0,0,0,234,1135,
        1,0,0,0,236,1139,1,0,0,0,238,1144,1,0,0,0,240,1146,1,0,0,0,242,1148,
        1,0,0,0,244,1162,1,0,0,0,246,1164,1,0,0,0,248,1170,1,0,0,0,250,1179,
        1,0,0,0,252,1181,1,0,0,0,254,1184,1,0,0,0,256,257,5,267,0,0,257,
        1,1,0,0,0,258,259,5,3,0,0,259,260,5,274,0,0,260,261,3,90,45,0,261,
        262,5,275,0,0,262,3,1,0,0,0,263,265,5,47,0,0,264,263,1,0,0,0,264,
        265,1,0,0,0,265,266,1,0,0,0,266,267,3,40,20,0,267,5,1,0,0,0,268,
        270,3,248,124,0,269,271,5,176,0,0,270,269,1,0,0,0,270,271,1,0,0,
        0,271,272,1,0,0,0,272,273,5,54,0,0,273,274,3,248,124,0,274,275,5,
        44,0,0,275,276,3,248,124,0,276,7,1,0,0,0,277,278,5,271,0,0,278,9,
        1,0,0,0,279,280,5,272,0,0,280,11,1,0,0,0,281,282,5,287,0,0,282,13,
        1,0,0,0,283,284,5,273,0,0,284,15,1,0,0,0,285,287,5,176,0,0,286,285,
        1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,288,289,3,20,10,0,289,17,
        1,0,0,0,290,291,7,0,0,0,291,19,1,0,0,0,292,293,5,274,0,0,293,294,
        3,186,93,0,294,295,5,275,0,0,295,299,1,0,0,0,296,299,3,164,82,0,
        297,299,3,24,12,0,298,292,1,0,0,0,298,296,1,0,0,0,298,297,1,0,0,
        0,299,21,1,0,0,0,300,301,6,11,-1,0,301,302,3,16,8,0,302,308,1,0,
        0,0,303,304,10,1,0,0,304,305,5,44,0,0,305,307,3,16,8,0,306,303,1,
        0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,23,1,0,
        0,0,310,308,1,0,0,0,311,314,3,18,9,0,312,314,3,242,121,0,313,311,
        1,0,0,0,313,312,1,0,0,0,314,25,1,0,0,0,315,316,5,11,0,0,316,320,
        5,274,0,0,317,318,3,56,28,0,318,319,5,278,0,0,319,321,1,0,0,0,320,
        317,1,0,0,0,320,321,1,0,0,0,321,322,1,0,0,0,322,323,3,64,32,0,323,
        324,5,278,0,0,324,325,3,144,72,0,325,326,5,278,0,0,326,327,3,144,
        72,0,327,328,5,275,0,0,328,27,1,0,0,0,329,330,5,270,0,0,330,29,1,
        0,0,0,331,332,5,163,0,0,332,333,5,274,0,0,333,334,3,32,16,0,334,
        335,5,275,0,0,335,31,1,0,0,0,336,337,5,269,0,0,337,33,1,0,0,0,338,
        339,6,17,-1,0,339,342,3,250,125,0,340,342,3,214,107,0,341,338,1,
        0,0,0,341,340,1,0,0,0,342,351,1,0,0,0,343,344,10,3,0,0,344,347,3,
        50,25,0,345,348,3,250,125,0,346,348,3,214,107,0,347,345,1,0,0,0,
        347,346,1,0,0,0,348,350,1,0,0,0,349,343,1,0,0,0,350,353,1,0,0,0,
        351,349,1,0,0,0,351,352,1,0,0,0,352,35,1,0,0,0,353,351,1,0,0,0,354,
        355,5,13,0,0,355,359,5,274,0,0,356,357,3,56,28,0,357,358,5,278,0,
        0,358,360,1,0,0,0,359,356,1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,
        0,361,362,3,38,19,0,362,363,1,0,0,0,363,364,5,278,0,0,364,365,3,
        180,90,0,365,366,5,275,0,0,366,37,1,0,0,0,367,370,3,64,32,0,368,
        370,3,58,29,0,369,367,1,0,0,0,369,368,1,0,0,0,370,39,1,0,0,0,371,
        372,3,100,50,0,372,41,1,0,0,0,373,378,3,40,20,0,374,375,5,278,0,
        0,375,377,3,40,20,0,376,374,1,0,0,0,377,380,1,0,0,0,378,376,1,0,
        0,0,378,379,1,0,0,0,379,43,1,0,0,0,380,378,1,0,0,0,381,382,3,168,
        84,0,382,383,5,280,0,0,383,385,1,0,0,0,384,381,1,0,0,0,384,385,1,
        0,0,0,385,386,1,0,0,0,386,387,3,40,20,0,387,45,1,0,0,0,388,389,7,
        1,0,0,389,47,1,0,0,0,390,391,3,248,124,0,391,392,3,46,23,0,392,393,
        3,248,124,0,393,49,1,0,0,0,394,395,5,290,0,0,395,51,1,0,0,0,396,
        397,5,14,0,0,397,398,5,274,0,0,398,399,3,90,45,0,399,400,5,278,0,
        0,400,401,3,90,45,0,401,402,5,275,0,0,402,53,1,0,0,0,403,404,5,265,
        0,0,404,405,5,284,0,0,405,406,3,52,26,0,406,55,1,0,0,0,407,408,3,
        212,106,0,408,57,1,0,0,0,409,412,3,160,80,0,410,412,3,44,22,0,411,
        409,1,0,0,0,411,410,1,0,0,0,412,59,1,0,0,0,413,414,3,144,72,0,414,
        61,1,0,0,0,415,416,3,144,72,0,416,63,1,0,0,0,417,418,3,60,30,0,418,
        419,5,278,0,0,419,420,3,62,31,0,420,65,1,0,0,0,421,422,3,100,50,
        0,422,67,1,0,0,0,423,425,5,47,0,0,424,423,1,0,0,0,424,425,1,0,0,
        0,425,426,1,0,0,0,426,427,3,66,33,0,427,69,1,0,0,0,428,429,5,294,
        0,0,429,430,5,270,0,0,430,431,5,294,0,0,431,71,1,0,0,0,432,434,3,
        248,124,0,433,435,3,4,2,0,434,433,1,0,0,0,434,435,1,0,0,0,435,73,
        1,0,0,0,436,437,3,224,112,0,437,75,1,0,0,0,438,439,5,18,0,0,439,
        452,5,274,0,0,440,441,3,58,29,0,441,442,5,278,0,0,442,443,3,58,29,
        0,443,453,1,0,0,0,444,445,3,144,72,0,445,446,5,278,0,0,446,447,3,
        144,72,0,447,448,5,278,0,0,448,449,3,144,72,0,449,450,5,278,0,0,
        450,451,3,144,72,0,451,453,1,0,0,0,452,440,1,0,0,0,452,444,1,0,0,
        0,453,454,1,0,0,0,454,455,5,275,0,0,455,77,1,0,0,0,456,461,3,232,
        116,0,457,459,5,280,0,0,458,460,3,232,116,0,459,458,1,0,0,0,459,
        460,1,0,0,0,460,462,1,0,0,0,461,457,1,0,0,0,461,462,1,0,0,0,462,
        466,1,0,0,0,463,464,5,280,0,0,464,466,3,232,116,0,465,456,1,0,0,
        0,465,463,1,0,0,0,466,79,1,0,0,0,467,468,5,118,0,0,468,469,3,224,
        112,0,469,81,1,0,0,0,470,472,3,202,101,0,471,470,1,0,0,0,471,472,
        1,0,0,0,472,473,1,0,0,0,473,474,3,142,71,0,474,83,1,0,0,0,475,476,
        5,128,0,0,476,481,3,222,111,0,477,478,5,278,0,0,478,480,3,222,111,
        0,479,477,1,0,0,0,480,483,1,0,0,0,481,479,1,0,0,0,481,482,1,0,0,
        0,482,85,1,0,0,0,483,481,1,0,0,0,484,485,3,32,16,0,485,87,1,0,0,
        0,486,487,3,196,98,0,487,489,5,274,0,0,488,490,3,200,100,0,489,488,
        1,0,0,0,489,490,1,0,0,0,490,491,1,0,0,0,491,492,3,248,124,0,492,
        493,5,275,0,0,493,89,1,0,0,0,494,500,3,26,13,0,495,500,3,36,18,0,
        496,500,3,158,79,0,497,500,3,162,81,0,498,500,3,242,121,0,499,494,
        1,0,0,0,499,495,1,0,0,0,499,496,1,0,0,0,499,497,1,0,0,0,499,498,
        1,0,0,0,500,91,1,0,0,0,501,502,5,135,0,0,502,503,5,58,0,0,503,504,
        3,96,48,0,504,93,1,0,0,0,505,506,3,44,22,0,506,95,1,0,0,0,507,512,
        3,94,47,0,508,509,5,278,0,0,509,511,3,94,47,0,510,508,1,0,0,0,511,
        514,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,97,1,0,0,0,514,512,
        1,0,0,0,515,516,5,136,0,0,516,517,3,186,93,0,517,99,1,0,0,0,518,
        521,3,182,91,0,519,521,3,70,35,0,520,518,1,0,0,0,520,519,1,0,0,0,
        521,101,1,0,0,0,522,524,3,248,124,0,523,525,5,176,0,0,524,523,1,
        0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,527,5,140,0,0,527,528,
        3,104,52,0,528,103,1,0,0,0,529,535,3,224,112,0,530,531,5,274,0,0,
        531,532,3,106,53,0,532,533,5,275,0,0,533,535,1,0,0,0,534,529,1,0,
        0,0,534,530,1,0,0,0,535,105,1,0,0,0,536,541,3,248,124,0,537,538,
        5,278,0,0,538,540,3,248,124,0,539,537,1,0,0,0,540,543,1,0,0,0,541,
        539,1,0,0,0,541,542,1,0,0,0,542,107,1,0,0,0,543,541,1,0,0,0,544,
        545,5,22,0,0,545,546,5,274,0,0,546,547,3,90,45,0,547,548,5,278,0,
        0,548,549,3,90,45,0,549,550,5,275,0,0,550,109,1,0,0,0,551,552,5,
        265,0,0,552,553,5,284,0,0,553,554,3,108,54,0,554,111,1,0,0,0,555,
        556,3,42,21,0,556,113,1,0,0,0,557,558,5,183,0,0,558,559,3,186,93,
        0,559,115,1,0,0,0,560,563,3,114,57,0,561,563,3,128,64,0,562,560,
        1,0,0,0,562,561,1,0,0,0,563,117,1,0,0,0,564,570,5,143,0,0,565,567,
        3,154,77,0,566,568,5,189,0,0,567,566,1,0,0,0,567,568,1,0,0,0,568,
        570,1,0,0,0,569,564,1,0,0,0,569,565,1,0,0,0,570,119,1,0,0,0,571,
        573,3,222,111,0,572,574,5,172,0,0,573,572,1,0,0,0,573,574,1,0,0,
        0,574,576,1,0,0,0,575,577,3,118,59,0,576,575,1,0,0,0,576,577,1,0,
        0,0,577,578,1,0,0,0,578,579,5,154,0,0,579,581,3,222,111,0,580,582,
        3,116,58,0,581,580,1,0,0,0,581,582,1,0,0,0,582,588,1,0,0,0,583,584,
        5,274,0,0,584,585,3,120,60,0,585,586,5,275,0,0,586,588,1,0,0,0,587,
        571,1,0,0,0,587,583,1,0,0,0,588,121,1,0,0,0,589,591,3,124,62,0,590,
        592,5,176,0,0,591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,
        594,5,161,0,0,594,595,3,156,78,0,595,604,1,0,0,0,596,598,3,124,62,
        0,597,599,5,176,0,0,598,597,1,0,0,0,598,599,1,0,0,0,599,600,1,0,
        0,0,600,601,5,21,0,0,601,602,3,156,78,0,602,604,1,0,0,0,603,589,
        1,0,0,0,603,596,1,0,0,0,604,123,1,0,0,0,605,606,3,34,17,0,606,125,
        1,0,0,0,607,608,5,1,0,0,608,609,5,274,0,0,609,610,3,144,72,0,610,
        611,5,275,0,0,611,694,1,0,0,0,612,613,5,12,0,0,613,614,5,274,0,0,
        614,615,3,144,72,0,615,616,5,275,0,0,616,694,1,0,0,0,617,618,5,17,
        0,0,618,619,5,274,0,0,619,620,3,144,72,0,620,621,5,275,0,0,621,694,
        1,0,0,0,622,623,5,19,0,0,623,624,5,274,0,0,624,625,3,144,72,0,625,
        626,5,275,0,0,626,694,1,0,0,0,627,628,5,20,0,0,628,629,5,274,0,0,
        629,630,3,144,72,0,630,631,5,275,0,0,631,694,1,0,0,0,632,633,5,23,
        0,0,633,634,5,274,0,0,634,635,3,144,72,0,635,636,5,275,0,0,636,694,
        1,0,0,0,637,638,5,24,0,0,638,639,5,274,0,0,639,640,3,144,72,0,640,
        641,5,275,0,0,641,694,1,0,0,0,642,643,5,25,0,0,643,644,5,274,0,0,
        644,645,3,144,72,0,645,646,5,278,0,0,646,647,3,144,72,0,647,648,
        5,275,0,0,648,694,1,0,0,0,649,650,5,26,0,0,650,651,5,274,0,0,651,
        694,5,275,0,0,652,653,5,29,0,0,653,654,5,274,0,0,654,655,3,144,72,
        0,655,656,5,278,0,0,656,657,3,144,72,0,657,658,5,275,0,0,658,694,
        1,0,0,0,659,660,5,30,0,0,660,661,5,274,0,0,661,662,3,144,72,0,662,
        663,5,275,0,0,663,694,1,0,0,0,664,665,5,31,0,0,665,667,5,274,0,0,
        666,668,3,232,116,0,667,666,1,0,0,0,667,668,1,0,0,0,668,669,1,0,
        0,0,669,694,5,275,0,0,670,671,5,32,0,0,671,672,5,274,0,0,672,675,
        3,144,72,0,673,674,5,278,0,0,674,676,3,204,102,0,675,673,1,0,0,0,
        675,676,1,0,0,0,676,677,1,0,0,0,677,678,5,275,0,0,678,694,1,0,0,
        0,679,680,5,34,0,0,680,681,5,274,0,0,681,682,3,144,72,0,682,683,
        5,275,0,0,683,694,1,0,0,0,684,685,5,37,0,0,685,686,5,274,0,0,686,
        689,3,144,72,0,687,688,5,278,0,0,688,690,3,204,102,0,689,687,1,0,
        0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,692,5,275,0,0,692,694,1,
        0,0,0,693,607,1,0,0,0,693,612,1,0,0,0,693,617,1,0,0,0,693,622,1,
        0,0,0,693,627,1,0,0,0,693,632,1,0,0,0,693,637,1,0,0,0,693,642,1,
        0,0,0,693,649,1,0,0,0,693,652,1,0,0,0,693,659,1,0,0,0,693,664,1,
        0,0,0,693,670,1,0,0,0,693,679,1,0,0,0,693,684,1,0,0,0,694,127,1,
        0,0,0,695,696,5,251,0,0,696,697,5,274,0,0,697,698,3,112,56,0,698,
        699,5,275,0,0,699,129,1,0,0,0,700,716,3,134,67,0,701,702,3,170,85,
        0,702,704,5,244,0,0,703,705,5,41,0,0,704,703,1,0,0,0,704,705,1,0,
        0,0,705,706,1,0,0,0,706,707,3,178,89,0,707,716,1,0,0,0,708,709,3,
        170,85,0,709,711,5,114,0,0,710,712,5,41,0,0,711,710,1,0,0,0,711,
        712,1,0,0,0,712,713,1,0,0,0,713,714,3,178,89,0,714,716,1,0,0,0,715,
        700,1,0,0,0,715,701,1,0,0,0,715,708,1,0,0,0,716,131,1,0,0,0,717,
        723,3,176,88,0,718,719,5,274,0,0,719,720,3,130,65,0,720,721,5,275,
        0,0,721,723,1,0,0,0,722,717,1,0,0,0,722,718,1,0,0,0,723,133,1,0,
        0,0,724,733,3,132,66,0,725,726,3,178,89,0,726,728,5,149,0,0,727,
        729,5,41,0,0,728,727,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,
        731,3,170,85,0,731,733,1,0,0,0,732,724,1,0,0,0,732,725,1,0,0,0,733,
        135,1,0,0,0,734,737,3,2,1,0,735,737,3,76,38,0,736,734,1,0,0,0,736,
        735,1,0,0,0,737,137,1,0,0,0,738,739,3,44,22,0,739,741,5,152,0,0,
        740,742,5,176,0,0,741,740,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,
        0,743,744,5,177,0,0,744,139,1,0,0,0,745,748,3,166,83,0,746,748,3,
        136,68,0,747,745,1,0,0,0,747,746,1,0,0,0,748,141,1,0,0,0,749,751,
        3,202,101,0,750,749,1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,
        755,3,250,125,0,753,755,3,146,73,0,754,750,1,0,0,0,754,753,1,0,0,
        0,755,143,1,0,0,0,756,757,6,72,-1,0,757,762,3,226,113,0,758,759,
        3,10,5,0,759,760,3,144,72,6,760,762,1,0,0,0,761,756,1,0,0,0,761,
        758,1,0,0,0,762,783,1,0,0,0,763,764,10,5,0,0,764,765,3,8,4,0,765,
        766,3,144,72,6,766,782,1,0,0,0,767,768,10,4,0,0,768,769,3,12,6,0,
        769,770,3,144,72,5,770,782,1,0,0,0,771,772,10,3,0,0,772,773,3,14,
        7,0,773,774,3,144,72,4,774,782,1,0,0,0,775,776,10,2,0,0,776,777,
        5,277,0,0,777,782,3,226,113,0,778,779,10,1,0,0,779,780,5,279,0,0,
        780,782,3,226,113,0,781,763,1,0,0,0,781,767,1,0,0,0,781,771,1,0,
        0,0,781,775,1,0,0,0,781,778,1,0,0,0,782,785,1,0,0,0,783,781,1,0,
        0,0,783,784,1,0,0,0,784,145,1,0,0,0,785,783,1,0,0,0,786,791,3,228,
        114,0,787,791,3,126,63,0,788,791,3,140,70,0,789,791,3,242,121,0,
        790,786,1,0,0,0,790,787,1,0,0,0,790,788,1,0,0,0,790,789,1,0,0,0,
        791,147,1,0,0,0,792,793,5,182,0,0,793,794,3,232,116,0,794,149,1,
        0,0,0,795,796,5,188,0,0,796,797,5,58,0,0,797,798,3,210,105,0,798,
        151,1,0,0,0,799,800,7,2,0,0,800,153,1,0,0,0,801,802,7,3,0,0,802,
        155,1,0,0,0,803,804,3,34,17,0,804,157,1,0,0,0,805,806,5,27,0,0,806,
        810,5,274,0,0,807,808,3,56,28,0,808,809,5,278,0,0,809,811,1,0,0,
        0,810,807,1,0,0,0,810,811,1,0,0,0,811,812,1,0,0,0,812,813,3,64,32,
        0,813,814,5,275,0,0,814,159,1,0,0,0,815,818,3,158,79,0,816,818,3,
        242,121,0,817,815,1,0,0,0,817,816,1,0,0,0,818,161,1,0,0,0,819,820,
        5,28,0,0,820,824,5,274,0,0,821,822,3,56,28,0,822,823,5,278,0,0,823,
        825,1,0,0,0,824,821,1,0,0,0,824,825,1,0,0,0,825,826,1,0,0,0,826,
        827,3,64,32,0,827,828,5,278,0,0,828,831,3,64,32,0,829,830,5,278,
        0,0,830,832,3,64,32,0,831,829,1,0,0,0,832,833,1,0,0,0,833,831,1,
        0,0,0,833,834,1,0,0,0,834,835,1,0,0,0,835,836,5,275,0,0,836,163,
        1,0,0,0,837,846,3,54,27,0,838,846,3,110,55,0,839,846,3,48,24,0,840,
        846,3,6,3,0,841,846,3,102,51,0,842,846,3,122,61,0,843,846,3,138,
        69,0,844,846,3,80,40,0,845,837,1,0,0,0,845,838,1,0,0,0,845,839,1,
        0,0,0,845,840,1,0,0,0,845,841,1,0,0,0,845,842,1,0,0,0,845,843,1,
        0,0,0,845,844,1,0,0,0,846,165,1,0,0,0,847,850,3,52,26,0,848,850,
        3,108,54,0,849,847,1,0,0,0,849,848,1,0,0,0,850,167,1,0,0,0,851,855,
        3,40,20,0,852,855,3,220,110,0,853,855,3,66,33,0,854,851,1,0,0,0,
        854,852,1,0,0,0,854,853,1,0,0,0,855,169,1,0,0,0,856,857,6,85,-1,
        0,857,860,3,134,67,0,858,860,3,120,60,0,859,856,1,0,0,0,859,858,
        1,0,0,0,860,875,1,0,0,0,861,862,10,3,0,0,862,864,5,244,0,0,863,865,
        5,41,0,0,864,863,1,0,0,0,864,865,1,0,0,0,865,866,1,0,0,0,866,874,
        3,178,89,0,867,868,10,2,0,0,868,870,5,114,0,0,869,871,5,41,0,0,870,
        869,1,0,0,0,870,871,1,0,0,0,871,872,1,0,0,0,872,874,3,178,89,0,873,
        861,1,0,0,0,873,867,1,0,0,0,874,877,1,0,0,0,875,873,1,0,0,0,875,
        876,1,0,0,0,876,171,1,0,0,0,877,875,1,0,0,0,878,879,5,270,0,0,879,
        173,1,0,0,0,880,881,3,170,85,0,881,882,5,282,0,0,882,175,1,0,0,0,
        883,884,5,260,0,0,884,886,3,254,127,0,885,883,1,0,0,0,885,886,1,
        0,0,0,886,887,1,0,0,0,887,888,3,190,95,0,888,177,1,0,0,0,889,890,
        6,89,-1,0,890,893,3,132,66,0,891,893,3,120,60,0,892,889,1,0,0,0,
        892,891,1,0,0,0,893,902,1,0,0,0,894,895,10,2,0,0,895,897,5,149,0,
        0,896,898,5,41,0,0,897,896,1,0,0,0,897,898,1,0,0,0,898,899,1,0,0,
        0,899,901,3,170,85,0,900,894,1,0,0,0,901,904,1,0,0,0,902,900,1,0,
        0,0,902,903,1,0,0,0,903,179,1,0,0,0,904,902,1,0,0,0,905,906,3,144,
        72,0,906,181,1,0,0,0,907,908,5,270,0,0,908,183,1,0,0,0,909,910,5,
        270,0,0,910,185,1,0,0,0,911,912,6,93,-1,0,912,913,3,22,11,0,913,
        919,1,0,0,0,914,915,10,1,0,0,915,916,5,187,0,0,916,918,3,22,11,0,
        917,914,1,0,0,0,918,921,1,0,0,0,919,917,1,0,0,0,919,920,1,0,0,0,
        920,187,1,0,0,0,921,919,1,0,0,0,922,927,3,192,96,0,923,924,5,278,
        0,0,924,926,3,192,96,0,925,923,1,0,0,0,926,929,1,0,0,0,927,925,1,
        0,0,0,927,928,1,0,0,0,928,943,1,0,0,0,929,927,1,0,0,0,930,940,5,
        276,0,0,931,932,5,278,0,0,932,937,3,192,96,0,933,934,5,278,0,0,934,
        936,3,192,96,0,935,933,1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,937,
        938,1,0,0,0,938,941,1,0,0,0,939,937,1,0,0,0,940,931,1,0,0,0,940,
        941,1,0,0,0,941,943,1,0,0,0,942,922,1,0,0,0,942,930,1,0,0,0,943,
        189,1,0,0,0,944,946,5,215,0,0,945,947,3,200,100,0,946,945,1,0,0,
        0,946,947,1,0,0,0,947,949,1,0,0,0,948,950,3,198,99,0,949,948,1,0,
        0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,952,3,188,94,0,952,953,3,
        218,109,0,953,191,1,0,0,0,954,960,3,72,36,0,955,956,3,168,84,0,956,
        957,5,280,0,0,957,958,5,276,0,0,958,960,1,0,0,0,959,954,1,0,0,0,
        959,955,1,0,0,0,960,193,1,0,0,0,961,962,5,82,0,0,962,963,5,274,0,
        0,963,964,5,276,0,0,964,967,5,275,0,0,965,967,3,88,44,0,966,961,
        1,0,0,0,966,965,1,0,0,0,967,195,1,0,0,0,968,969,7,4,0,0,969,197,
        1,0,0,0,970,971,5,36,0,0,971,972,3,232,116,0,972,199,1,0,0,0,973,
        974,7,5,0,0,974,201,1,0,0,0,975,976,7,6,0,0,976,203,1,0,0,0,977,
        979,3,202,101,0,978,977,1,0,0,0,978,979,1,0,0,0,979,980,1,0,0,0,
        980,981,3,232,116,0,981,205,1,0,0,0,982,986,3,248,124,0,983,986,
        3,44,22,0,984,986,3,232,116,0,985,982,1,0,0,0,985,983,1,0,0,0,985,
        984,1,0,0,0,986,207,1,0,0,0,987,989,3,206,103,0,988,990,3,152,76,
        0,989,988,1,0,0,0,989,990,1,0,0,0,990,209,1,0,0,0,991,996,3,208,
        104,0,992,993,5,278,0,0,993,995,3,208,104,0,994,992,1,0,0,0,995,
        998,1,0,0,0,996,994,1,0,0,0,996,997,1,0,0,0,997,211,1,0,0,0,998,
        996,1,0,0,0,999,1000,3,34,17,0,1000,213,1,0,0,0,1001,1004,3,242,
        121,0,1002,1004,3,30,15,0,1003,1001,1,0,0,0,1003,1002,1,0,0,0,1004,
        215,1,0,0,0,1005,1006,5,274,0,0,1006,1007,3,170,85,0,1007,1008,5,
        275,0,0,1008,217,1,0,0,0,1009,1011,3,84,42,0,1010,1012,3,252,126,
        0,1011,1010,1,0,0,0,1011,1012,1,0,0,0,1012,1014,1,0,0,0,1013,1015,
        3,92,46,0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,1015,1017,1,0,0,0,
        1016,1018,3,98,49,0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,1020,
        1,0,0,0,1019,1021,3,150,75,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,
        1021,1023,1,0,0,0,1022,1024,3,148,74,0,1023,1022,1,0,0,0,1023,1024,
        1,0,0,0,1024,219,1,0,0,0,1025,1026,3,184,92,0,1026,1027,5,280,0,
        0,1027,1029,1,0,0,0,1028,1025,1,0,0,0,1028,1029,1,0,0,0,1029,1030,
        1,0,0,0,1030,1031,3,100,50,0,1031,221,1,0,0,0,1032,1033,6,111,-1,
        0,1033,1035,3,220,110,0,1034,1036,3,68,34,0,1035,1034,1,0,0,0,1035,
        1036,1,0,0,0,1036,1045,1,0,0,0,1037,1038,3,74,37,0,1038,1039,3,68,
        34,0,1039,1045,1,0,0,0,1040,1041,5,274,0,0,1041,1042,3,120,60,0,
        1042,1043,5,275,0,0,1043,1045,1,0,0,0,1044,1032,1,0,0,0,1044,1037,
        1,0,0,0,1044,1040,1,0,0,0,1045,1060,1,0,0,0,1046,1048,10,2,0,0,1047,
        1049,5,172,0,0,1048,1047,1,0,0,0,1048,1049,1,0,0,0,1049,1051,1,0,
        0,0,1050,1052,3,118,59,0,1051,1050,1,0,0,0,1051,1052,1,0,0,0,1052,
        1053,1,0,0,0,1053,1054,5,154,0,0,1054,1056,3,222,111,0,1055,1057,
        3,116,58,0,1056,1055,1,0,0,0,1056,1057,1,0,0,0,1057,1059,1,0,0,0,
        1058,1046,1,0,0,0,1059,1062,1,0,0,0,1060,1058,1,0,0,0,1060,1061,
        1,0,0,0,1061,223,1,0,0,0,1062,1060,1,0,0,0,1063,1064,3,216,108,0,
        1064,225,1,0,0,0,1065,1066,6,113,-1,0,1066,1067,3,82,41,0,1067,1079,
        1,0,0,0,1068,1069,10,3,0,0,1069,1070,5,276,0,0,1070,1078,3,82,41,
        0,1071,1072,10,2,0,0,1072,1073,5,289,0,0,1073,1078,3,82,41,0,1074,
        1075,10,1,0,0,1075,1076,5,296,0,0,1076,1078,3,82,41,0,1077,1068,
        1,0,0,0,1077,1071,1,0,0,0,1077,1074,1,0,0,0,1078,1081,1,0,0,0,1079,
        1077,1,0,0,0,1079,1080,1,0,0,0,1080,227,1,0,0,0,1081,1079,1,0,0,
        0,1082,1083,5,2,0,0,1083,1084,5,274,0,0,1084,1085,3,144,72,0,1085,
        1086,5,275,0,0,1086,1130,1,0,0,0,1087,1088,5,2,0,0,1088,1089,5,274,
        0,0,1089,1090,3,144,72,0,1090,1091,5,275,0,0,1091,1130,1,0,0,0,1092,
        1093,5,4,0,0,1093,1094,5,274,0,0,1094,1095,3,144,72,0,1095,1096,
        5,275,0,0,1096,1130,1,0,0,0,1097,1098,5,5,0,0,1098,1099,5,274,0,
        0,1099,1100,3,144,72,0,1100,1101,5,275,0,0,1101,1130,1,0,0,0,1102,
        1103,5,6,0,0,1103,1104,5,274,0,0,1104,1105,3,144,72,0,1105,1106,
        5,278,0,0,1106,1107,3,144,72,0,1107,1108,5,275,0,0,1108,1130,1,0,
        0,0,1109,1110,5,15,0,0,1110,1111,5,274,0,0,1111,1112,3,144,72,0,
        1112,1113,5,275,0,0,1113,1130,1,0,0,0,1114,1115,5,16,0,0,1115,1116,
        5,274,0,0,1116,1117,3,144,72,0,1117,1118,5,275,0,0,1118,1130,1,0,
        0,0,1119,1120,5,33,0,0,1120,1121,5,274,0,0,1121,1122,3,144,72,0,
        1122,1123,5,275,0,0,1123,1130,1,0,0,0,1124,1125,5,35,0,0,1125,1126,
        5,274,0,0,1126,1127,3,144,72,0,1127,1128,5,275,0,0,1128,1130,1,0,
        0,0,1129,1082,1,0,0,0,1129,1087,1,0,0,0,1129,1092,1,0,0,0,1129,1097,
        1,0,0,0,1129,1102,1,0,0,0,1129,1109,1,0,0,0,1129,1114,1,0,0,0,1129,
        1119,1,0,0,0,1129,1124,1,0,0,0,1130,229,1,0,0,0,1131,1132,5,270,
        0,0,1132,231,1,0,0,0,1133,1134,5,265,0,0,1134,233,1,0,0,0,1135,1136,
        5,268,0,0,1136,235,1,0,0,0,1137,1140,3,238,119,0,1138,1140,3,86,
        43,0,1139,1137,1,0,0,0,1139,1138,1,0,0,0,1140,237,1,0,0,0,1141,1145,
        3,78,39,0,1142,1145,3,0,0,0,1143,1145,3,234,117,0,1144,1141,1,0,
        0,0,1144,1142,1,0,0,0,1144,1143,1,0,0,0,1145,239,1,0,0,0,1146,1147,
        3,236,118,0,1147,241,1,0,0,0,1148,1149,3,244,122,0,1149,1158,5,274,
        0,0,1150,1155,3,246,123,0,1151,1152,5,278,0,0,1152,1154,3,246,123,
        0,1153,1151,1,0,0,0,1154,1157,1,0,0,0,1155,1153,1,0,0,0,1155,1156,
        1,0,0,0,1156,1159,1,0,0,0,1157,1155,1,0,0,0,1158,1150,1,0,0,0,1158,
        1159,1,0,0,0,1159,1160,1,0,0,0,1160,1161,5,275,0,0,1161,243,1,0,
        0,0,1162,1163,3,182,91,0,1163,245,1,0,0,0,1164,1165,3,248,124,0,
        1165,247,1,0,0,0,1166,1171,3,144,72,0,1167,1171,3,212,106,0,1168,
        1171,3,24,12,0,1169,1171,3,90,45,0,1170,1166,1,0,0,0,1170,1167,1,
        0,0,0,1170,1168,1,0,0,0,1170,1169,1,0,0,0,1171,249,1,0,0,0,1172,
        1180,3,240,120,0,1173,1180,3,44,22,0,1174,1180,3,194,97,0,1175,1176,
        5,274,0,0,1176,1177,3,248,124,0,1177,1178,5,275,0,0,1178,1180,1,
        0,0,0,1179,1172,1,0,0,0,1179,1173,1,0,0,0,1179,1174,1,0,0,0,1179,
        1175,1,0,0,0,1180,251,1,0,0,0,1181,1182,5,259,0,0,1182,1183,3,186,
        93,0,1183,253,1,0,0,0,1184,1196,3,172,86,0,1185,1186,5,274,0,0,1186,
        1191,3,40,20,0,1187,1188,5,278,0,0,1188,1190,3,40,20,0,1189,1187,
        1,0,0,0,1190,1193,1,0,0,0,1191,1189,1,0,0,0,1191,1192,1,0,0,0,1192,
        1194,1,0,0,0,1193,1191,1,0,0,0,1194,1195,5,275,0,0,1195,1197,1,0,
        0,0,1196,1185,1,0,0,0,1196,1197,1,0,0,0,1197,1198,1,0,0,0,1198,1199,
        5,47,0,0,1199,1201,5,274,0,0,1200,1202,3,176,88,0,1201,1200,1,0,
        0,0,1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,1204,5,275,0,0,1204,
        255,1,0,0,0,113,264,270,286,298,308,313,320,341,347,351,359,369,
        378,384,411,424,434,452,459,461,465,471,481,489,499,512,520,524,
        534,541,562,567,569,573,576,581,587,591,598,603,667,675,689,693,
        704,711,715,722,728,732,736,741,747,750,754,761,781,783,790,810,
        817,824,833,845,849,854,859,864,870,873,875,885,892,897,902,919,
        927,937,940,942,946,949,959,966,978,985,989,996,1003,1011,1014,1017,
        1020,1023,1028,1035,1044,1048,1051,1056,1060,1077,1079,1129,1139,
        1144,1155,1158,1170,1179,1191,1196,1201
    ]

class ADQLParser ( Parser ):

    grammarFileName = "ADQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'&'", "'~'", 
                     "'^'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", 
                     "':'", "';'", "'<'", "'='", "'>'", "'?'", "'|'", "'_'", 
                     "'/'", "'||'", "'<='", "'>='", "<INVALID>", "'\"'", 
                     "'''", "'%'" ]

    symbolicNames = [ "<INVALID>", "ABS", "ACOS", "AREA", "ASIN", "ATAN", 
                      "ATAN2", "BIT_AND", "BIT_NOT", "BIT_OR", "BIT_XOR", 
                      "BOX", "CEILING", "CIRCLE", "CONTAINS", "COS", "COT", 
                      "DEGREES", "DISTANCE", "EXP", "FLOOR", "ILIKE", "INTERSECTS", 
                      "LOG", "LOG10", "MOD", "PI", "POINT", "POLYGON", "POWER", 
                      "RADIANS", "RAND", "ROUND", "SIN", "SQRT", "TAN", 
                      "TOP", "TRUNCATE", "ABSOLUTE", "ACTION", "ADD", "ALL", 
                      "ALLOCATE", "ALTER", "AND", "ANY", "ARE", "AS", "ASC", 
                      "ASSERTION", "AT", "AUTHORIZATION", "AVG", "BEGIN", 
                      "BETWEEN", "BIT", "BIT_LENGTH", "BOTH", "BY", "CASCADE", 
                      "CASCADED", "CASE", "CAST", "CATALOG", "CHAR", "CHARACTER", 
                      "CHAR_LENGTH", "CHARACTER_LENGTH", "CHECK", "CLOSE", 
                      "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COMMIT", 
                      "CONNECT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", 
                      "CONTINUE", "CONVERT", "CORRESPONDING", "COUNT", "CREATE", 
                      "CROSS", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATE", 
                      "DAY", "DEALLOCATE", "DECIMAL", "DECLARE", "DEFAULT", 
                      "DEFERRABLE", "DEFERRED", "DELETE", "DESC", "DESCRIBE", 
                      "DESCRIPTOR", "DIAGNOSTICS", "DISCONNECT", "DISTINCT", 
                      "DOMAIN", "DOUBLE", "DROP", "E_SYM", "ELSE", "END", 
                      "ENDEXEC_SYM", "ESCAPE", "EXCEPT", "EXCEPTION", "EXEC", 
                      "EXECUTE", "EXISTS", "EXTERNAL", "EXTRACT", "FALSE", 
                      "FETCH", "FIRST", "FLOAT", "FOR", "FOREIGN", "FOUND", 
                      "FROM", "FULL", "GET", "GLOBAL", "GO", "GOTO", "GRANT", 
                      "GROUP", "HAVING", "HOUR", "IDENTITY", "IMMEDIATE", 
                      "IN", "INDICATOR", "INITIALLY", "INNER", "INPUT", 
                      "INSENSITIVE", "INSERT", "INT_SYM", "INTEGER", "INTERSECT", 
                      "INTERVAL", "INTO", "IS", "ISOLATION", "JOIN", "KEY", 
                      "LANGUAGE", "LAST", "LEADING", "LEFT", "LEVEL", "LIKE", 
                      "LOCAL", "LOWER", "MATCH", "MAX", "MIN", "MINUTE", 
                      "MODULE", "MONTH", "NAMES", "NATIONAL", "NATURAL", 
                      "NCHAR", "NEXT", "NO", "NOT", "NULL", "NULLIF", "NUMERIC", 
                      "OCTET_LENGTH", "OF", "OFFSET", "ON", "ONLY", "OPEN", 
                      "OPTION", "OR", "ORDER", "OUTER", "OUTPUT", "OVERLAPS", 
                      "PAD", "PARTIAL", "POSITION", "PRECISION", "PREPARE", 
                      "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURE", 
                      "READ", "REAL_SYM", "REFERENCES", "RELATIVE", "RESTRICT", 
                      "REVOKE", "RIGHT", "ROLLBACK", "ROWS", "SCHEMA", "SCROLL", 
                      "SECOND", "SECTION", "SELECT", "SESSION", "SESSION_USER", 
                      "SET", "SIZE", "SMALLINT", "SOME", "SPACE", "SQL", 
                      "SQLCODE", "SQLERROR", "SQLSTATE", "SUBSTRING", "SUM", 
                      "SYSTEM_USER", "TABLE", "TEMPORARY", "THEN", "TIME", 
                      "TIMESTAMP", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TO", 
                      "TRAILING", "TRANSACTION", "TRANSLATE", "TRANSLATION", 
                      "TRIM", "TRUE", "UNION", "UNIQUE", "UNKNOWN", "UPDATE", 
                      "UPPER", "USAGE", "USER", "USING", "VALUE", "VALUES", 
                      "VARCHAR", "VARYING", "VIEW", "WHEN", "WHENEVER", 
                      "WHERE", "WITH", "WORK", "WRITE", "YEAR", "ZONE", 
                      "INT", "EXPONENT", "REAL", "HEX_DIGIT", "CSL", "ID", 
                      "AMPERSAND", "TILDE", "CIRCUMFLEX", "LPAREN", "RPAREN", 
                      "ASTERISK", "PLUS", "COMMA", "MINUS", "DOT", "COLON", 
                      "SEMI", "LTH", "EQ", "GTH", "QUESTION", "VERTBAR", 
                      "UNDERSCORE", "SOLIDUS", "CONCAT", "LEET", "GRET", 
                      "NOT_EQ", "DQ", "SQ", "MOD_SYM", "DQ_SYM", "WS", "COMMENT" ]

    RULE_approximate_numeric_literal = 0
    RULE_area = 1
    RULE_as_clause = 2
    RULE_between_predicate = 3
    RULE_bitwise_and = 4
    RULE_bitwise_not = 5
    RULE_bitwise_or = 6
    RULE_bitwise_xor = 7
    RULE_boolean_factor = 8
    RULE_boolean_literal = 9
    RULE_boolean_primary = 10
    RULE_boolean_term = 11
    RULE_boolean_value_expression = 12
    RULE_box = 13
    RULE_catalog_name = 14
    RULE_char_function = 15
    RULE_character_string_literal = 16
    RULE_character_value_expression = 17
    RULE_circle = 18
    RULE_circle_center = 19
    RULE_column_name = 20
    RULE_column_name_list = 21
    RULE_column_reference = 22
    RULE_comp_op = 23
    RULE_comparison_predicate = 24
    RULE_concatenation_operator = 25
    RULE_contains = 26
    RULE_contains_predicate = 27
    RULE_coord_sys = 28
    RULE_coord_value = 29
    RULE_coordinate1 = 30
    RULE_coordinate2 = 31
    RULE_coordinates = 32
    RULE_correlation_name = 33
    RULE_correlation_specification = 34
    RULE_delimited_identifier = 35
    RULE_derived_column = 36
    RULE_derived_table = 37
    RULE_distance = 38
    RULE_exact_numeric_literal = 39
    RULE_exists_predicate = 40
    RULE_factor = 41
    RULE_from_clause = 42
    RULE_general_literal = 43
    RULE_general_set_function = 44
    RULE_geometry_value_expression = 45
    RULE_group_by_clause = 46
    RULE_grouping_column_reference = 47
    RULE_grouping_column_reference_list = 48
    RULE_having_clause = 49
    RULE_identifier = 50
    RULE_in_predicate = 51
    RULE_in_predicate_value = 52
    RULE_in_value_list = 53
    RULE_intersects = 54
    RULE_intersects_predicate = 55
    RULE_join_column_list = 56
    RULE_join_condition = 57
    RULE_join_specification = 58
    RULE_join_type = 59
    RULE_joined_table = 60
    RULE_like_predicate = 61
    RULE_match_value = 62
    RULE_math_function = 63
    RULE_named_columns_join = 64
    RULE_non_join_query_expression = 65
    RULE_non_join_query_primary = 66
    RULE_non_join_query_term = 67
    RULE_non_predicate_geometry_function = 68
    RULE_null_predicate = 69
    RULE_numeric_geometry_function = 70
    RULE_numeric_primary = 71
    RULE_numeric_value_expression = 72
    RULE_numeric_value_function = 73
    RULE_offset_clause = 74
    RULE_order_by_clause = 75
    RULE_ordering_specification = 76
    RULE_outer_join_type = 77
    RULE_pattern = 78
    RULE_point = 79
    RULE_point_value = 80
    RULE_polygon = 81
    RULE_predicate = 82
    RULE_predicate_geometry_function = 83
    RULE_qualifier = 84
    RULE_query_expression = 85
    RULE_query_name = 86
    RULE_query = 87
    RULE_query_specification = 88
    RULE_query_term = 89
    RULE_radius = 90
    RULE_regular_identifier = 91
    RULE_schema_name = 92
    RULE_search_condition = 93
    RULE_select_list = 94
    RULE_select_query = 95
    RULE_select_sublist = 96
    RULE_set_function_specification = 97
    RULE_set_function_type = 98
    RULE_set_limit = 99
    RULE_set_quantifier = 100
    RULE_sign = 101
    RULE_signed_integer = 102
    RULE_sort_key = 103
    RULE_sort_specification = 104
    RULE_sort_specification_list = 105
    RULE_string_value_expression = 106
    RULE_string_value_function = 107
    RULE_subquery = 108
    RULE_table_expression = 109
    RULE_table_name = 110
    RULE_table_reference = 111
    RULE_table_subquery = 112
    RULE_term = 113
    RULE_trig_function = 114
    RULE_unqualified_schema_name = 115
    RULE_unsigned_decimal = 116
    RULE_unsigned_hexadecimal = 117
    RULE_unsigned_literal = 118
    RULE_unsigned_numeric_literal = 119
    RULE_unsigned_value_specification = 120
    RULE_user_defined_function = 121
    RULE_user_defined_function_name = 122
    RULE_user_defined_function_param = 123
    RULE_value_expression = 124
    RULE_value_expression_primary = 125
    RULE_where_clause = 126
    RULE_with_query = 127

    ruleNames =  [ "approximate_numeric_literal", "area", "as_clause", "between_predicate", 
                   "bitwise_and", "bitwise_not", "bitwise_or", "bitwise_xor", 
                   "boolean_factor", "boolean_literal", "boolean_primary", 
                   "boolean_term", "boolean_value_expression", "box", "catalog_name", 
                   "char_function", "character_string_literal", "character_value_expression", 
                   "circle", "circle_center", "column_name", "column_name_list", 
                   "column_reference", "comp_op", "comparison_predicate", 
                   "concatenation_operator", "contains", "contains_predicate", 
                   "coord_sys", "coord_value", "coordinate1", "coordinate2", 
                   "coordinates", "correlation_name", "correlation_specification", 
                   "delimited_identifier", "derived_column", "derived_table", 
                   "distance", "exact_numeric_literal", "exists_predicate", 
                   "factor", "from_clause", "general_literal", "general_set_function", 
                   "geometry_value_expression", "group_by_clause", "grouping_column_reference", 
                   "grouping_column_reference_list", "having_clause", "identifier", 
                   "in_predicate", "in_predicate_value", "in_value_list", 
                   "intersects", "intersects_predicate", "join_column_list", 
                   "join_condition", "join_specification", "join_type", 
                   "joined_table", "like_predicate", "match_value", "math_function", 
                   "named_columns_join", "non_join_query_expression", "non_join_query_primary", 
                   "non_join_query_term", "non_predicate_geometry_function", 
                   "null_predicate", "numeric_geometry_function", "numeric_primary", 
                   "numeric_value_expression", "numeric_value_function", 
                   "offset_clause", "order_by_clause", "ordering_specification", 
                   "outer_join_type", "pattern", "point", "point_value", 
                   "polygon", "predicate", "predicate_geometry_function", 
                   "qualifier", "query_expression", "query_name", "query", 
                   "query_specification", "query_term", "radius", "regular_identifier", 
                   "schema_name", "search_condition", "select_list", "select_query", 
                   "select_sublist", "set_function_specification", "set_function_type", 
                   "set_limit", "set_quantifier", "sign", "signed_integer", 
                   "sort_key", "sort_specification", "sort_specification_list", 
                   "string_value_expression", "string_value_function", "subquery", 
                   "table_expression", "table_name", "table_reference", 
                   "table_subquery", "term", "trig_function", "unqualified_schema_name", 
                   "unsigned_decimal", "unsigned_hexadecimal", "unsigned_literal", 
                   "unsigned_numeric_literal", "unsigned_value_specification", 
                   "user_defined_function", "user_defined_function_name", 
                   "user_defined_function_param", "value_expression", "value_expression_primary", 
                   "where_clause", "with_query" ]

    EOF = Token.EOF
    ABS=1
    ACOS=2
    AREA=3
    ASIN=4
    ATAN=5
    ATAN2=6
    BIT_AND=7
    BIT_NOT=8
    BIT_OR=9
    BIT_XOR=10
    BOX=11
    CEILING=12
    CIRCLE=13
    CONTAINS=14
    COS=15
    COT=16
    DEGREES=17
    DISTANCE=18
    EXP=19
    FLOOR=20
    ILIKE=21
    INTERSECTS=22
    LOG=23
    LOG10=24
    MOD=25
    PI=26
    POINT=27
    POLYGON=28
    POWER=29
    RADIANS=30
    RAND=31
    ROUND=32
    SIN=33
    SQRT=34
    TAN=35
    TOP=36
    TRUNCATE=37
    ABSOLUTE=38
    ACTION=39
    ADD=40
    ALL=41
    ALLOCATE=42
    ALTER=43
    AND=44
    ANY=45
    ARE=46
    AS=47
    ASC=48
    ASSERTION=49
    AT=50
    AUTHORIZATION=51
    AVG=52
    BEGIN=53
    BETWEEN=54
    BIT=55
    BIT_LENGTH=56
    BOTH=57
    BY=58
    CASCADE=59
    CASCADED=60
    CASE=61
    CAST=62
    CATALOG=63
    CHAR=64
    CHARACTER=65
    CHAR_LENGTH=66
    CHARACTER_LENGTH=67
    CHECK=68
    CLOSE=69
    COALESCE=70
    COLLATE=71
    COLLATION=72
    COLUMN=73
    COMMIT=74
    CONNECT=75
    CONNECTION=76
    CONSTRAINT=77
    CONSTRAINTS=78
    CONTINUE=79
    CONVERT=80
    CORRESPONDING=81
    COUNT=82
    CREATE=83
    CROSS=84
    CURRENT=85
    CURRENT_DATE=86
    CURRENT_TIME=87
    CURRENT_TIMESTAMP=88
    CURRENT_USER=89
    CURSOR=90
    DATE=91
    DAY=92
    DEALLOCATE=93
    DECIMAL=94
    DECLARE=95
    DEFAULT=96
    DEFERRABLE=97
    DEFERRED=98
    DELETE=99
    DESC=100
    DESCRIBE=101
    DESCRIPTOR=102
    DIAGNOSTICS=103
    DISCONNECT=104
    DISTINCT=105
    DOMAIN=106
    DOUBLE=107
    DROP=108
    E_SYM=109
    ELSE=110
    END=111
    ENDEXEC_SYM=112
    ESCAPE=113
    EXCEPT=114
    EXCEPTION=115
    EXEC=116
    EXECUTE=117
    EXISTS=118
    EXTERNAL=119
    EXTRACT=120
    FALSE=121
    FETCH=122
    FIRST=123
    FLOAT=124
    FOR=125
    FOREIGN=126
    FOUND=127
    FROM=128
    FULL=129
    GET=130
    GLOBAL=131
    GO=132
    GOTO=133
    GRANT=134
    GROUP=135
    HAVING=136
    HOUR=137
    IDENTITY=138
    IMMEDIATE=139
    IN=140
    INDICATOR=141
    INITIALLY=142
    INNER=143
    INPUT=144
    INSENSITIVE=145
    INSERT=146
    INT_SYM=147
    INTEGER=148
    INTERSECT=149
    INTERVAL=150
    INTO=151
    IS=152
    ISOLATION=153
    JOIN=154
    KEY=155
    LANGUAGE=156
    LAST=157
    LEADING=158
    LEFT=159
    LEVEL=160
    LIKE=161
    LOCAL=162
    LOWER=163
    MATCH=164
    MAX=165
    MIN=166
    MINUTE=167
    MODULE=168
    MONTH=169
    NAMES=170
    NATIONAL=171
    NATURAL=172
    NCHAR=173
    NEXT=174
    NO=175
    NOT=176
    NULL=177
    NULLIF=178
    NUMERIC=179
    OCTET_LENGTH=180
    OF=181
    OFFSET=182
    ON=183
    ONLY=184
    OPEN=185
    OPTION=186
    OR=187
    ORDER=188
    OUTER=189
    OUTPUT=190
    OVERLAPS=191
    PAD=192
    PARTIAL=193
    POSITION=194
    PRECISION=195
    PREPARE=196
    PRESERVE=197
    PRIMARY=198
    PRIOR=199
    PRIVILEGES=200
    PROCEDURE=201
    READ=202
    REAL_SYM=203
    REFERENCES=204
    RELATIVE=205
    RESTRICT=206
    REVOKE=207
    RIGHT=208
    ROLLBACK=209
    ROWS=210
    SCHEMA=211
    SCROLL=212
    SECOND=213
    SECTION=214
    SELECT=215
    SESSION=216
    SESSION_USER=217
    SET=218
    SIZE=219
    SMALLINT=220
    SOME=221
    SPACE=222
    SQL=223
    SQLCODE=224
    SQLERROR=225
    SQLSTATE=226
    SUBSTRING=227
    SUM=228
    SYSTEM_USER=229
    TABLE=230
    TEMPORARY=231
    THEN=232
    TIME=233
    TIMESTAMP=234
    TIMEZONE_HOUR=235
    TIMEZONE_MINUTE=236
    TO=237
    TRAILING=238
    TRANSACTION=239
    TRANSLATE=240
    TRANSLATION=241
    TRIM=242
    TRUE=243
    UNION=244
    UNIQUE=245
    UNKNOWN=246
    UPDATE=247
    UPPER=248
    USAGE=249
    USER=250
    USING=251
    VALUE=252
    VALUES=253
    VARCHAR=254
    VARYING=255
    VIEW=256
    WHEN=257
    WHENEVER=258
    WHERE=259
    WITH=260
    WORK=261
    WRITE=262
    YEAR=263
    ZONE=264
    INT=265
    EXPONENT=266
    REAL=267
    HEX_DIGIT=268
    CSL=269
    ID=270
    AMPERSAND=271
    TILDE=272
    CIRCUMFLEX=273
    LPAREN=274
    RPAREN=275
    ASTERISK=276
    PLUS=277
    COMMA=278
    MINUS=279
    DOT=280
    COLON=281
    SEMI=282
    LTH=283
    EQ=284
    GTH=285
    QUESTION=286
    VERTBAR=287
    UNDERSCORE=288
    SOLIDUS=289
    CONCAT=290
    LEET=291
    GRET=292
    NOT_EQ=293
    DQ=294
    SQ=295
    MOD_SYM=296
    DQ_SYM=297
    WS=298
    COMMENT=299

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Approximate_numeric_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REAL(self):
            return self.getToken(ADQLParser.REAL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_approximate_numeric_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterApproximate_numeric_literal" ):
                listener.enterApproximate_numeric_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitApproximate_numeric_literal" ):
                listener.exitApproximate_numeric_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApproximate_numeric_literal" ):
                return visitor.visitApproximate_numeric_literal(self)
            else:
                return visitor.visitChildren(self)




    def approximate_numeric_literal(self):

        localctx = ADQLParser.Approximate_numeric_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_approximate_numeric_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.match(ADQLParser.REAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AreaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AREA(self):
            return self.getToken(ADQLParser.AREA, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def geometry_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Geometry_value_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_area

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArea" ):
                listener.enterArea(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArea" ):
                listener.exitArea(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArea" ):
                return visitor.visitArea(self)
            else:
                return visitor.visitChildren(self)




    def area(self):

        localctx = ADQLParser.AreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_area)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.match(ADQLParser.AREA)
            self.state = 259
            self.match(ADQLParser.LPAREN)
            self.state = 260
            self.geometry_value_expression()
            self.state = 261
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(ADQLParser.Column_nameContext,0)


        def AS(self):
            return self.getToken(ADQLParser.AS, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_as_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_clause" ):
                listener.enterAs_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_clause" ):
                listener.exitAs_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_clause" ):
                return visitor.visitAs_clause(self)
            else:
                return visitor.visitChildren(self)




    def as_clause(self):

        localctx = ADQLParser.As_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_as_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 263
                self.match(ADQLParser.AS)


            self.state = 266
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Between_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Value_expressionContext,i)


        def BETWEEN(self):
            return self.getToken(ADQLParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(ADQLParser.AND, 0)

        def NOT(self):
            return self.getToken(ADQLParser.NOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_between_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetween_predicate" ):
                listener.enterBetween_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetween_predicate" ):
                listener.exitBetween_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetween_predicate" ):
                return visitor.visitBetween_predicate(self)
            else:
                return visitor.visitChildren(self)




    def between_predicate(self):

        localctx = ADQLParser.Between_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_between_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.value_expression()
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 269
                self.match(ADQLParser.NOT)


            self.state = 272
            self.match(ADQLParser.BETWEEN)
            self.state = 273
            self.value_expression()
            self.state = 274
            self.match(ADQLParser.AND)
            self.state = 275
            self.value_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AMPERSAND(self):
            return self.getToken(ADQLParser.AMPERSAND, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_bitwise_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwise_and" ):
                listener.enterBitwise_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwise_and" ):
                listener.exitBitwise_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_and" ):
                return visitor.visitBitwise_and(self)
            else:
                return visitor.visitChildren(self)




    def bitwise_and(self):

        localctx = ADQLParser.Bitwise_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_bitwise_and)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(ADQLParser.AMPERSAND)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_notContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TILDE(self):
            return self.getToken(ADQLParser.TILDE, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_bitwise_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwise_not" ):
                listener.enterBitwise_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwise_not" ):
                listener.exitBitwise_not(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_not" ):
                return visitor.visitBitwise_not(self)
            else:
                return visitor.visitChildren(self)




    def bitwise_not(self):

        localctx = ADQLParser.Bitwise_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_bitwise_not)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(ADQLParser.TILDE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VERTBAR(self):
            return self.getToken(ADQLParser.VERTBAR, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwise_or" ):
                listener.enterBitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwise_or" ):
                listener.exitBitwise_or(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_or" ):
                return visitor.visitBitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def bitwise_or(self):

        localctx = ADQLParser.Bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(ADQLParser.VERTBAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_xorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CIRCUMFLEX(self):
            return self.getToken(ADQLParser.CIRCUMFLEX, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_bitwise_xor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwise_xor" ):
                listener.enterBitwise_xor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwise_xor" ):
                listener.exitBitwise_xor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_xor" ):
                return visitor.visitBitwise_xor(self)
            else:
                return visitor.visitChildren(self)




    def bitwise_xor(self):

        localctx = ADQLParser.Bitwise_xorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_bitwise_xor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(ADQLParser.CIRCUMFLEX)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_factorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_primary(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_primaryContext,0)


        def NOT(self):
            return self.getToken(ADQLParser.NOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_boolean_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_factor" ):
                listener.enterBoolean_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_factor" ):
                listener.exitBoolean_factor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolean_factor" ):
                return visitor.visitBoolean_factor(self)
            else:
                return visitor.visitChildren(self)




    def boolean_factor(self):

        localctx = ADQLParser.Boolean_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_boolean_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 285
                self.match(ADQLParser.NOT)


            self.state = 288
            self.boolean_primary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(ADQLParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(ADQLParser.FALSE, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolean_literal" ):
                return visitor.visitBoolean_literal(self)
            else:
                return visitor.visitChildren(self)




    def boolean_literal(self):

        localctx = ADQLParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            _la = self._input.LA(1)
            if not(_la==121 or _la==243):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(ADQLParser.Search_conditionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def predicate(self):
            return self.getTypedRuleContext(ADQLParser.PredicateContext,0)


        def boolean_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_boolean_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_primary" ):
                listener.enterBoolean_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_primary" ):
                listener.exitBoolean_primary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolean_primary" ):
                return visitor.visitBoolean_primary(self)
            else:
                return visitor.visitChildren(self)




    def boolean_primary(self):

        localctx = ADQLParser.Boolean_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_boolean_primary)
        try:
            self.state = 298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 292
                self.match(ADQLParser.LPAREN)
                self.state = 293
                self.search_condition(0)
                self.state = 294
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 296
                self.predicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 297
                self.boolean_value_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_factor(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_factorContext,0)


        def boolean_term(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_termContext,0)


        def AND(self):
            return self.getToken(ADQLParser.AND, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_boolean_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_term" ):
                listener.enterBoolean_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_term" ):
                listener.exitBoolean_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolean_term" ):
                return visitor.visitBoolean_term(self)
            else:
                return visitor.visitChildren(self)



    def boolean_term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Boolean_termContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_boolean_term, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.boolean_factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 308
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ADQLParser.Boolean_termContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_boolean_term)
                    self.state = 303
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 304
                    self.match(ADQLParser.AND)
                    self.state = 305
                    self.boolean_factor() 
                self.state = 310
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Boolean_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_literal(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_literalContext,0)


        def user_defined_function(self):
            return self.getTypedRuleContext(ADQLParser.User_defined_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_boolean_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_value_expression" ):
                listener.enterBoolean_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_value_expression" ):
                listener.exitBoolean_value_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolean_value_expression" ):
                return visitor.visitBoolean_value_expression(self)
            else:
                return visitor.visitChildren(self)




    def boolean_value_expression(self):

        localctx = ADQLParser.Boolean_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_boolean_value_expression)
        try:
            self.state = 313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [121, 243]:
                self.enterOuterAlt(localctx, 1)
                self.state = 311
                self.boolean_literal()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 312
                self.user_defined_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOX(self):
            return self.getToken(ADQLParser.BOX, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def coordinates(self):
            return self.getTypedRuleContext(ADQLParser.CoordinatesContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def numeric_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Numeric_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,i)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def coord_sys(self):
            return self.getTypedRuleContext(ADQLParser.Coord_sysContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_box

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBox" ):
                listener.enterBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBox" ):
                listener.exitBox(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBox" ):
                return visitor.visitBox(self)
            else:
                return visitor.visitChildren(self)




    def box(self):

        localctx = ADQLParser.BoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_box)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(ADQLParser.BOX)
            self.state = 316
            self.match(ADQLParser.LPAREN)
            self.state = 320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 317
                self.coord_sys()
                self.state = 318
                self.match(ADQLParser.COMMA)


            self.state = 322
            self.coordinates()
            self.state = 323
            self.match(ADQLParser.COMMA)
            self.state = 324
            self.numeric_value_expression(0)
            self.state = 325
            self.match(ADQLParser.COMMA)
            self.state = 326
            self.numeric_value_expression(0)
            self.state = 327
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Catalog_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_catalog_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatalog_name" ):
                listener.enterCatalog_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatalog_name" ):
                listener.exitCatalog_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatalog_name" ):
                return visitor.visitCatalog_name(self)
            else:
                return visitor.visitChildren(self)




    def catalog_name(self):

        localctx = ADQLParser.Catalog_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_catalog_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.match(ADQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Char_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOWER(self):
            return self.getToken(ADQLParser.LOWER, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def character_string_literal(self):
            return self.getTypedRuleContext(ADQLParser.Character_string_literalContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_char_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChar_function" ):
                listener.enterChar_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChar_function" ):
                listener.exitChar_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChar_function" ):
                return visitor.visitChar_function(self)
            else:
                return visitor.visitChildren(self)




    def char_function(self):

        localctx = ADQLParser.Char_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_char_function)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self.match(ADQLParser.LOWER)
            self.state = 332
            self.match(ADQLParser.LPAREN)
            self.state = 333
            self.character_string_literal()
            self.state = 334
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_string_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CSL(self):
            return self.getToken(ADQLParser.CSL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_character_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_string_literal" ):
                listener.enterCharacter_string_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_string_literal" ):
                listener.exitCharacter_string_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter_string_literal" ):
                return visitor.visitCharacter_string_literal(self)
            else:
                return visitor.visitChildren(self)




    def character_string_literal(self):

        localctx = ADQLParser.Character_string_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_character_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(ADQLParser.CSL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Character_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression_primary(self):
            return self.getTypedRuleContext(ADQLParser.Value_expression_primaryContext,0)


        def string_value_function(self):
            return self.getTypedRuleContext(ADQLParser.String_value_functionContext,0)


        def character_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Character_value_expressionContext,0)


        def concatenation_operator(self):
            return self.getTypedRuleContext(ADQLParser.Concatenation_operatorContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_character_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharacter_value_expression" ):
                listener.enterCharacter_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharacter_value_expression" ):
                listener.exitCharacter_value_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter_value_expression" ):
                return visitor.visitCharacter_value_expression(self)
            else:
                return visitor.visitChildren(self)



    def character_value_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Character_value_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_character_value_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 339
                self.value_expression_primary()
                pass

            elif la_ == 2:
                self.state = 340
                self.string_value_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ADQLParser.Character_value_expressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_character_value_expression)
                    self.state = 343
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 344
                    self.concatenation_operator()
                    self.state = 347
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                    if la_ == 1:
                        self.state = 345
                        self.value_expression_primary()
                        pass

                    elif la_ == 2:
                        self.state = 346
                        self.string_value_function()
                        pass

             
                self.state = 353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CIRCLE(self):
            return self.getToken(ADQLParser.CIRCLE, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def radius(self):
            return self.getTypedRuleContext(ADQLParser.RadiusContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def circle_center(self):
            return self.getTypedRuleContext(ADQLParser.Circle_centerContext,0)


        def coord_sys(self):
            return self.getTypedRuleContext(ADQLParser.Coord_sysContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_circle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle" ):
                listener.enterCircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle" ):
                listener.exitCircle(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCircle" ):
                return visitor.visitCircle(self)
            else:
                return visitor.visitChildren(self)




    def circle(self):

        localctx = ADQLParser.CircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_circle)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(ADQLParser.CIRCLE)
            self.state = 355
            self.match(ADQLParser.LPAREN)

            self.state = 359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 356
                self.coord_sys()
                self.state = 357
                self.match(ADQLParser.COMMA)


            self.state = 361
            self.circle_center()
            self.state = 363
            self.match(ADQLParser.COMMA)
            self.state = 364
            self.radius()
            self.state = 365
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Circle_centerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coordinates(self):
            return self.getTypedRuleContext(ADQLParser.CoordinatesContext,0)


        def coord_value(self):
            return self.getTypedRuleContext(ADQLParser.Coord_valueContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_circle_center

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle_center" ):
                listener.enterCircle_center(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle_center" ):
                listener.exitCircle_center(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCircle_center" ):
                return visitor.visitCircle_center(self)
            else:
                return visitor.visitChildren(self)




    def circle_center(self):

        localctx = ADQLParser.Circle_centerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_circle_center)
        try:
            self.state = 369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 367
                self.coordinates()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 368
                self.coord_value()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ADQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = ADQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list" ):
                return visitor.visitColumn_name_list(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list(self):

        localctx = ADQLParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.column_name()
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==278:
                self.state = 374
                self.match(ADQLParser.COMMA)
                self.state = 375
                self.column_name()
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(ADQLParser.Column_nameContext,0)


        def qualifier(self):
            return self.getTypedRuleContext(ADQLParser.QualifierContext,0)


        def DOT(self):
            return self.getToken(ADQLParser.DOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_column_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_reference" ):
                listener.enterColumn_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_reference" ):
                listener.exitColumn_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_reference" ):
                return visitor.visitColumn_reference(self)
            else:
                return visitor.visitChildren(self)




    def column_reference(self):

        localctx = ADQLParser.Column_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_column_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 381
                self.qualifier()
                self.state = 382
                self.match(ADQLParser.DOT)


            self.state = 386
            self.column_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQ(self):
            return self.getToken(ADQLParser.EQ, 0)

        def NOT_EQ(self):
            return self.getToken(ADQLParser.NOT_EQ, 0)

        def LTH(self):
            return self.getToken(ADQLParser.LTH, 0)

        def GTH(self):
            return self.getToken(ADQLParser.GTH, 0)

        def GRET(self):
            return self.getToken(ADQLParser.GRET, 0)

        def LEET(self):
            return self.getToken(ADQLParser.LEET, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = ADQLParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_comp_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            _la = self._input.LA(1)
            if not(((((_la - 283)) & ~0x3f) == 0 and ((1 << (_la - 283)) & 1799) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comparison_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Value_expressionContext,i)


        def comp_op(self):
            return self.getTypedRuleContext(ADQLParser.Comp_opContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_comparison_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_predicate" ):
                listener.enterComparison_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_predicate" ):
                listener.exitComparison_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison_predicate" ):
                return visitor.visitComparison_predicate(self)
            else:
                return visitor.visitChildren(self)




    def comparison_predicate(self):

        localctx = ADQLParser.Comparison_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_comparison_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.value_expression()
            self.state = 391
            self.comp_op()
            self.state = 392
            self.value_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Concatenation_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONCAT(self):
            return self.getToken(ADQLParser.CONCAT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_concatenation_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenation_operator" ):
                listener.enterConcatenation_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenation_operator" ):
                listener.exitConcatenation_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenation_operator" ):
                return visitor.visitConcatenation_operator(self)
            else:
                return visitor.visitChildren(self)




    def concatenation_operator(self):

        localctx = ADQLParser.Concatenation_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_concatenation_operator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(ADQLParser.CONCAT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINS(self):
            return self.getToken(ADQLParser.CONTAINS, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def geometry_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Geometry_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Geometry_value_expressionContext,i)


        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_contains

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContains" ):
                listener.enterContains(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContains" ):
                listener.exitContains(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContains" ):
                return visitor.visitContains(self)
            else:
                return visitor.visitChildren(self)




    def contains(self):

        localctx = ADQLParser.ContainsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_contains)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(ADQLParser.CONTAINS)
            self.state = 397
            self.match(ADQLParser.LPAREN)
            self.state = 398
            self.geometry_value_expression()
            self.state = 399
            self.match(ADQLParser.COMMA)
            self.state = 400
            self.geometry_value_expression()
            self.state = 401
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Contains_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(ADQLParser.INT, 0)

        def EQ(self):
            return self.getToken(ADQLParser.EQ, 0)

        def contains(self):
            return self.getTypedRuleContext(ADQLParser.ContainsContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_contains_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContains_predicate" ):
                listener.enterContains_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContains_predicate" ):
                listener.exitContains_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContains_predicate" ):
                return visitor.visitContains_predicate(self)
            else:
                return visitor.visitChildren(self)




    def contains_predicate(self):

        localctx = ADQLParser.Contains_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_contains_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(ADQLParser.INT)
            self.state = 404
            self.match(ADQLParser.EQ)
            self.state = 405
            self.contains()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coord_sysContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.String_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_coord_sys

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoord_sys" ):
                listener.enterCoord_sys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoord_sys" ):
                listener.exitCoord_sys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoord_sys" ):
                return visitor.visitCoord_sys(self)
            else:
                return visitor.visitChildren(self)




    def coord_sys(self):

        localctx = ADQLParser.Coord_sysContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_coord_sys)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.string_value_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coord_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point_value(self):
            return self.getTypedRuleContext(ADQLParser.Point_valueContext,0)


        def column_reference(self):
            return self.getTypedRuleContext(ADQLParser.Column_referenceContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_coord_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoord_value" ):
                listener.enterCoord_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoord_value" ):
                listener.exitCoord_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoord_value" ):
                return visitor.visitCoord_value(self)
            else:
                return visitor.visitChildren(self)




    def coord_value(self):

        localctx = ADQLParser.Coord_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_coord_value)
        try:
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 409
                self.point_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 410
                self.column_reference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_coordinate1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate1" ):
                listener.enterCoordinate1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate1" ):
                listener.exitCoordinate1(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoordinate1" ):
                return visitor.visitCoordinate1(self)
            else:
                return visitor.visitChildren(self)




    def coordinate1(self):

        localctx = ADQLParser.Coordinate1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_coordinate1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.numeric_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_coordinate2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate2" ):
                listener.enterCoordinate2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate2" ):
                listener.exitCoordinate2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoordinate2" ):
                return visitor.visitCoordinate2(self)
            else:
                return visitor.visitChildren(self)




    def coordinate2(self):

        localctx = ADQLParser.Coordinate2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_coordinate2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.numeric_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CoordinatesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coordinate1(self):
            return self.getTypedRuleContext(ADQLParser.Coordinate1Context,0)


        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def coordinate2(self):
            return self.getTypedRuleContext(ADQLParser.Coordinate2Context,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_coordinates

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinates" ):
                listener.enterCoordinates(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinates" ):
                listener.exitCoordinates(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoordinates" ):
                return visitor.visitCoordinates(self)
            else:
                return visitor.visitChildren(self)




    def coordinates(self):

        localctx = ADQLParser.CoordinatesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_coordinates)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.coordinate1()
            self.state = 418
            self.match(ADQLParser.COMMA)
            self.state = 419
            self.coordinate2()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Correlation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ADQLParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_correlation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCorrelation_name" ):
                listener.enterCorrelation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCorrelation_name" ):
                listener.exitCorrelation_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCorrelation_name" ):
                return visitor.visitCorrelation_name(self)
            else:
                return visitor.visitChildren(self)




    def correlation_name(self):

        localctx = ADQLParser.Correlation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_correlation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Correlation_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def correlation_name(self):
            return self.getTypedRuleContext(ADQLParser.Correlation_nameContext,0)


        def AS(self):
            return self.getToken(ADQLParser.AS, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_correlation_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCorrelation_specification" ):
                listener.enterCorrelation_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCorrelation_specification" ):
                listener.exitCorrelation_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCorrelation_specification" ):
                return visitor.visitCorrelation_specification(self)
            else:
                return visitor.visitChildren(self)




    def correlation_specification(self):

        localctx = ADQLParser.Correlation_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_correlation_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 423
                self.match(ADQLParser.AS)


            self.state = 426
            self.correlation_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delimited_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DQ(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.DQ)
            else:
                return self.getToken(ADQLParser.DQ, i)

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_delimited_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelimited_identifier" ):
                listener.enterDelimited_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelimited_identifier" ):
                listener.exitDelimited_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelimited_identifier" ):
                return visitor.visitDelimited_identifier(self)
            else:
                return visitor.visitChildren(self)




    def delimited_identifier(self):

        localctx = ADQLParser.Delimited_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_delimited_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(ADQLParser.DQ)
            self.state = 429
            self.match(ADQLParser.ID)
            self.state = 430
            self.match(ADQLParser.DQ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derived_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def as_clause(self):
            return self.getTypedRuleContext(ADQLParser.As_clauseContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_derived_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_column" ):
                listener.enterDerived_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_column" ):
                listener.exitDerived_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerived_column" ):
                return visitor.visitDerived_column(self)
            else:
                return visitor.visitChildren(self)




    def derived_column(self):

        localctx = ADQLParser.Derived_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_derived_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self.value_expression()
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47 or _la==270 or _la==294:
                self.state = 433
                self.as_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derived_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_subquery(self):
            return self.getTypedRuleContext(ADQLParser.Table_subqueryContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_derived_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_table" ):
                listener.enterDerived_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_table" ):
                listener.exitDerived_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerived_table" ):
                return visitor.visitDerived_table(self)
            else:
                return visitor.visitChildren(self)




    def derived_table(self):

        localctx = ADQLParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_derived_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.table_subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DistanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTANCE(self):
            return self.getToken(ADQLParser.DISTANCE, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def coord_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Coord_valueContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Coord_valueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def numeric_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Numeric_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,i)


        def getRuleIndex(self):
            return ADQLParser.RULE_distance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance" ):
                listener.enterDistance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance" ):
                listener.exitDistance(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDistance" ):
                return visitor.visitDistance(self)
            else:
                return visitor.visitChildren(self)




    def distance(self):

        localctx = ADQLParser.DistanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_distance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(ADQLParser.DISTANCE)
            self.state = 439
            self.match(ADQLParser.LPAREN)
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 440
                self.coord_value()
                self.state = 441
                self.match(ADQLParser.COMMA)
                self.state = 442
                self.coord_value()
                pass

            elif la_ == 2:
                self.state = 444
                self.numeric_value_expression(0)
                self.state = 445
                self.match(ADQLParser.COMMA)
                self.state = 446
                self.numeric_value_expression(0)
                self.state = 447
                self.match(ADQLParser.COMMA)
                self.state = 448
                self.numeric_value_expression(0)
                self.state = 449
                self.match(ADQLParser.COMMA)
                self.state = 450
                self.numeric_value_expression(0)
                pass


            self.state = 454
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exact_numeric_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_decimal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Unsigned_decimalContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,i)


        def DOT(self):
            return self.getToken(ADQLParser.DOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_exact_numeric_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExact_numeric_literal" ):
                listener.enterExact_numeric_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExact_numeric_literal" ):
                listener.exitExact_numeric_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExact_numeric_literal" ):
                return visitor.visitExact_numeric_literal(self)
            else:
                return visitor.visitChildren(self)




    def exact_numeric_literal(self):

        localctx = ADQLParser.Exact_numeric_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_exact_numeric_literal)
        try:
            self.state = 465
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [265]:
                self.enterOuterAlt(localctx, 1)
                self.state = 456
                self.unsigned_decimal()
                self.state = 461
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 457
                    self.match(ADQLParser.DOT)
                    self.state = 459
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                    if la_ == 1:
                        self.state = 458
                        self.unsigned_decimal()




                pass
            elif token in [280]:
                self.enterOuterAlt(localctx, 2)
                self.state = 463
                self.match(ADQLParser.DOT)
                self.state = 464
                self.unsigned_decimal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Exists_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(ADQLParser.EXISTS, 0)

        def table_subquery(self):
            return self.getTypedRuleContext(ADQLParser.Table_subqueryContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_exists_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExists_predicate" ):
                listener.enterExists_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExists_predicate" ):
                listener.exitExists_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists_predicate" ):
                return visitor.visitExists_predicate(self)
            else:
                return visitor.visitChildren(self)




    def exists_predicate(self):

        localctx = ADQLParser.Exists_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_exists_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(ADQLParser.EXISTS)
            self.state = 468
            self.table_subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_primary(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_primaryContext,0)


        def sign(self):
            return self.getTypedRuleContext(ADQLParser.SignContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = ADQLParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_factor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 470
                self.sign()


            self.state = 473
            self.numeric_primary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class From_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(ADQLParser.FROM, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Table_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_from_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_clause" ):
                listener.enterFrom_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_clause" ):
                listener.exitFrom_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_clause" ):
                return visitor.visitFrom_clause(self)
            else:
                return visitor.visitChildren(self)




    def from_clause(self):

        localctx = ADQLParser.From_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_from_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(ADQLParser.FROM)
            self.state = 476
            self.table_reference(0)
            self.state = 481
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 477
                    self.match(ADQLParser.COMMA)
                    self.state = 478
                    self.table_reference(0) 
                self.state = 483
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_string_literal(self):
            return self.getTypedRuleContext(ADQLParser.Character_string_literalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_general_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_literal" ):
                listener.enterGeneral_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_literal" ):
                listener.exitGeneral_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_literal" ):
                return visitor.visitGeneral_literal(self)
            else:
                return visitor.visitChildren(self)




    def general_literal(self):

        localctx = ADQLParser.General_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_general_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.character_string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_set_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def set_function_type(self):
            return self.getTypedRuleContext(ADQLParser.Set_function_typeContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def set_quantifier(self):
            return self.getTypedRuleContext(ADQLParser.Set_quantifierContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_general_set_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_set_function" ):
                listener.enterGeneral_set_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_set_function" ):
                listener.exitGeneral_set_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeneral_set_function" ):
                return visitor.visitGeneral_set_function(self)
            else:
                return visitor.visitChildren(self)




    def general_set_function(self):

        localctx = ADQLParser.General_set_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_general_set_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.set_function_type()
            self.state = 487
            self.match(ADQLParser.LPAREN)
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==105:
                self.state = 488
                self.set_quantifier()


            self.state = 491
            self.value_expression()
            self.state = 492
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Geometry_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def box(self):
            return self.getTypedRuleContext(ADQLParser.BoxContext,0)


        def circle(self):
            return self.getTypedRuleContext(ADQLParser.CircleContext,0)


        def point(self):
            return self.getTypedRuleContext(ADQLParser.PointContext,0)


        def polygon(self):
            return self.getTypedRuleContext(ADQLParser.PolygonContext,0)


        def user_defined_function(self):
            return self.getTypedRuleContext(ADQLParser.User_defined_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_geometry_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeometry_value_expression" ):
                listener.enterGeometry_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeometry_value_expression" ):
                listener.exitGeometry_value_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGeometry_value_expression" ):
                return visitor.visitGeometry_value_expression(self)
            else:
                return visitor.visitChildren(self)




    def geometry_value_expression(self):

        localctx = ADQLParser.Geometry_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_geometry_value_expression)
        try:
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.box()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.circle()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 3)
                self.state = 496
                self.point()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 4)
                self.state = 497
                self.polygon()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 5)
                self.state = 498
                self.user_defined_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(ADQLParser.GROUP, 0)

        def BY(self):
            return self.getToken(ADQLParser.BY, 0)

        def grouping_column_reference_list(self):
            return self.getTypedRuleContext(ADQLParser.Grouping_column_reference_listContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_clause" ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = ADQLParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_group_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(ADQLParser.GROUP)
            self.state = 502
            self.match(ADQLParser.BY)
            self.state = 503
            self.grouping_column_reference_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_column_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_reference(self):
            return self.getTypedRuleContext(ADQLParser.Column_referenceContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_grouping_column_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_column_reference" ):
                listener.enterGrouping_column_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_column_reference" ):
                listener.exitGrouping_column_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_column_reference" ):
                return visitor.visitGrouping_column_reference(self)
            else:
                return visitor.visitChildren(self)




    def grouping_column_reference(self):

        localctx = ADQLParser.Grouping_column_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_grouping_column_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.column_reference()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Grouping_column_reference_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def grouping_column_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Grouping_column_referenceContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Grouping_column_referenceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_grouping_column_reference_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrouping_column_reference_list" ):
                listener.enterGrouping_column_reference_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrouping_column_reference_list" ):
                listener.exitGrouping_column_reference_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrouping_column_reference_list" ):
                return visitor.visitGrouping_column_reference_list(self)
            else:
                return visitor.visitChildren(self)




    def grouping_column_reference_list(self):

        localctx = ADQLParser.Grouping_column_reference_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_grouping_column_reference_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.grouping_column_reference()
            self.state = 512
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 508
                    self.match(ADQLParser.COMMA)
                    self.state = 509
                    self.grouping_column_reference() 
                self.state = 514
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(ADQLParser.HAVING, 0)

        def search_condition(self):
            return self.getTypedRuleContext(ADQLParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHaving_clause" ):
                return visitor.visitHaving_clause(self)
            else:
                return visitor.visitChildren(self)




    def having_clause(self):

        localctx = ADQLParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 515
            self.match(ADQLParser.HAVING)
            self.state = 516
            self.search_condition(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_identifier(self):
            return self.getTypedRuleContext(ADQLParser.Regular_identifierContext,0)


        def delimited_identifier(self):
            return self.getTypedRuleContext(ADQLParser.Delimited_identifierContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = ADQLParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_identifier)
        try:
            self.state = 520
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [270]:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.regular_identifier()
                pass
            elif token in [294]:
                self.enterOuterAlt(localctx, 2)
                self.state = 519
                self.delimited_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def IN(self):
            return self.getToken(ADQLParser.IN, 0)

        def in_predicate_value(self):
            return self.getTypedRuleContext(ADQLParser.In_predicate_valueContext,0)


        def NOT(self):
            return self.getToken(ADQLParser.NOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_in_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_predicate" ):
                listener.enterIn_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_predicate" ):
                listener.exitIn_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_predicate" ):
                return visitor.visitIn_predicate(self)
            else:
                return visitor.visitChildren(self)




    def in_predicate(self):

        localctx = ADQLParser.In_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_in_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.value_expression()
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 523
                self.match(ADQLParser.NOT)


            self.state = 526
            self.match(ADQLParser.IN)
            self.state = 527
            self.in_predicate_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_predicate_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_subquery(self):
            return self.getTypedRuleContext(ADQLParser.Table_subqueryContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def in_value_list(self):
            return self.getTypedRuleContext(ADQLParser.In_value_listContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_in_predicate_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_predicate_value" ):
                listener.enterIn_predicate_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_predicate_value" ):
                listener.exitIn_predicate_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_predicate_value" ):
                return visitor.visitIn_predicate_value(self)
            else:
                return visitor.visitChildren(self)




    def in_predicate_value(self):

        localctx = ADQLParser.In_predicate_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_in_predicate_value)
        try:
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self.table_subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 530
                self.match(ADQLParser.LPAREN)
                self.state = 531
                self.in_value_list()
                self.state = 532
                self.match(ADQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_value_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Value_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_in_value_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_value_list" ):
                listener.enterIn_value_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_value_list" ):
                listener.exitIn_value_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_value_list" ):
                return visitor.visitIn_value_list(self)
            else:
                return visitor.visitChildren(self)




    def in_value_list(self):

        localctx = ADQLParser.In_value_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_in_value_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.value_expression()
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==278:
                self.state = 537
                self.match(ADQLParser.COMMA)
                self.state = 538
                self.value_expression()
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntersectsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERSECTS(self):
            return self.getToken(ADQLParser.INTERSECTS, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def geometry_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Geometry_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Geometry_value_expressionContext,i)


        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_intersects

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersects" ):
                listener.enterIntersects(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersects" ):
                listener.exitIntersects(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntersects" ):
                return visitor.visitIntersects(self)
            else:
                return visitor.visitChildren(self)




    def intersects(self):

        localctx = ADQLParser.IntersectsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_intersects)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(ADQLParser.INTERSECTS)
            self.state = 545
            self.match(ADQLParser.LPAREN)
            self.state = 546
            self.geometry_value_expression()
            self.state = 547
            self.match(ADQLParser.COMMA)
            self.state = 548
            self.geometry_value_expression()
            self.state = 549
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Intersects_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(ADQLParser.INT, 0)

        def EQ(self):
            return self.getToken(ADQLParser.EQ, 0)

        def intersects(self):
            return self.getTypedRuleContext(ADQLParser.IntersectsContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_intersects_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntersects_predicate" ):
                listener.enterIntersects_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntersects_predicate" ):
                listener.exitIntersects_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntersects_predicate" ):
                return visitor.visitIntersects_predicate(self)
            else:
                return visitor.visitChildren(self)




    def intersects_predicate(self):

        localctx = ADQLParser.Intersects_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_intersects_predicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self.match(ADQLParser.INT)
            self.state = 552
            self.match(ADQLParser.EQ)
            self.state = 553
            self.intersects()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_column_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name_list(self):
            return self.getTypedRuleContext(ADQLParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_join_column_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_column_list" ):
                listener.enterJoin_column_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_column_list" ):
                listener.exitJoin_column_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_column_list" ):
                return visitor.visitJoin_column_list(self)
            else:
                return visitor.visitChildren(self)




    def join_column_list(self):

        localctx = ADQLParser.Join_column_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_join_column_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.column_name_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(ADQLParser.ON, 0)

        def search_condition(self):
            return self.getTypedRuleContext(ADQLParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_join_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_condition" ):
                listener.enterJoin_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_condition" ):
                listener.exitJoin_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_condition" ):
                return visitor.visitJoin_condition(self)
            else:
                return visitor.visitChildren(self)




    def join_condition(self):

        localctx = ADQLParser.Join_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_join_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(ADQLParser.ON)
            self.state = 558
            self.search_condition(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def join_condition(self):
            return self.getTypedRuleContext(ADQLParser.Join_conditionContext,0)


        def named_columns_join(self):
            return self.getTypedRuleContext(ADQLParser.Named_columns_joinContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_join_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_specification" ):
                listener.enterJoin_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_specification" ):
                listener.exitJoin_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_specification" ):
                return visitor.visitJoin_specification(self)
            else:
                return visitor.visitChildren(self)




    def join_specification(self):

        localctx = ADQLParser.Join_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_join_specification)
        try:
            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [183]:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.join_condition()
                pass
            elif token in [251]:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.named_columns_join()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(ADQLParser.INNER, 0)

        def outer_join_type(self):
            return self.getTypedRuleContext(ADQLParser.Outer_join_typeContext,0)


        def OUTER(self):
            return self.getToken(ADQLParser.OUTER, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_type" ):
                listener.enterJoin_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_type" ):
                listener.exitJoin_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_type" ):
                return visitor.visitJoin_type(self)
            else:
                return visitor.visitChildren(self)




    def join_type(self):

        localctx = ADQLParser.Join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_join_type)
        self._la = 0 # Token type
        try:
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.match(ADQLParser.INNER)
                pass
            elif token in [129, 159, 208]:
                self.enterOuterAlt(localctx, 2)
                self.state = 565
                self.outer_join_type()
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==189:
                    self.state = 566
                    self.match(ADQLParser.OUTER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Joined_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Table_referenceContext,i)


        def JOIN(self):
            return self.getToken(ADQLParser.JOIN, 0)

        def NATURAL(self):
            return self.getToken(ADQLParser.NATURAL, 0)

        def join_type(self):
            return self.getTypedRuleContext(ADQLParser.Join_typeContext,0)


        def join_specification(self):
            return self.getTypedRuleContext(ADQLParser.Join_specificationContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def joined_table(self):
            return self.getTypedRuleContext(ADQLParser.Joined_tableContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_joined_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoined_table" ):
                listener.enterJoined_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoined_table" ):
                listener.exitJoined_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoined_table" ):
                return visitor.visitJoined_table(self)
            else:
                return visitor.visitChildren(self)




    def joined_table(self):

        localctx = ADQLParser.Joined_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_joined_table)
        self._la = 0 # Token type
        try:
            self.state = 587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.table_reference(0)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 572
                    self.match(ADQLParser.NATURAL)


                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 1073758209) != 0) or _la==208:
                    self.state = 575
                    self.join_type()


                self.state = 578
                self.match(ADQLParser.JOIN)
                self.state = 579
                self.table_reference(0)
                self.state = 581
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 580
                    self.join_specification()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 583
                self.match(ADQLParser.LPAREN)
                self.state = 584
                self.joined_table()
                self.state = 585
                self.match(ADQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Like_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def match_value(self):
            return self.getTypedRuleContext(ADQLParser.Match_valueContext,0)


        def LIKE(self):
            return self.getToken(ADQLParser.LIKE, 0)

        def pattern(self):
            return self.getTypedRuleContext(ADQLParser.PatternContext,0)


        def NOT(self):
            return self.getToken(ADQLParser.NOT, 0)

        def ILIKE(self):
            return self.getToken(ADQLParser.ILIKE, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_like_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLike_predicate" ):
                listener.enterLike_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLike_predicate" ):
                listener.exitLike_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLike_predicate" ):
                return visitor.visitLike_predicate(self)
            else:
                return visitor.visitChildren(self)




    def like_predicate(self):

        localctx = ADQLParser.Like_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_like_predicate)
        self._la = 0 # Token type
        try:
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 589
                self.match_value()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==176:
                    self.state = 590
                    self.match(ADQLParser.NOT)


                self.state = 593
                self.match(ADQLParser.LIKE)
                self.state = 594
                self.pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self.match_value()
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==176:
                    self.state = 597
                    self.match(ADQLParser.NOT)


                self.state = 600
                self.match(ADQLParser.ILIKE)
                self.state = 601
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Character_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_match_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_value" ):
                listener.enterMatch_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_value" ):
                listener.exitMatch_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_value" ):
                return visitor.visitMatch_value(self)
            else:
                return visitor.visitChildren(self)




    def match_value(self):

        localctx = ADQLParser.Match_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_match_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.character_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Math_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(ADQLParser.ABS, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def numeric_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Numeric_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,i)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def CEILING(self):
            return self.getToken(ADQLParser.CEILING, 0)

        def DEGREES(self):
            return self.getToken(ADQLParser.DEGREES, 0)

        def EXP(self):
            return self.getToken(ADQLParser.EXP, 0)

        def FLOOR(self):
            return self.getToken(ADQLParser.FLOOR, 0)

        def LOG(self):
            return self.getToken(ADQLParser.LOG, 0)

        def LOG10(self):
            return self.getToken(ADQLParser.LOG10, 0)

        def MOD(self):
            return self.getToken(ADQLParser.MOD, 0)

        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def PI(self):
            return self.getToken(ADQLParser.PI, 0)

        def POWER(self):
            return self.getToken(ADQLParser.POWER, 0)

        def RADIANS(self):
            return self.getToken(ADQLParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(ADQLParser.RAND, 0)

        def unsigned_decimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,0)


        def ROUND(self):
            return self.getToken(ADQLParser.ROUND, 0)

        def signed_integer(self):
            return self.getTypedRuleContext(ADQLParser.Signed_integerContext,0)


        def SQRT(self):
            return self.getToken(ADQLParser.SQRT, 0)

        def TRUNCATE(self):
            return self.getToken(ADQLParser.TRUNCATE, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_math_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMath_function" ):
                listener.enterMath_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMath_function" ):
                listener.exitMath_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMath_function" ):
                return visitor.visitMath_function(self)
            else:
                return visitor.visitChildren(self)




    def math_function(self):

        localctx = ADQLParser.Math_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_math_function)
        self._la = 0 # Token type
        try:
            self.state = 693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.match(ADQLParser.ABS)
                self.state = 608
                self.match(ADQLParser.LPAREN)
                self.state = 609
                self.numeric_value_expression(0)
                self.state = 610
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.match(ADQLParser.CEILING)
                self.state = 613
                self.match(ADQLParser.LPAREN)
                self.state = 614
                self.numeric_value_expression(0)
                self.state = 615
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 617
                self.match(ADQLParser.DEGREES)
                self.state = 618
                self.match(ADQLParser.LPAREN)
                self.state = 619
                self.numeric_value_expression(0)
                self.state = 620
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 4)
                self.state = 622
                self.match(ADQLParser.EXP)
                self.state = 623
                self.match(ADQLParser.LPAREN)
                self.state = 624
                self.numeric_value_expression(0)
                self.state = 625
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 5)
                self.state = 627
                self.match(ADQLParser.FLOOR)
                self.state = 628
                self.match(ADQLParser.LPAREN)
                self.state = 629
                self.numeric_value_expression(0)
                self.state = 630
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 6)
                self.state = 632
                self.match(ADQLParser.LOG)
                self.state = 633
                self.match(ADQLParser.LPAREN)
                self.state = 634
                self.numeric_value_expression(0)
                self.state = 635
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 7)
                self.state = 637
                self.match(ADQLParser.LOG10)
                self.state = 638
                self.match(ADQLParser.LPAREN)
                self.state = 639
                self.numeric_value_expression(0)
                self.state = 640
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 8)
                self.state = 642
                self.match(ADQLParser.MOD)
                self.state = 643
                self.match(ADQLParser.LPAREN)
                self.state = 644
                self.numeric_value_expression(0)
                self.state = 645
                self.match(ADQLParser.COMMA)
                self.state = 646
                self.numeric_value_expression(0)
                self.state = 647
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 9)
                self.state = 649
                self.match(ADQLParser.PI)
                self.state = 650
                self.match(ADQLParser.LPAREN)
                self.state = 651
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 10)
                self.state = 652
                self.match(ADQLParser.POWER)
                self.state = 653
                self.match(ADQLParser.LPAREN)
                self.state = 654
                self.numeric_value_expression(0)
                self.state = 655
                self.match(ADQLParser.COMMA)
                self.state = 656
                self.numeric_value_expression(0)
                self.state = 657
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 11)
                self.state = 659
                self.match(ADQLParser.RADIANS)
                self.state = 660
                self.match(ADQLParser.LPAREN)
                self.state = 661
                self.numeric_value_expression(0)
                self.state = 662
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 12)
                self.state = 664
                self.match(ADQLParser.RAND)
                self.state = 665
                self.match(ADQLParser.LPAREN)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==265:
                    self.state = 666
                    self.unsigned_decimal()


                self.state = 669
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 13)
                self.state = 670
                self.match(ADQLParser.ROUND)
                self.state = 671
                self.match(ADQLParser.LPAREN)
                self.state = 672
                self.numeric_value_expression(0)
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 673
                    self.match(ADQLParser.COMMA)
                    self.state = 674
                    self.signed_integer()


                self.state = 677
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 14)
                self.state = 679
                self.match(ADQLParser.SQRT)
                self.state = 680
                self.match(ADQLParser.LPAREN)
                self.state = 681
                self.numeric_value_expression(0)
                self.state = 682
                self.match(ADQLParser.RPAREN)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 15)
                self.state = 684
                self.match(ADQLParser.TRUNCATE)
                self.state = 685
                self.match(ADQLParser.LPAREN)
                self.state = 686
                self.numeric_value_expression(0)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 687
                    self.match(ADQLParser.COMMA)
                    self.state = 688
                    self.signed_integer()


                self.state = 691
                self.match(ADQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_columns_joinContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(ADQLParser.USING, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def join_column_list(self):
            return self.getTypedRuleContext(ADQLParser.Join_column_listContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_named_columns_join

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_columns_join" ):
                listener.enterNamed_columns_join(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_columns_join" ):
                listener.exitNamed_columns_join(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_columns_join" ):
                return visitor.visitNamed_columns_join(self)
            else:
                return visitor.visitChildren(self)




    def named_columns_join(self):

        localctx = ADQLParser.Named_columns_joinContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_named_columns_join)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(ADQLParser.USING)
            self.state = 696
            self.match(ADQLParser.LPAREN)
            self.state = 697
            self.join_column_list()
            self.state = 698
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_join_query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_join_query_term(self):
            return self.getTypedRuleContext(ADQLParser.Non_join_query_termContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def UNION(self):
            return self.getToken(ADQLParser.UNION, 0)

        def query_term(self):
            return self.getTypedRuleContext(ADQLParser.Query_termContext,0)


        def ALL(self):
            return self.getToken(ADQLParser.ALL, 0)

        def EXCEPT(self):
            return self.getToken(ADQLParser.EXCEPT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_non_join_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_join_query_expression" ):
                listener.enterNon_join_query_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_join_query_expression" ):
                listener.exitNon_join_query_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_join_query_expression" ):
                return visitor.visitNon_join_query_expression(self)
            else:
                return visitor.visitChildren(self)




    def non_join_query_expression(self):

        localctx = ADQLParser.Non_join_query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_non_join_query_expression)
        self._la = 0 # Token type
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.non_join_query_term()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.query_expression(0)
                self.state = 702
                self.match(ADQLParser.UNION)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 703
                    self.match(ADQLParser.ALL)


                self.state = 706
                self.query_term(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 708
                self.query_expression(0)
                self.state = 709
                self.match(ADQLParser.EXCEPT)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 710
                    self.match(ADQLParser.ALL)


                self.state = 713
                self.query_term(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_join_query_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_specification(self):
            return self.getTypedRuleContext(ADQLParser.Query_specificationContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def non_join_query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Non_join_query_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_non_join_query_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_join_query_primary" ):
                listener.enterNon_join_query_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_join_query_primary" ):
                listener.exitNon_join_query_primary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_join_query_primary" ):
                return visitor.visitNon_join_query_primary(self)
            else:
                return visitor.visitChildren(self)




    def non_join_query_primary(self):

        localctx = ADQLParser.Non_join_query_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_non_join_query_primary)
        try:
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [215, 260]:
                self.enterOuterAlt(localctx, 1)
                self.state = 717
                self.query_specification()
                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 2)
                self.state = 718
                self.match(ADQLParser.LPAREN)
                self.state = 719
                self.non_join_query_expression()
                self.state = 720
                self.match(ADQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_join_query_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_join_query_primary(self):
            return self.getTypedRuleContext(ADQLParser.Non_join_query_primaryContext,0)


        def query_term(self):
            return self.getTypedRuleContext(ADQLParser.Query_termContext,0)


        def INTERSECT(self):
            return self.getToken(ADQLParser.INTERSECT, 0)

        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def ALL(self):
            return self.getToken(ADQLParser.ALL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_non_join_query_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_join_query_term" ):
                listener.enterNon_join_query_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_join_query_term" ):
                listener.exitNon_join_query_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_join_query_term" ):
                return visitor.visitNon_join_query_term(self)
            else:
                return visitor.visitChildren(self)




    def non_join_query_term(self):

        localctx = ADQLParser.Non_join_query_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_non_join_query_term)
        self._la = 0 # Token type
        try:
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.non_join_query_primary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 725
                self.query_term(0)
                self.state = 726
                self.match(ADQLParser.INTERSECT)
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==41:
                    self.state = 727
                    self.match(ADQLParser.ALL)


                self.state = 730
                self.query_expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_predicate_geometry_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def area(self):
            return self.getTypedRuleContext(ADQLParser.AreaContext,0)


        def distance(self):
            return self.getTypedRuleContext(ADQLParser.DistanceContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_non_predicate_geometry_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_predicate_geometry_function" ):
                listener.enterNon_predicate_geometry_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_predicate_geometry_function" ):
                listener.exitNon_predicate_geometry_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_predicate_geometry_function" ):
                return visitor.visitNon_predicate_geometry_function(self)
            else:
                return visitor.visitChildren(self)




    def non_predicate_geometry_function(self):

        localctx = ADQLParser.Non_predicate_geometry_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_non_predicate_geometry_function)
        try:
            self.state = 736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.area()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.distance()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_predicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_reference(self):
            return self.getTypedRuleContext(ADQLParser.Column_referenceContext,0)


        def IS(self):
            return self.getToken(ADQLParser.IS, 0)

        def NULL(self):
            return self.getToken(ADQLParser.NULL, 0)

        def NOT(self):
            return self.getToken(ADQLParser.NOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_null_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_predicate" ):
                listener.enterNull_predicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_predicate" ):
                listener.exitNull_predicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_predicate" ):
                return visitor.visitNull_predicate(self)
            else:
                return visitor.visitChildren(self)




    def null_predicate(self):

        localctx = ADQLParser.Null_predicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_null_predicate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.column_reference()
            self.state = 739
            self.match(ADQLParser.IS)
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==176:
                self.state = 740
                self.match(ADQLParser.NOT)


            self.state = 743
            self.match(ADQLParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_geometry_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate_geometry_function(self):
            return self.getTypedRuleContext(ADQLParser.Predicate_geometry_functionContext,0)


        def non_predicate_geometry_function(self):
            return self.getTypedRuleContext(ADQLParser.Non_predicate_geometry_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_numeric_geometry_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_geometry_function" ):
                listener.enterNumeric_geometry_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_geometry_function" ):
                listener.exitNumeric_geometry_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_geometry_function" ):
                return visitor.visitNumeric_geometry_function(self)
            else:
                return visitor.visitChildren(self)




    def numeric_geometry_function(self):

        localctx = ADQLParser.Numeric_geometry_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_numeric_geometry_function)
        try:
            self.state = 747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 22]:
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self.predicate_geometry_function()
                pass
            elif token in [3, 18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 746
                self.non_predicate_geometry_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression_primary(self):
            return self.getTypedRuleContext(ADQLParser.Value_expression_primaryContext,0)


        def sign(self):
            return self.getTypedRuleContext(ADQLParser.SignContext,0)


        def numeric_value_function(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_value_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_numeric_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_primary" ):
                listener.enterNumeric_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_primary" ):
                listener.exitNumeric_primary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_primary" ):
                return visitor.visitNumeric_primary(self)
            else:
                return visitor.visitChildren(self)




    def numeric_primary(self):

        localctx = ADQLParser.Numeric_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_numeric_primary)
        self._la = 0 # Token type
        try:
            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==277 or _la==279:
                    self.state = 749
                    self.sign()


                self.state = 752
                self.value_expression_primary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 753
                self.numeric_value_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(ADQLParser.TermContext,0)


        def bitwise_not(self):
            return self.getTypedRuleContext(ADQLParser.Bitwise_notContext,0)


        def numeric_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Numeric_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,i)


        def bitwise_and(self):
            return self.getTypedRuleContext(ADQLParser.Bitwise_andContext,0)


        def bitwise_or(self):
            return self.getTypedRuleContext(ADQLParser.Bitwise_orContext,0)


        def bitwise_xor(self):
            return self.getTypedRuleContext(ADQLParser.Bitwise_xorContext,0)


        def PLUS(self):
            return self.getToken(ADQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(ADQLParser.MINUS, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_numeric_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_value_expression" ):
                listener.enterNumeric_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_value_expression" ):
                listener.exitNumeric_value_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_value_expression" ):
                return visitor.visitNumeric_value_expression(self)
            else:
                return visitor.visitChildren(self)



    def numeric_value_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Numeric_value_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 144
        self.enterRecursionRule(localctx, 144, self.RULE_numeric_value_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 37, 52, 82, 165, 166, 228, 265, 267, 268, 269, 270, 274, 277, 279, 280, 294]:
                self.state = 757
                self.term(0)
                pass
            elif token in [272]:
                self.state = 758
                self.bitwise_not()
                self.state = 759
                self.numeric_value_expression(6)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 783
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 781
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                    if la_ == 1:
                        localctx = ADQLParser.Numeric_value_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_numeric_value_expression)
                        self.state = 763
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 764
                        self.bitwise_and()
                        self.state = 765
                        self.numeric_value_expression(6)
                        pass

                    elif la_ == 2:
                        localctx = ADQLParser.Numeric_value_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_numeric_value_expression)
                        self.state = 767
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 768
                        self.bitwise_or()
                        self.state = 769
                        self.numeric_value_expression(5)
                        pass

                    elif la_ == 3:
                        localctx = ADQLParser.Numeric_value_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_numeric_value_expression)
                        self.state = 771
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 772
                        self.bitwise_xor()
                        self.state = 773
                        self.numeric_value_expression(4)
                        pass

                    elif la_ == 4:
                        localctx = ADQLParser.Numeric_value_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_numeric_value_expression)
                        self.state = 775
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 776
                        self.match(ADQLParser.PLUS)
                        self.state = 777
                        self.term(0)
                        pass

                    elif la_ == 5:
                        localctx = ADQLParser.Numeric_value_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_numeric_value_expression)
                        self.state = 778
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 779
                        self.match(ADQLParser.MINUS)
                        self.state = 780
                        self.term(0)
                        pass

             
                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Numeric_value_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trig_function(self):
            return self.getTypedRuleContext(ADQLParser.Trig_functionContext,0)


        def math_function(self):
            return self.getTypedRuleContext(ADQLParser.Math_functionContext,0)


        def numeric_geometry_function(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_geometry_functionContext,0)


        def user_defined_function(self):
            return self.getTypedRuleContext(ADQLParser.User_defined_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_numeric_value_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_value_function" ):
                listener.enterNumeric_value_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_value_function" ):
                listener.exitNumeric_value_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumeric_value_function" ):
                return visitor.visitNumeric_value_function(self)
            else:
                return visitor.visitChildren(self)




    def numeric_value_function(self):

        localctx = ADQLParser.Numeric_value_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_numeric_value_function)
        try:
            self.state = 790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 5, 6, 15, 16, 33, 35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                self.trig_function()
                pass
            elif token in [1, 12, 17, 19, 20, 23, 24, 25, 26, 29, 30, 31, 32, 34, 37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 787
                self.math_function()
                pass
            elif token in [3, 14, 18, 22]:
                self.enterOuterAlt(localctx, 3)
                self.state = 788
                self.numeric_geometry_function()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 4)
                self.state = 789
                self.user_defined_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Offset_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OFFSET(self):
            return self.getToken(ADQLParser.OFFSET, 0)

        def unsigned_decimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_offset_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset_clause" ):
                listener.enterOffset_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset_clause" ):
                listener.exitOffset_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffset_clause" ):
                return visitor.visitOffset_clause(self)
            else:
                return visitor.visitChildren(self)




    def offset_clause(self):

        localctx = ADQLParser.Offset_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_offset_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(ADQLParser.OFFSET)
            self.state = 793
            self.unsigned_decimal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(ADQLParser.ORDER, 0)

        def BY(self):
            return self.getToken(ADQLParser.BY, 0)

        def sort_specification_list(self):
            return self.getTypedRuleContext(ADQLParser.Sort_specification_listContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = ADQLParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_order_by_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(ADQLParser.ORDER)
            self.state = 796
            self.match(ADQLParser.BY)
            self.state = 797
            self.sort_specification_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(ADQLParser.ASC, 0)

        def DESC(self):
            return self.getToken(ADQLParser.DESC, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_ordering_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_specification" ):
                listener.enterOrdering_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_specification" ):
                listener.exitOrdering_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrdering_specification" ):
                return visitor.visitOrdering_specification(self)
            else:
                return visitor.visitChildren(self)




    def ordering_specification(self):

        localctx = ADQLParser.Ordering_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ordering_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            _la = self._input.LA(1)
            if not(_la==48 or _la==100):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Outer_join_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEFT(self):
            return self.getToken(ADQLParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(ADQLParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(ADQLParser.FULL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_outer_join_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuter_join_type" ):
                listener.enterOuter_join_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuter_join_type" ):
                listener.exitOuter_join_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOuter_join_type" ):
                return visitor.visitOuter_join_type(self)
            else:
                return visitor.visitChildren(self)




    def outer_join_type(self):

        localctx = ADQLParser.Outer_join_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_outer_join_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            _la = self._input.LA(1)
            if not(_la==129 or _la==159 or _la==208):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Character_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = ADQLParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.character_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POINT(self):
            return self.getToken(ADQLParser.POINT, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def coordinates(self):
            return self.getTypedRuleContext(ADQLParser.CoordinatesContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def coord_sys(self):
            return self.getTypedRuleContext(ADQLParser.Coord_sysContext,0)


        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPoint" ):
                return visitor.visitPoint(self)
            else:
                return visitor.visitChildren(self)




    def point(self):

        localctx = ADQLParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_point)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(ADQLParser.POINT)
            self.state = 806
            self.match(ADQLParser.LPAREN)
            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 807
                self.coord_sys()
                self.state = 808
                self.match(ADQLParser.COMMA)


            self.state = 812
            self.coordinates()
            self.state = 813
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Point_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point(self):
            return self.getTypedRuleContext(ADQLParser.PointContext,0)


        def user_defined_function(self):
            return self.getTypedRuleContext(ADQLParser.User_defined_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_point_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint_value" ):
                listener.enterPoint_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint_value" ):
                listener.exitPoint_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPoint_value" ):
                return visitor.visitPoint_value(self)
            else:
                return visitor.visitChildren(self)




    def point_value(self):

        localctx = ADQLParser.Point_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_point_value)
        try:
            self.state = 817
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.point()
                pass
            elif token in [270]:
                self.enterOuterAlt(localctx, 2)
                self.state = 816
                self.user_defined_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POLYGON(self):
            return self.getToken(ADQLParser.POLYGON, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def coordinates(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.CoordinatesContext)
            else:
                return self.getTypedRuleContext(ADQLParser.CoordinatesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def coord_sys(self):
            return self.getTypedRuleContext(ADQLParser.Coord_sysContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolygon" ):
                return visitor.visitPolygon(self)
            else:
                return visitor.visitChildren(self)




    def polygon(self):

        localctx = ADQLParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_polygon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(ADQLParser.POLYGON)
            self.state = 820
            self.match(ADQLParser.LPAREN)
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 821
                self.coord_sys()
                self.state = 822
                self.match(ADQLParser.COMMA)


            self.state = 826
            self.coordinates()
            self.state = 827
            self.match(ADQLParser.COMMA)
            self.state = 828
            self.coordinates()
            self.state = 831 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 829
                self.match(ADQLParser.COMMA)
                self.state = 830
                self.coordinates()
                self.state = 833 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==278):
                    break

            self.state = 835
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def contains_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Contains_predicateContext,0)


        def intersects_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Intersects_predicateContext,0)


        def comparison_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Comparison_predicateContext,0)


        def between_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Between_predicateContext,0)


        def in_predicate(self):
            return self.getTypedRuleContext(ADQLParser.In_predicateContext,0)


        def like_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Like_predicateContext,0)


        def null_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Null_predicateContext,0)


        def exists_predicate(self):
            return self.getTypedRuleContext(ADQLParser.Exists_predicateContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = ADQLParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_predicate)
        try:
            self.state = 845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 837
                self.contains_predicate()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 838
                self.intersects_predicate()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 839
                self.comparison_predicate()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 840
                self.between_predicate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 841
                self.in_predicate()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 842
                self.like_predicate()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 843
                self.null_predicate()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 844
                self.exists_predicate()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predicate_geometry_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def contains(self):
            return self.getTypedRuleContext(ADQLParser.ContainsContext,0)


        def intersects(self):
            return self.getTypedRuleContext(ADQLParser.IntersectsContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_predicate_geometry_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate_geometry_function" ):
                listener.enterPredicate_geometry_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate_geometry_function" ):
                listener.exitPredicate_geometry_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate_geometry_function" ):
                return visitor.visitPredicate_geometry_function(self)
            else:
                return visitor.visitChildren(self)




    def predicate_geometry_function(self):

        localctx = ADQLParser.Predicate_geometry_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_predicate_geometry_function)
        try:
            self.state = 849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                self.contains()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 848
                self.intersects()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(ADQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(ADQLParser.Table_nameContext,0)


        def correlation_name(self):
            return self.getTypedRuleContext(ADQLParser.Correlation_nameContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifier" ):
                listener.enterQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifier" ):
                listener.exitQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifier" ):
                return visitor.visitQualifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifier(self):

        localctx = ADQLParser.QualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_qualifier)
        try:
            self.state = 854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 851
                self.column_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self.table_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 853
                self.correlation_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_join_query_term(self):
            return self.getTypedRuleContext(ADQLParser.Non_join_query_termContext,0)


        def joined_table(self):
            return self.getTypedRuleContext(ADQLParser.Joined_tableContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def UNION(self):
            return self.getToken(ADQLParser.UNION, 0)

        def query_term(self):
            return self.getTypedRuleContext(ADQLParser.Query_termContext,0)


        def ALL(self):
            return self.getToken(ADQLParser.ALL, 0)

        def EXCEPT(self):
            return self.getToken(ADQLParser.EXCEPT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_expression" ):
                return visitor.visitQuery_expression(self)
            else:
                return visitor.visitChildren(self)



    def query_expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Query_expressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_query_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 857
                self.non_join_query_term()
                pass

            elif la_ == 2:
                self.state = 858
                self.joined_table()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 875
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 873
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                    if la_ == 1:
                        localctx = ADQLParser.Query_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expression)
                        self.state = 861
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 862
                        self.match(ADQLParser.UNION)
                        self.state = 864
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==41:
                            self.state = 863
                            self.match(ADQLParser.ALL)


                        self.state = 866
                        self.query_term(0)
                        pass

                    elif la_ == 2:
                        localctx = ADQLParser.Query_expressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query_expression)
                        self.state = 867
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 868
                        self.match(ADQLParser.EXCEPT)
                        self.state = 870
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==41:
                            self.state = 869
                            self.match(ADQLParser.ALL)


                        self.state = 872
                        self.query_term(0)
                        pass

             
                self.state = 877
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Query_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_query_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_name" ):
                listener.enterQuery_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_name" ):
                listener.exitQuery_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_name" ):
                return visitor.visitQuery_name(self)
            else:
                return visitor.visitChildren(self)




    def query_name(self):

        localctx = ADQLParser.Query_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_query_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(ADQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def SEMI(self):
            return self.getToken(ADQLParser.SEMI, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = ADQLParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.query_expression(0)
            self.state = 881
            self.match(ADQLParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_query(self):
            return self.getTypedRuleContext(ADQLParser.Select_queryContext,0)


        def WITH(self):
            return self.getToken(ADQLParser.WITH, 0)

        def with_query(self):
            return self.getTypedRuleContext(ADQLParser.With_queryContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_query_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification" ):
                listener.enterQuery_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification" ):
                listener.exitQuery_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_specification" ):
                return visitor.visitQuery_specification(self)
            else:
                return visitor.visitChildren(self)




    def query_specification(self):

        localctx = ADQLParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==260:
                self.state = 883
                self.match(ADQLParser.WITH)
                self.state = 884
                self.with_query()


            self.state = 887
            self.select_query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_join_query_primary(self):
            return self.getTypedRuleContext(ADQLParser.Non_join_query_primaryContext,0)


        def joined_table(self):
            return self.getTypedRuleContext(ADQLParser.Joined_tableContext,0)


        def query_term(self):
            return self.getTypedRuleContext(ADQLParser.Query_termContext,0)


        def INTERSECT(self):
            return self.getToken(ADQLParser.INTERSECT, 0)

        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def ALL(self):
            return self.getToken(ADQLParser.ALL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_query_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_term" ):
                listener.enterQuery_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_term" ):
                listener.exitQuery_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_term" ):
                return visitor.visitQuery_term(self)
            else:
                return visitor.visitChildren(self)



    def query_term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Query_termContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 178
        self.enterRecursionRule(localctx, 178, self.RULE_query_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 890
                self.non_join_query_primary()
                pass

            elif la_ == 2:
                self.state = 891
                self.joined_table()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ADQLParser.Query_termContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_query_term)
                    self.state = 894
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 895
                    self.match(ADQLParser.INTERSECT)
                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==41:
                        self.state = 896
                        self.match(ADQLParser.ALL)


                    self.state = 899
                    self.query_expression(0) 
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RadiusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_radius

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius" ):
                listener.enterRadius(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius" ):
                listener.exitRadius(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRadius" ):
                return visitor.visitRadius(self)
            else:
                return visitor.visitChildren(self)




    def radius(self):

        localctx = ADQLParser.RadiusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_radius)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.numeric_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Regular_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_regular_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegular_identifier" ):
                listener.enterRegular_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegular_identifier" ):
                listener.exitRegular_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegular_identifier" ):
                return visitor.visitRegular_identifier(self)
            else:
                return visitor.visitChildren(self)




    def regular_identifier(self):

        localctx = ADQLParser.Regular_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_regular_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 907
            self.match(ADQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = ADQLParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(ADQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Search_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolean_term(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_termContext,0)


        def search_condition(self):
            return self.getTypedRuleContext(ADQLParser.Search_conditionContext,0)


        def OR(self):
            return self.getToken(ADQLParser.OR, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_search_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition" ):
                listener.enterSearch_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition" ):
                listener.exitSearch_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition" ):
                return visitor.visitSearch_condition(self)
            else:
                return visitor.visitChildren(self)



    def search_condition(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Search_conditionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 186
        self.enterRecursionRule(localctx, 186, self.RULE_search_condition, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.boolean_term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 919
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ADQLParser.Search_conditionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_search_condition)
                    self.state = 914
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 915
                    self.match(ADQLParser.OR)
                    self.state = 916
                    self.boolean_term(0) 
                self.state = 921
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Select_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_sublist(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Select_sublistContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Select_sublistContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def ASTERISK(self):
            return self.getToken(ADQLParser.ASTERISK, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list" ):
                return visitor.visitSelect_list(self)
            else:
                return visitor.visitChildren(self)




    def select_list(self):

        localctx = ADQLParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.state = 942
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 52, 82, 121, 163, 165, 166, 228, 243, 265, 267, 268, 269, 270, 272, 274, 277, 279, 280, 294]:
                self.enterOuterAlt(localctx, 1)
                self.state = 922
                self.select_sublist()
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==278:
                    self.state = 923
                    self.match(ADQLParser.COMMA)
                    self.state = 924
                    self.select_sublist()
                    self.state = 929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [276]:
                self.enterOuterAlt(localctx, 2)
                self.state = 930
                self.match(ADQLParser.ASTERISK)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==278:
                    self.state = 931
                    self.match(ADQLParser.COMMA)
                    self.state = 932
                    self.select_sublist()
                    self.state = 937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==278:
                        self.state = 933
                        self.match(ADQLParser.COMMA)
                        self.state = 934
                        self.select_sublist()
                        self.state = 939
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_queryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(ADQLParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(ADQLParser.Select_listContext,0)


        def table_expression(self):
            return self.getTypedRuleContext(ADQLParser.Table_expressionContext,0)


        def set_quantifier(self):
            return self.getTypedRuleContext(ADQLParser.Set_quantifierContext,0)


        def set_limit(self):
            return self.getTypedRuleContext(ADQLParser.Set_limitContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_select_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_query" ):
                listener.enterSelect_query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_query" ):
                listener.exitSelect_query(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_query" ):
                return visitor.visitSelect_query(self)
            else:
                return visitor.visitChildren(self)




    def select_query(self):

        localctx = ADQLParser.Select_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_select_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.match(ADQLParser.SELECT)
            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41 or _la==105:
                self.state = 945
                self.set_quantifier()


            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 948
                self.set_limit()


            self.state = 951
            self.select_list()
            self.state = 952
            self.table_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_sublistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def derived_column(self):
            return self.getTypedRuleContext(ADQLParser.Derived_columnContext,0)


        def qualifier(self):
            return self.getTypedRuleContext(ADQLParser.QualifierContext,0)


        def DOT(self):
            return self.getToken(ADQLParser.DOT, 0)

        def ASTERISK(self):
            return self.getToken(ADQLParser.ASTERISK, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_select_sublist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_sublist" ):
                listener.enterSelect_sublist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_sublist" ):
                listener.exitSelect_sublist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_sublist" ):
                return visitor.visitSelect_sublist(self)
            else:
                return visitor.visitChildren(self)




    def select_sublist(self):

        localctx = ADQLParser.Select_sublistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_select_sublist)
        try:
            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 954
                self.derived_column()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 955
                self.qualifier()
                self.state = 956
                self.match(ADQLParser.DOT)
                self.state = 957
                self.match(ADQLParser.ASTERISK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_function_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(ADQLParser.COUNT, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def ASTERISK(self):
            return self.getToken(ADQLParser.ASTERISK, 0)

        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def general_set_function(self):
            return self.getTypedRuleContext(ADQLParser.General_set_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_set_function_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_function_specification" ):
                listener.enterSet_function_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_function_specification" ):
                listener.exitSet_function_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_function_specification" ):
                return visitor.visitSet_function_specification(self)
            else:
                return visitor.visitChildren(self)




    def set_function_specification(self):

        localctx = ADQLParser.Set_function_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_set_function_specification)
        try:
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.match(ADQLParser.COUNT)
                self.state = 962
                self.match(ADQLParser.LPAREN)
                self.state = 963
                self.match(ADQLParser.ASTERISK)
                self.state = 964
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 965
                self.general_set_function()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_function_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AVG(self):
            return self.getToken(ADQLParser.AVG, 0)

        def MAX(self):
            return self.getToken(ADQLParser.MAX, 0)

        def MIN(self):
            return self.getToken(ADQLParser.MIN, 0)

        def SUM(self):
            return self.getToken(ADQLParser.SUM, 0)

        def COUNT(self):
            return self.getToken(ADQLParser.COUNT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_set_function_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_function_type" ):
                listener.enterSet_function_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_function_type" ):
                listener.exitSet_function_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_function_type" ):
                return visitor.visitSet_function_type(self)
            else:
                return visitor.visitChildren(self)




    def set_function_type(self):

        localctx = ADQLParser.Set_function_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_set_function_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            _la = self._input.LA(1)
            if not(_la==52 or _la==82 or ((((_la - 165)) & ~0x3f) == 0 and ((1 << (_la - 165)) & -9223372036854775805) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_limitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(ADQLParser.TOP, 0)

        def unsigned_decimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_set_limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_limit" ):
                listener.enterSet_limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_limit" ):
                listener.exitSet_limit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_limit" ):
                return visitor.visitSet_limit(self)
            else:
                return visitor.visitChildren(self)




    def set_limit(self):

        localctx = ADQLParser.Set_limitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_set_limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(ADQLParser.TOP)
            self.state = 971
            self.unsigned_decimal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_quantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(ADQLParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(ADQLParser.ALL, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_set_quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_quantifier" ):
                listener.enterSet_quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_quantifier" ):
                listener.exitSet_quantifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_quantifier" ):
                return visitor.visitSet_quantifier(self)
            else:
                return visitor.visitChildren(self)




    def set_quantifier(self):

        localctx = ADQLParser.Set_quantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_set_quantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            _la = self._input.LA(1)
            if not(_la==41 or _la==105):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(ADQLParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(ADQLParser.MINUS, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSign" ):
                return visitor.visitSign(self)
            else:
                return visitor.visitChildren(self)




    def sign(self):

        localctx = ADQLParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            _la = self._input.LA(1)
            if not(_la==277 or _la==279):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_integerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_decimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,0)


        def sign(self):
            return self.getTypedRuleContext(ADQLParser.SignContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_signed_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_integer" ):
                listener.enterSigned_integer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_integer" ):
                listener.exitSigned_integer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_integer" ):
                return visitor.visitSigned_integer(self)
            else:
                return visitor.visitChildren(self)




    def signed_integer(self):

        localctx = ADQLParser.Signed_integerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_signed_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==277 or _la==279:
                self.state = 977
                self.sign()


            self.state = 980
            self.unsigned_decimal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def column_reference(self):
            return self.getTypedRuleContext(ADQLParser.Column_referenceContext,0)


        def unsigned_decimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_decimalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_sort_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_key" ):
                listener.enterSort_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_key" ):
                listener.exitSort_key(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSort_key" ):
                return visitor.visitSort_key(self)
            else:
                return visitor.visitChildren(self)




    def sort_key(self):

        localctx = ADQLParser.Sort_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_sort_key)
        try:
            self.state = 985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 982
                self.value_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 983
                self.column_reference()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 984
                self.unsigned_decimal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sort_key(self):
            return self.getTypedRuleContext(ADQLParser.Sort_keyContext,0)


        def ordering_specification(self):
            return self.getTypedRuleContext(ADQLParser.Ordering_specificationContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_sort_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_specification" ):
                listener.enterSort_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_specification" ):
                listener.exitSort_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSort_specification" ):
                return visitor.visitSort_specification(self)
            else:
                return visitor.visitChildren(self)




    def sort_specification(self):

        localctx = ADQLParser.Sort_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_sort_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.sort_key()
            self.state = 989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 988
                self.ordering_specification()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sort_specification_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sort_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Sort_specificationContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Sort_specificationContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_sort_specification_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSort_specification_list" ):
                listener.enterSort_specification_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSort_specification_list" ):
                listener.exitSort_specification_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSort_specification_list" ):
                return visitor.visitSort_specification_list(self)
            else:
                return visitor.visitChildren(self)




    def sort_specification_list(self):

        localctx = ADQLParser.Sort_specification_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_sort_specification_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.sort_specification()
            self.state = 996
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 992
                    self.match(ADQLParser.COMMA)
                    self.state = 993
                    self.sort_specification() 
                self.state = 998
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def character_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Character_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_string_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_value_expression" ):
                listener.enterString_value_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_value_expression" ):
                listener.exitString_value_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_value_expression" ):
                return visitor.visitString_value_expression(self)
            else:
                return visitor.visitChildren(self)




    def string_value_expression(self):

        localctx = ADQLParser.String_value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_string_value_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.character_value_expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_value_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user_defined_function(self):
            return self.getTypedRuleContext(ADQLParser.User_defined_functionContext,0)


        def char_function(self):
            return self.getTypedRuleContext(ADQLParser.Char_functionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_string_value_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_value_function" ):
                listener.enterString_value_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_value_function" ):
                listener.exitString_value_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_value_function" ):
                return visitor.visitString_value_function(self)
            else:
                return visitor.visitChildren(self)




    def string_value_function(self):

        localctx = ADQLParser.String_value_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_string_value_function)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [270]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1001
                self.user_defined_function()
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1002
                self.char_function()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def query_expression(self):
            return self.getTypedRuleContext(ADQLParser.Query_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)




    def subquery(self):

        localctx = ADQLParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(ADQLParser.LPAREN)
            self.state = 1006
            self.query_expression(0)
            self.state = 1007
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def from_clause(self):
            return self.getTypedRuleContext(ADQLParser.From_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(ADQLParser.Where_clauseContext,0)


        def group_by_clause(self):
            return self.getTypedRuleContext(ADQLParser.Group_by_clauseContext,0)


        def having_clause(self):
            return self.getTypedRuleContext(ADQLParser.Having_clauseContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(ADQLParser.Order_by_clauseContext,0)


        def offset_clause(self):
            return self.getTypedRuleContext(ADQLParser.Offset_clauseContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_expression" ):
                listener.enterTable_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_expression" ):
                listener.exitTable_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_expression" ):
                return visitor.visitTable_expression(self)
            else:
                return visitor.visitChildren(self)




    def table_expression(self):

        localctx = ADQLParser.Table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_table_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.from_clause()
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 1010
                self.where_clause()


            self.state = 1014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 1013
                self.group_by_clause()


            self.state = 1017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 1016
                self.having_clause()


            self.state = 1020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 1019
                self.order_by_clause()


            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 1022
                self.offset_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ADQLParser.IdentifierContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(ADQLParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(ADQLParser.DOT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = ADQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.state = 1025
                self.schema_name()
                self.state = 1026
                self.match(ADQLParser.DOT)


            self.state = 1030
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(ADQLParser.Table_nameContext,0)


        def correlation_specification(self):
            return self.getTypedRuleContext(ADQLParser.Correlation_specificationContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(ADQLParser.Derived_tableContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def joined_table(self):
            return self.getTypedRuleContext(ADQLParser.Joined_tableContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def table_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Table_referenceContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Table_referenceContext,i)


        def JOIN(self):
            return self.getToken(ADQLParser.JOIN, 0)

        def NATURAL(self):
            return self.getToken(ADQLParser.NATURAL, 0)

        def join_type(self):
            return self.getTypedRuleContext(ADQLParser.Join_typeContext,0)


        def join_specification(self):
            return self.getTypedRuleContext(ADQLParser.Join_specificationContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_table_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_reference" ):
                listener.enterTable_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_reference" ):
                listener.exitTable_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_reference" ):
                return visitor.visitTable_reference(self)
            else:
                return visitor.visitChildren(self)



    def table_reference(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.Table_referenceContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 222
        self.enterRecursionRule(localctx, 222, self.RULE_table_reference, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 1033
                self.table_name()
                self.state = 1035
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 1034
                    self.correlation_specification()


                pass

            elif la_ == 2:
                self.state = 1037
                self.derived_table()
                self.state = 1038
                self.correlation_specification()
                pass

            elif la_ == 3:
                self.state = 1040
                self.match(ADQLParser.LPAREN)
                self.state = 1041
                self.joined_table()
                self.state = 1042
                self.match(ADQLParser.RPAREN)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1060
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ADQLParser.Table_referenceContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_table_reference)
                    self.state = 1046
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==172:
                        self.state = 1047
                        self.match(ADQLParser.NATURAL)


                    self.state = 1051
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & 1073758209) != 0) or _la==208:
                        self.state = 1050
                        self.join_type()


                    self.state = 1053
                    self.match(ADQLParser.JOIN)
                    self.state = 1054
                    self.table_reference(0)
                    self.state = 1056
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                    if la_ == 1:
                        self.state = 1055
                        self.join_specification()

             
                self.state = 1062
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Table_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(ADQLParser.SubqueryContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_table_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_subquery" ):
                listener.enterTable_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_subquery" ):
                listener.exitTable_subquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_subquery" ):
                return visitor.visitTable_subquery(self)
            else:
                return visitor.visitChildren(self)




    def table_subquery(self):

        localctx = ADQLParser.Table_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_table_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.subquery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(ADQLParser.FactorContext,0)


        def term(self):
            return self.getTypedRuleContext(ADQLParser.TermContext,0)


        def ASTERISK(self):
            return self.getToken(ADQLParser.ASTERISK, 0)

        def SOLIDUS(self):
            return self.getToken(ADQLParser.SOLIDUS, 0)

        def MOD_SYM(self):
            return self.getToken(ADQLParser.MOD_SYM, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ADQLParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 226
        self.enterRecursionRule(localctx, 226, self.RULE_term, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1079
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1077
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                    if la_ == 1:
                        localctx = ADQLParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 1068
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1069
                        self.match(ADQLParser.ASTERISK)
                        self.state = 1070
                        self.factor()
                        pass

                    elif la_ == 2:
                        localctx = ADQLParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 1071
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1072
                        self.match(ADQLParser.SOLIDUS)
                        self.state = 1073
                        self.factor()
                        pass

                    elif la_ == 3:
                        localctx = ADQLParser.TermContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                        self.state = 1074
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1075
                        self.match(ADQLParser.MOD_SYM)
                        self.state = 1076
                        self.factor()
                        pass

             
                self.state = 1081
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Trig_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACOS(self):
            return self.getToken(ADQLParser.ACOS, 0)

        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def numeric_value_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Numeric_value_expressionContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,i)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def ASIN(self):
            return self.getToken(ADQLParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(ADQLParser.ATAN, 0)

        def ATAN2(self):
            return self.getToken(ADQLParser.ATAN2, 0)

        def COMMA(self):
            return self.getToken(ADQLParser.COMMA, 0)

        def COS(self):
            return self.getToken(ADQLParser.COS, 0)

        def COT(self):
            return self.getToken(ADQLParser.COT, 0)

        def SIN(self):
            return self.getToken(ADQLParser.SIN, 0)

        def TAN(self):
            return self.getToken(ADQLParser.TAN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_trig_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrig_function" ):
                listener.enterTrig_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrig_function" ):
                listener.exitTrig_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrig_function" ):
                return visitor.visitTrig_function(self)
            else:
                return visitor.visitChildren(self)




    def trig_function(self):

        localctx = ADQLParser.Trig_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_trig_function)
        try:
            self.state = 1129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.match(ADQLParser.ACOS)
                self.state = 1083
                self.match(ADQLParser.LPAREN)
                self.state = 1084
                self.numeric_value_expression(0)
                self.state = 1085
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1087
                self.match(ADQLParser.ACOS)
                self.state = 1088
                self.match(ADQLParser.LPAREN)
                self.state = 1089
                self.numeric_value_expression(0)
                self.state = 1090
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1092
                self.match(ADQLParser.ASIN)
                self.state = 1093
                self.match(ADQLParser.LPAREN)
                self.state = 1094
                self.numeric_value_expression(0)
                self.state = 1095
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1097
                self.match(ADQLParser.ATAN)
                self.state = 1098
                self.match(ADQLParser.LPAREN)
                self.state = 1099
                self.numeric_value_expression(0)
                self.state = 1100
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1102
                self.match(ADQLParser.ATAN2)
                self.state = 1103
                self.match(ADQLParser.LPAREN)
                self.state = 1104
                self.numeric_value_expression(0)
                self.state = 1105
                self.match(ADQLParser.COMMA)
                self.state = 1106
                self.numeric_value_expression(0)
                self.state = 1107
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1109
                self.match(ADQLParser.COS)
                self.state = 1110
                self.match(ADQLParser.LPAREN)
                self.state = 1111
                self.numeric_value_expression(0)
                self.state = 1112
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1114
                self.match(ADQLParser.COT)
                self.state = 1115
                self.match(ADQLParser.LPAREN)
                self.state = 1116
                self.numeric_value_expression(0)
                self.state = 1117
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1119
                self.match(ADQLParser.SIN)
                self.state = 1120
                self.match(ADQLParser.LPAREN)
                self.state = 1121
                self.numeric_value_expression(0)
                self.state = 1122
                self.match(ADQLParser.RPAREN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1124
                self.match(ADQLParser.TAN)
                self.state = 1125
                self.match(ADQLParser.LPAREN)
                self.state = 1126
                self.numeric_value_expression(0)
                self.state = 1127
                self.match(ADQLParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unqualified_schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(ADQLParser.ID, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_unqualified_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_schema_name" ):
                listener.enterUnqualified_schema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_schema_name" ):
                listener.exitUnqualified_schema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualified_schema_name" ):
                return visitor.visitUnqualified_schema_name(self)
            else:
                return visitor.visitChildren(self)




    def unqualified_schema_name(self):

        localctx = ADQLParser.Unqualified_schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_unqualified_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(ADQLParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_decimalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(ADQLParser.INT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_unsigned_decimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_decimal" ):
                listener.enterUnsigned_decimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_decimal" ):
                listener.exitUnsigned_decimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsigned_decimal" ):
                return visitor.visitUnsigned_decimal(self)
            else:
                return visitor.visitChildren(self)




    def unsigned_decimal(self):

        localctx = ADQLParser.Unsigned_decimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_unsigned_decimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(ADQLParser.INT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_hexadecimalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_DIGIT(self):
            return self.getToken(ADQLParser.HEX_DIGIT, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_unsigned_hexadecimal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_hexadecimal" ):
                listener.enterUnsigned_hexadecimal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_hexadecimal" ):
                listener.exitUnsigned_hexadecimal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsigned_hexadecimal" ):
                return visitor.visitUnsigned_hexadecimal(self)
            else:
                return visitor.visitChildren(self)




    def unsigned_hexadecimal(self):

        localctx = ADQLParser.Unsigned_hexadecimalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_unsigned_hexadecimal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1135
            self.match(ADQLParser.HEX_DIGIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_numeric_literal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_numeric_literalContext,0)


        def general_literal(self):
            return self.getTypedRuleContext(ADQLParser.General_literalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_unsigned_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_literal" ):
                listener.enterUnsigned_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_literal" ):
                listener.exitUnsigned_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsigned_literal" ):
                return visitor.visitUnsigned_literal(self)
            else:
                return visitor.visitChildren(self)




    def unsigned_literal(self):

        localctx = ADQLParser.Unsigned_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_unsigned_literal)
        try:
            self.state = 1139
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [265, 267, 268, 280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1137
                self.unsigned_numeric_literal()
                pass
            elif token in [269]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1138
                self.general_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_numeric_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exact_numeric_literal(self):
            return self.getTypedRuleContext(ADQLParser.Exact_numeric_literalContext,0)


        def approximate_numeric_literal(self):
            return self.getTypedRuleContext(ADQLParser.Approximate_numeric_literalContext,0)


        def unsigned_hexadecimal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_hexadecimalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_unsigned_numeric_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_numeric_literal" ):
                listener.enterUnsigned_numeric_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_numeric_literal" ):
                listener.exitUnsigned_numeric_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsigned_numeric_literal" ):
                return visitor.visitUnsigned_numeric_literal(self)
            else:
                return visitor.visitChildren(self)




    def unsigned_numeric_literal(self):

        localctx = ADQLParser.Unsigned_numeric_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_unsigned_numeric_literal)
        try:
            self.state = 1144
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [265, 280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1141
                self.exact_numeric_literal()
                pass
            elif token in [267]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1142
                self.approximate_numeric_literal()
                pass
            elif token in [268]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1143
                self.unsigned_hexadecimal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_value_specificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_literal(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_literalContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_unsigned_value_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_value_specification" ):
                listener.enterUnsigned_value_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_value_specification" ):
                listener.exitUnsigned_value_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsigned_value_specification" ):
                return visitor.visitUnsigned_value_specification(self)
            else:
                return visitor.visitChildren(self)




    def unsigned_value_specification(self):

        localctx = ADQLParser.Unsigned_value_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_unsigned_value_specification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.unsigned_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_defined_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def user_defined_function_name(self):
            return self.getTypedRuleContext(ADQLParser.User_defined_function_nameContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def user_defined_function_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.User_defined_function_paramContext)
            else:
                return self.getTypedRuleContext(ADQLParser.User_defined_function_paramContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_user_defined_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_defined_function" ):
                listener.enterUser_defined_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_defined_function" ):
                listener.exitUser_defined_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUser_defined_function" ):
                return visitor.visitUser_defined_function(self)
            else:
                return visitor.visitChildren(self)




    def user_defined_function(self):

        localctx = ADQLParser.User_defined_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_user_defined_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.user_defined_function_name()
            self.state = 1149
            self.match(ADQLParser.LPAREN)
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4503805783701630) != 0) or _la==82 or _la==121 or ((((_la - 163)) & ~0x3f) == 0 and ((1 << (_la - 163)) & 13) != 0) or ((((_la - 228)) & ~0x3f) == 0 and ((1 << (_la - 228)) & 7414694100893697) != 0) or _la==294:
                self.state = 1150
                self.user_defined_function_param()
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==278:
                    self.state = 1151
                    self.match(ADQLParser.COMMA)
                    self.state = 1152
                    self.user_defined_function_param()
                    self.state = 1157
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1160
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_defined_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def regular_identifier(self):
            return self.getTypedRuleContext(ADQLParser.Regular_identifierContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_user_defined_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_defined_function_name" ):
                listener.enterUser_defined_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_defined_function_name" ):
                listener.exitUser_defined_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUser_defined_function_name" ):
                return visitor.visitUser_defined_function_name(self)
            else:
                return visitor.visitChildren(self)




    def user_defined_function_name(self):

        localctx = ADQLParser.User_defined_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_user_defined_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.regular_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class User_defined_function_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_user_defined_function_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUser_defined_function_param" ):
                listener.enterUser_defined_function_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUser_defined_function_param" ):
                listener.exitUser_defined_function_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUser_defined_function_param" ):
                return visitor.visitUser_defined_function_param(self)
            else:
                return visitor.visitChildren(self)




    def user_defined_function_param(self):

        localctx = ADQLParser.User_defined_function_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_user_defined_function_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.value_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Numeric_value_expressionContext,0)


        def string_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.String_value_expressionContext,0)


        def boolean_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Boolean_value_expressionContext,0)


        def geometry_value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Geometry_value_expressionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_value_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_expression" ):
                listener.enterValue_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_expression" ):
                listener.exitValue_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_expression" ):
                return visitor.visitValue_expression(self)
            else:
                return visitor.visitChildren(self)




    def value_expression(self):

        localctx = ADQLParser.Value_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_value_expression)
        try:
            self.state = 1170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1166
                self.numeric_value_expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                self.string_value_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1168
                self.boolean_value_expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1169
                self.geometry_value_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_expression_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_value_specification(self):
            return self.getTypedRuleContext(ADQLParser.Unsigned_value_specificationContext,0)


        def column_reference(self):
            return self.getTypedRuleContext(ADQLParser.Column_referenceContext,0)


        def set_function_specification(self):
            return self.getTypedRuleContext(ADQLParser.Set_function_specificationContext,0)


        def LPAREN(self):
            return self.getToken(ADQLParser.LPAREN, 0)

        def value_expression(self):
            return self.getTypedRuleContext(ADQLParser.Value_expressionContext,0)


        def RPAREN(self):
            return self.getToken(ADQLParser.RPAREN, 0)

        def getRuleIndex(self):
            return ADQLParser.RULE_value_expression_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_expression_primary" ):
                listener.enterValue_expression_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_expression_primary" ):
                listener.exitValue_expression_primary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_expression_primary" ):
                return visitor.visitValue_expression_primary(self)
            else:
                return visitor.visitChildren(self)




    def value_expression_primary(self):

        localctx = ADQLParser.Value_expression_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_value_expression_primary)
        try:
            self.state = 1179
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [265, 267, 268, 269, 280]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1172
                self.unsigned_value_specification()
                pass
            elif token in [270, 294]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self.column_reference()
                pass
            elif token in [52, 82, 165, 166, 228]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1174
                self.set_function_specification()
                pass
            elif token in [274]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1175
                self.match(ADQLParser.LPAREN)
                self.state = 1176
                self.value_expression()
                self.state = 1177
                self.match(ADQLParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(ADQLParser.WHERE, 0)

        def search_condition(self):
            return self.getTypedRuleContext(ADQLParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return ADQLParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhere_clause" ):
                return visitor.visitWhere_clause(self)
            else:
                return visitor.visitChildren(self)




    def where_clause(self):

        localctx = ADQLParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_where_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(ADQLParser.WHERE)
            self.state = 1182
            self.search_condition(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_queryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_name(self):
            return self.getTypedRuleContext(ADQLParser.Query_nameContext,0)


        def AS(self):
            return self.getToken(ADQLParser.AS, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.LPAREN)
            else:
                return self.getToken(ADQLParser.LPAREN, i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.RPAREN)
            else:
                return self.getToken(ADQLParser.RPAREN, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ADQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(ADQLParser.Column_nameContext,i)


        def query_specification(self):
            return self.getTypedRuleContext(ADQLParser.Query_specificationContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ADQLParser.COMMA)
            else:
                return self.getToken(ADQLParser.COMMA, i)

        def getRuleIndex(self):
            return ADQLParser.RULE_with_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_query" ):
                listener.enterWith_query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_query" ):
                listener.exitWith_query(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_query" ):
                return visitor.visitWith_query(self)
            else:
                return visitor.visitChildren(self)




    def with_query(self):

        localctx = ADQLParser.With_queryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_with_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.query_name()
            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==274:
                self.state = 1185
                self.match(ADQLParser.LPAREN)
                self.state = 1186
                self.column_name()
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==278:
                    self.state = 1187
                    self.match(ADQLParser.COMMA)
                    self.state = 1188
                    self.column_name()
                    self.state = 1193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1194
                self.match(ADQLParser.RPAREN)


            self.state = 1198
            self.match(ADQLParser.AS)
            self.state = 1199
            self.match(ADQLParser.LPAREN)
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==215 or _la==260:
                self.state = 1200
                self.query_specification()


            self.state = 1203
            self.match(ADQLParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[11] = self.boolean_term_sempred
        self._predicates[17] = self.character_value_expression_sempred
        self._predicates[72] = self.numeric_value_expression_sempred
        self._predicates[85] = self.query_expression_sempred
        self._predicates[89] = self.query_term_sempred
        self._predicates[93] = self.search_condition_sempred
        self._predicates[111] = self.table_reference_sempred
        self._predicates[113] = self.term_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def boolean_term_sempred(self, localctx:Boolean_termContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def character_value_expression_sempred(self, localctx:Character_value_expressionContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

    def numeric_value_expression_sempred(self, localctx:Numeric_value_expressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def query_expression_sempred(self, localctx:Query_expressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def query_term_sempred(self, localctx:Query_termContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

    def search_condition_sempred(self, localctx:Search_conditionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def table_reference_sempred(self, localctx:Table_referenceContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         




