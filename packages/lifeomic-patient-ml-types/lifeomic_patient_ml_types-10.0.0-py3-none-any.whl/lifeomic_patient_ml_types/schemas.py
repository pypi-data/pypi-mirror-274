# generated by datamodel-codegen:
#   filename:  openapi.json

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, Union

from pydantic import BaseModel, Extra, Field


class LabelDefinitionBase(BaseModel):
    class Config:
        extra = Extra.allow

    id: Optional[str] = None
    """
    UUID uniquely identifying this label.
    """
    name: str
    """
    The unique name of the label.
    """
    description: str


class LabelDefinition(LabelDefinitionBase):
    id: str
    index: int = Field(..., ge=0, le=255)
    """
    The unique integer identifying this label, in the range [0,255]. It must never change during the life of the model because it is stored in training data as the label's identifier.
    """


class LabelsDefinitionInput(BaseModel):
    class Config:
        extra = Extra.allow

    labels: List[LabelDefinitionBase]


class LabelsDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    labels: List[LabelDefinition]
    maxLabelIndex: int = Field(..., ge=-1, le=255)
    """
    The maximum index used by any label defined for this model over the life of the model. This field cannot be set by a user but is used to track what label indices have already been exhausted.
    """


class ClassificationProblemInput(BaseModel):
    class Config:
        extra = Extra.allow

    labelDefinition: LabelsDefinitionInput


class ClassificationProblem(BaseModel):
    class Config:
        extra = Extra.allow

    labelDefinition: LabelsDefinition


class ImageSegmentationArea(BaseModel):
    """
    A run-length encoded (RLE) 4 channel color image, representing the mask for a single label.
    """

    class Config:
        extra = Extra.forbid

    id: str
    """
    The ID of the label this mask is for.
    """
    rle: List[int]
    """
    The run-length encoded mask; an array of 8-bit unsigned integers.
    """


class ImageSegmentationLabelData(BaseModel):
    """
    A raw image segmentation, in the format LabelStudio provides.
    """

    class Config:
        extra = Extra.forbid

    labelType: Literal["imgSeg"]
    projectId: str
    """
    The ID of the LifeOmic project the label file is saved under.
    """
    height: int
    """
    The height of the segmentation mask in pixels.
    """
    width: int
    """
    The width of the segmentation mask in pixels.
    """
    areas: List[ImageSegmentationArea]


class LabelFileData(BaseModel):
    __root__: ImageSegmentationLabelData


class Tag(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    value: str


class Tags(BaseModel):
    __root__: List[Tag]


class LabelBase(BaseModel):
    class Config:
        extra = Extra.allow

    isConfirmed: Optional[bool] = None
    """
    A confirmed label is believed to be correct and may be used during training and evaluation.
    """
    lastConfirmedBy: Optional[str] = None
    """
    The email address or other identifier of the user who last confirmed this label.
    """
    updatedAt: Optional[float] = None
    """
    Timestamp for when the label was last updated or created expressed as milliseconds since the UTC epoch.
    """
    tags: Optional[Tags] = None


class Mask(BaseModel):
    """
    The fileId of an image containing per-pixel labels
    """

    class Config:
        extra = Extra.forbid

    fileId: str


class ImageSegmentationLabel(LabelBase):
    labelType: Literal["imgSeg"]
    mask: Mask
    """
    The fileId of an image containing per-pixel labels
    """


class ImageClassificationLabel(LabelBase):
    labelType: Literal["imgClf"]
    classes: List[float]
    """
    An array of integers representing the class(es) of the image
    """


class Label(BaseModel):
    __root__: Union[ImageSegmentationLabel, ImageClassificationLabel]


class ExampleBase(BaseModel):
    class Config:
        extra = Extra.allow

    id: str
    updatedAt: float
    """
    Timestamp expressed as milliseconds since the UTC epoch.
    """


class Image(BaseModel):
    class Config:
        extra = Extra.forbid

    fileId: str


class ImageSegmentationExample(ExampleBase):
    exampleType: Literal["imgSeg"]
    image: Image
    label: Optional[ImageSegmentationLabel] = None


class Image1(BaseModel):
    class Config:
        extra = Extra.forbid

    fileId: str


class ImageClassificationExample(ExampleBase):
    exampleType: Literal["imgClf"]
    image: Image1
    label: Optional[ImageClassificationLabel] = None


class Example(BaseModel):
    __root__: Union[ImageSegmentationExample, ImageClassificationExample]


class FhirCodesFilter(BaseModel):
    """
    Used to find FHIR resources containing a type code that equals any value in the codes array
    """

    class Config:
        extra = Extra.forbid

    filterType: Literal["FhirCodesFilter"]
    codes: List[str] = Field(..., max_items=10, min_items=1)


class CategoricalParameterSpace(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Literal["categorical"]
    name: str
    values: List[str]


class NumericScale(Enum):
    auto = "auto"
    linear = "linear"
    log = "log"
    reverseLog = "reverseLog"


class NumericParameterSpace(BaseModel):
    class Config:
        extra = Extra.allow

    name: str
    min: float
    max: float
    scale: NumericScale


class ContinuousParameterSpace(NumericParameterSpace):
    type: Literal["continuous"]


class IntegerParameterSpace(NumericParameterSpace):
    type: Literal["integer"]


class ParameterSpace(BaseModel):
    __root__: Union[
        CategoricalParameterSpace, ContinuousParameterSpace, IntegerParameterSpace
    ]


class OptimizationDirection(Enum):
    minimize = "minimize"
    maximize = "maximize"


class OptimizationObjective(BaseModel):
    class Config:
        extra = Extra.forbid

    direction: OptimizationDirection
    metric: str


class MetricDefinition(BaseModel):
    """
    Camel-cased mirror of https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_MetricDefinition.html.
    """

    class Config:
        extra = Extra.forbid

    name: str
    regex: str


class TuningJobTrainingApproach(BaseModel):
    class Config:
        extra = Extra.allow

    type: Literal["tuningJob"]
    trainingImage: str = Field(
        ...,
        regex="^[0-9]+\\.dkr.ecr.[-a-z0-9]+\\.amazonaws\\.com\\/[-_a-zA-Z0-9]+:[-_a-zA-Z0-9]+$",
    )
    """
    An aws ecr image uri of the form <account-id>.dkr.ecr.<region>.amazonaws.com/<repo-name>:<tag>
    """
    metricDefinitions: List[MetricDefinition]
    objective: OptimizationObjective
    """
    The metric to optimize during the hyperparameter tuning process.
    """
    searchSpace: List[ParameterSpace]
    """
    The hyperparameter search space to explore during hyperparameter tuning.
    """
    maxTrials: Optional[int] = Field(None, ge=1, le=30)
    """
    The maximum number of candidate models to consider in a given model run.
    """
    retrainEvery: Optional[float] = None
    """
    If provided, the model will automatically be retrained if this many milliseconds have passed since the last run. Models will not be retrained more frequently than once per day, and this policy is only checked once per day, so more than this many milliseconds may actually pass before the model is retrained.
    """


class TrainingApproach(BaseModel):
    __root__: TuningJobTrainingApproach


class DeployApproachBase(BaseModel):
    class Config:
        extra = Extra.allow

    inferenceImage: str = Field(
        ...,
        regex="^[0-9]+\\.dkr.ecr.[-a-z0-9]+\\.amazonaws\\.com\\/[-_a-zA-Z0-9]+:[-_a-zA-Z0-9]+$",
    )
    """
    An aws ecr image uri of the form <account-id>.dkr.ecr.<region>.amazonaws.com/<repo-name>:<tag>
    """


class EdgeDeployApproach(DeployApproachBase):
    type: Literal["edge"]


class CloudDeployApproach(DeployApproachBase):
    type: Literal["cloud"]


class DeployApproach(BaseModel):
    __root__: Union[EdgeDeployApproach, CloudDeployApproach]


class DatasetConfigBase(BaseModel):
    class Config:
        extra = Extra.allow

    name: str
    description: str


class ModelConfigBase(BaseModel):
    class Config:
        extra = Extra.allow

    name: str
    description: str
    trainingApproach: TrainingApproach
    deployApproach: DeployApproach
    datasetId: str
    """
    The ID of the configuration that defines the dataset this model will be trained on.
    """


class ModelConfigInput(ModelConfigBase):
    pass


class ModelConfig(ModelConfigBase):
    id: str
    """
    UUID uniquely identifying this model config.
    """
    accountId: str
    championId: Optional[str] = None
    """
    The ID of the champion model run for this model config.
    """


class Metric(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    """
    The name of the metric e.g. "Cross Entopy Loss", "Accuracy", "F1 Macro", etc.
    """
    description: Optional[str] = None
    """
    A description of the metric to help people understand what it means and represents.
    """
    value: float
    stage: Literal["training", "evaluation"]
    """
    @deprecated The stage of the model run this metric was computed in. If `training`, the metric could have been computed over the train or val set. If `evaluation`, the metric was computed over the test set.
    """
    direction: Optional[OptimizationDirection] = None
    """
    The optimization direction for this metric. E.g. `minimize` means a smaller value for this metric is better. This direction is just used as metadata about the metric value, and does not mean this metric will be optimized during hyperparameter tuning.
    """


class ApprovalChoice(Enum):
    approved = "approved"
    rejected = "rejected"


class ApprovalDecisionInput(BaseModel):
    class Config:
        extra = Extra.allow

    description: Optional[str] = None
    """
    Reasoning, justification, or other notes to associate with the decision.
    """
    decision: ApprovalChoice


class ApprovalDecisionBase(ApprovalDecisionInput):
    timestamp: float
    """
    Timestamp of when the decision was made. Expressed as milliseconds since the UTC epoch.
    """


class SystemApprovalDecision(ApprovalDecisionBase):
    actor: Literal["system"]


class UserApprovalDecision(ApprovalDecisionBase):
    actor: Literal["user"]
    user: str


class ApprovalDecision(BaseModel):
    __root__: Union[SystemApprovalDecision, UserApprovalDecision]


class RunMetrics(BaseModel):
    class Config:
        extra = Extra.forbid

    challenger: List[Metric]
    """
    Metrics about how the model version trained in this run (the challenger) performed on this run's test set.
    """
    champion: List[Metric]
    """
    Metrics about how the current best model (the champion) performed on this run's test set.
    """


class Parameter(BaseModel):
    """
    A hyperparameter value. The values themselves are represented as strings.
    """

    class Config:
        extra = Extra.forbid

    name: str
    value: str


class LogEvent(BaseModel):
    """
    An event logged by some component of a model run, as well as metadata about the log event.
    """

    class Config:
        extra = Extra.forbid

    type: Literal["logEntry"]
    timestamp: float
    """
    The time when the log event occurred, expressed as milliseconds since the unix epoch.
    """
    payload: str
    """
    The actual body of the logged event.
    """
    stage: str
    """
    The model run's stage or component that produced this log event.
    """


class ImageSegmentationPredictionRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    predictionType: Literal["imgSeg"]
    """
    The type of prediction requested. This must be the same as the problem type in your model config.
    """
    exampleId: str
    """
    The ID of the example a prediction is being requested for. It is the ID of a DocumentReference FHIR record which references the image file a segmenation mask will be generated for.
    """


class ImageClassificationPredictionRequest(BaseModel):
    class Config:
        extra = Extra.forbid

    predictionType: Literal["imgClf"]
    """
    The type of prediction requested. This must be the same as the problem type in your model config.
    """
    exampleId: str
    """
    The ID of the example a prediction is being requested for. It is the ID of a DocumentReference FHIR record which references the image file a classification will be generated for.
    """


class PredictionRequest(BaseModel):
    __root__: Union[
        ImageSegmentationPredictionRequest, ImageClassificationPredictionRequest
    ]


class ImageClassificationPrediction(BaseModel):
    class Config:
        extra = Extra.forbid

    index: int
    """
    The index of a classification label.
    """
    value: bool
    """
    This value will be `true` if the model predicted this label being present on the example; `false` otherwise.
    """
    confidence: float
    """
    The confidence score of the prediction. If this value is greater than the model's decision threshold, `value` will be `true`.
    """


class ImageClassificationPredictionResponse(BaseModel):
    class Config:
        extra = Extra.forbid

    predictionType: Literal["imgClf"]
    predictions: List[ImageClassificationPrediction]
    """
    A prediction for every label defined by the model.
    """


class PredictionResponse(BaseModel):
    __root__: ImageClassificationPredictionResponse


class ImageSegmentationProblemBase(BaseModel):
    class Config:
        extra = Extra.allow

    problemType: Literal["imgSeg"]
    trainingDataFilter: FhirCodesFilter
    """
    Used to filter through patient data to identify image/mask pairs for model training.
    """


class ImageSegmentationProblemInput(
    ClassificationProblemInput, ImageSegmentationProblemBase
):
    pass


class ImageSegmentationProblem(ClassificationProblem, ImageSegmentationProblemBase):
    pass


class ImageClassificationProblemBase(BaseModel):
    class Config:
        extra = Extra.allow

    problemType: Literal["imgClf"]
    trainingDataFilter: FhirCodesFilter
    """
    Used to filter through patient data to identify the input images for the model.
    """


class ImageClassificationProblemInput(
    ClassificationProblemInput, ImageClassificationProblemBase
):
    pass


class ImageClassificationProblem(ClassificationProblem, ImageClassificationProblemBase):
    pass


class MlProblemDefinitionInput(BaseModel):
    __root__: Union[ImageSegmentationProblemInput, ImageClassificationProblemInput]


class MlProblemDefinition(BaseModel):
    __root__: Union[ImageSegmentationProblem, ImageClassificationProblem]


class DatasetConfigInput(DatasetConfigBase):
    problemDefinition: MlProblemDefinitionInput


class DatasetConfig(DatasetConfigBase):
    id: str
    """
    UUID uniquely identifying this dataset config.
    """
    accountId: str
    problemDefinition: MlProblemDefinition


class ModelRun(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str
    """
    UUID uniquely identifying this model run.
    """
    slug: str
    """
    Human-readable slug that acts as an auto-generated name for the run. This field is not guaranteed to be unique, so cannot be used reliably as a unique identifier.
    """
    modelId: str
    """
    ID of the model config this run was produced for.
    """
    accountId: str
    modelArtifactUri: Optional[str] = None
    """
    S3 URI location where the final trained model artifact produced by this run is saved to.
    """
    status: Literal["running", "succeeded", "failed"]
    error: Optional[str] = None
    """
    If `status` is 'failed', gives the reason why the run failed.
    """
    deployStatus: Optional[Literal["deploying", "succeeded", "failed"]] = None
    deployError: Optional[str] = None
    """
    If `deployStatus` is 'failed', gives the reason why deploying the model endpoint failed
    """
    start: float
    """
    Timestamp of when the run started. Expressed as milliseconds since the UTC epoch.
    """
    end: Optional[float] = None
    """
    Timestamp of when the run ended. Expressed as milliseconds since the UTC epoch.
    """
    isArchived: Optional[bool] = None
    """
    True if this run has been archived. Archived runs' related artifacts are deleted, and they can no longer be deployed.
    """
    hyperparameters: List[Parameter]
    """
    The hyperparameters used to train the model version created by this run.
    """
    championId: Optional[str] = None
    """
    The ID of the model run that was the current champion while this model run was running. All champion metrics on this model run represent that champion's performance on this run's dataset.
    """
    metrics: RunMetrics
    approvals: List[ApprovalDecision]
    """
    Decisions made by various actors representing whether they think this model version should be used in production and become the new champion.
    """
    problemDefinition: MlProblemDefinition
    trainingApproach: TrainingApproach
    deployApproach: DeployApproach
