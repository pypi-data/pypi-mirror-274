

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform
from .nostr_ffi import ClientMessage
from .nostr_ffi import Coordinate
from .nostr_ffi import Event
from .nostr_ffi import EventBuilder
from .nostr_ffi import EventId
from .nostr_ffi import FileMetadata
from .nostr_ffi import Filter
from .nostr_ffi import GetInfoResponseResult
from .nostr_ffi import Keys
from .nostr_ffi import ListTransactionsRequestParams
from .nostr_ffi import LookupInvoiceRequestParams
from .nostr_ffi import LookupInvoiceResponseResult
from .nostr_ffi import MakeInvoiceRequestParams
from .nostr_ffi import MakeInvoiceResponseResult
from .nostr_ffi import Metadata
from .nostr_ffi import NostrConnectUri
from .nostr_ffi import NostrWalletConnectUri
from .nostr_ffi import PayKeysendRequestParams
from .nostr_ffi import PayKeysendResponseResult
from .nostr_ffi import PublicKey
from .nostr_ffi import RelayInformationDocument
from .nostr_ffi import RelayMessage
from .nostr_ffi import Timestamp
from .nostr_ffi import UnsignedEvent
from .nostr_ffi import ZapType
from .nostr_ffi import _UniffiConverterTypeClientMessage
from .nostr_ffi import _UniffiConverterTypeCoordinate
from .nostr_ffi import _UniffiConverterTypeEvent
from .nostr_ffi import _UniffiConverterTypeEventBuilder
from .nostr_ffi import _UniffiConverterTypeEventId
from .nostr_ffi import _UniffiConverterTypeFileMetadata
from .nostr_ffi import _UniffiConverterTypeFilter
from .nostr_ffi import _UniffiConverterTypeGetInfoResponseResult
from .nostr_ffi import _UniffiConverterTypeKeys
from .nostr_ffi import _UniffiConverterTypeListTransactionsRequestParams
from .nostr_ffi import _UniffiConverterTypeLookupInvoiceRequestParams
from .nostr_ffi import _UniffiConverterTypeLookupInvoiceResponseResult
from .nostr_ffi import _UniffiConverterTypeMakeInvoiceRequestParams
from .nostr_ffi import _UniffiConverterTypeMakeInvoiceResponseResult
from .nostr_ffi import _UniffiConverterTypeMetadata
from .nostr_ffi import _UniffiConverterTypeNostrConnectURI
from .nostr_ffi import _UniffiConverterTypeNostrWalletConnectURI
from .nostr_ffi import _UniffiConverterTypePayKeysendRequestParams
from .nostr_ffi import _UniffiConverterTypePayKeysendResponseResult
from .nostr_ffi import _UniffiConverterTypePublicKey
from .nostr_ffi import _UniffiConverterTypeRelayInformationDocument
from .nostr_ffi import _UniffiConverterTypeRelayMessage
from .nostr_ffi import _UniffiConverterTypeTimestamp
from .nostr_ffi import _UniffiConverterTypeUnsignedEvent
from .nostr_ffi import _UniffiConverterTypeZapType
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferClientMessage
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferCoordinate
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferEvent
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferEventBuilder
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferEventId
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferFileMetadata
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferFilter
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferGetInfoResponseResult
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferKeys
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferListTransactionsRequestParams
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferLookupInvoiceRequestParams
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferLookupInvoiceResponseResult
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferMakeInvoiceRequestParams
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferMakeInvoiceResponseResult
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferMetadata
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferNostrConnectURI
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferNostrWalletConnectURI
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferPayKeysendRequestParams
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferPayKeysendResponseResult
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferPublicKey
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferRelayInformationDocument
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferRelayMessage
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferTimestamp
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferUnsignedEvent
from .nostr_ffi import _UniffiRustBuffer as _UniffiRustBufferZapType

# Used for default argument values
_DEFAULT = object()


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _rust_call(_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _rust_call(_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _rust_call(_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _rust_call(fn, *args):
    # Call a rust function
    return _rust_call_with_error(None, fn, *args)

def _rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("nostr_sdk_ffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_nostr_sdk_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_nostr_sdk_ffi_checksum_func_init_logger() != 38847:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_aborthandle_abort() != 2978:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_aborthandle_is_aborted() != 57233:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay() != 49:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay_with_opts() != 12575:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relays() != 59820:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_blacklist() != 3155:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_connect() != 58188:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay() != 56847:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_with_timeout() != 62841:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_database() != 35722:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect() != 38433:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay() != 40874:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_dislike() != 64607:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_file_metadata() != 18115:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_from() != 62752:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_of() != 44675:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap() != 18998:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications() != 16945:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_like() != 55130:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_mute_ids() != 48617:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_mute_public_keys() != 11521:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_reaction() != 48411:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_reconcile() != 3186:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_relay() != 36119:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_relays() != 48003:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay() != 222:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_repost() != 27770:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_direct_msg() != 44479:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event() != 10342:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder() != 61169:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to() != 7515:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to() != 13155:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg() != 258:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to() != 48694:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg() != 47492:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata() != 18910:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_shutdown() != 18928:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder() != 40727:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_signer() != 55907:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_start() != 10767:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_stop() != 46184:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe() != 26024:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to() != 56417:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id() != 1639:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id_to() != 48827:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscription() != 64265:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions() != 25974:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_unmute_ids() != 23766:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_unmute_public_keys() != 41508:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe() != 33797:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe_all() != 27202:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_update_difficulty() != 12551:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_update_min_pow_difficulty() != 58908:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_client_zap() != 7374:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build() != 61424:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database() != 21061:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts() != 22620:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer() != 30905:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_zapper() != 2114:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance() != 36444:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info() != 38523:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_list_transactions() != 25126:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice() != 11572:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice() != 9387:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice() != 34897:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend() != 7706:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_direction() != 49635:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_initial_timeout() != 40199:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_nostr_connect_uri() != 2988:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_relays() != 17292:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_signer_public_key() != 60994:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count() != 29275:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete() != 38412:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id() != 13951:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_seen_on_relays() != 50082:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_profile() != 1798:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query() != 32625:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event() != 2944:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe() != 31282:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt() != 14262:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt() != 50191:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt() != 32958:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt() != 41961:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_public_key() != 8592:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event() != 56917:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event_builder() != 45366:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_proxy() != 51105:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_timeout() != 18259:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_connection_timeout() != 57708:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_difficulty() != 20804:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_min_pow() != 54102:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_proxy() != 35233:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits() != 11682:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_req_filters_chunk_size() != 19808:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_send_timeout() != 11614:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_skip_disconnected_relays() != 28418:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_timeout() != 10820:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_send() != 50702:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_subscription() != 52599:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_profile_metadata() != 34875:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_profile_name() != 10929:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_profile_public_key() != 31716:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_proxy_target() != 3274:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_event() != 50645:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg() != 7075:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_blacklist() != 35021:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_connect() != 65283:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_count_events_of() != 30433:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_document() != 59362:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_get_events_of() != 9342:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected() != 18284:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_opts() != 21198:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_proxy() != 64699:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_queue() != 23174:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile() != 21720:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile_with_items() != 54896:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_event() != 31892:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg() != 36151:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_stats() != 58574:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_status() != 27198:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_stop() != 57079:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe() != 49075:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe_with_id() != 31136:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscription() != 19975:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions() != 42295:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_support_negentropy() != 24573:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_terminate() != 8947:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe() != 40808:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe_all() != 27135:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relay_url() != 1351:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_add_ids() != 39906:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_add_public_keys() != 49994:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_clear() != 54680:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_has_id() != 19398:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_has_public_key() != 44714:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_id() != 64401:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_ids() != 29502:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_public_key() != 52685:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_public_keys() != 25:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts() != 52060:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received() != 157:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent() != 64970:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at() != 17598:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_first_connection_timestamp() != 30824:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency() != 14031:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success() != 52759:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_uptime() != 29449:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags() != 29781:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size() != 63930:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_message_max_size() != 9957:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_adjust_retry_sec() != 36994:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits() != 10405:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping() != 51607:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_pow() != 37387:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_proxy() != 35156:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read() != 47081:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_reconnect() != 48820:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_retry_sec() != 58762:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_adjust_retry_sec() != 1296:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_pow_difficulty() != 44137:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_reconnect() != 23173:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_retry_sec() != 43799:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write() != 45946:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_add_relay() != 8583:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event() != 34872:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event_to() != 43807:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_msg() != 25834:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_msg_to() != 4853:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_blacklist() != 51161:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect() != 1941:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect_relay() != 25665:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_database() != 4532:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_disconnect() != 50009:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_from() != 6791:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_of() != 28280:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_handle_notifications() != 16655:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile() != 45175:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile_with_items() != 45346:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relay() != 18458:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relays() != 1591:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_all_relay() != 18940:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_relay() != 52499:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event() != 64654:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event_to() != 54866:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_msg() != 49690:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_msg_to() != 21347:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_shutdown() != 56982:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_start() != 10745:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_stop() != 37084:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe() != 63291:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_to() != 13626:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id() != 36090:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id_to() != 26652:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscription() != 46314:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscriptions() != 32801:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe() != 53170:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe_all() != 51928:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_disconnected() != 4190:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_send_confirmation() != 22060:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_timeout() != 16256:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_filter() != 17195:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_timeout() != 36298:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_close_on() != 31672:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_send_opts() != 55685:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_zapdetails_message() != 43166:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_client_new() != 54751:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_client_with_opts() != 35054:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new() != 11332:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new() != 39796:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts() != 31044:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_negentropyoptions_new() != 15449:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nip46signer_new() != 61017:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_custom() != 22316:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_ndb() != 25092:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_sqlite() != 10843:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys() != 51910:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nip46() != 28927:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnectoptions_new() != 35456:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrzapper_nwc() != 62259:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_options_new() != 30503:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_profile_new() != 65224:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_proxy_new() != 51726:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_custom() != 17945:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_new() != 3279:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_with_opts() != 9335:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relayblacklist_empty() != 38614:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relayblacklist_new() != 62518:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_disable() != 39641:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new() != 1364:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relayoptions_new() != 32157:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_new() != 50786:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_with_database() != 59953:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_relaysendoptions_new() != 31427:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeautocloseoptions_new() != 39595:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeoptions_new() != 56214:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_zapdetails_new() != 18563:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_event() != 61043:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_public_key() != 56616:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_backend() != 43310:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_save_event() != 35737:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_event_already_been_saved() != 17970:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_event_already_been_seen() != 32737:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_event_id_been_deleted() != 18305:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_coordinate_been_deleted() != 21374:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_id_seen() != 31417:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_seen_on_relays() != 47225:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_by_id() != 16633:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_count() != 14898:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_query() != 38513:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_delete() != 55000:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_wipe() != 65517:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg() != 55169:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle() != 9914:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU8,
)
class UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI8,
)
class UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU16,
)
class UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI16,
)
class UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU32,
)
class UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI32,
)
class UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructU64,
)
class UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructI64,
)
class UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF32,
)
class UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructF64,
)
class UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructPointer,
)
class UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructRustBuffer,
)
class UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,UniffiForeignFutureStructVoid,
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD1 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD2 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD3 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD4 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD5 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.c_void_p,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD6 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,_UniffiRustBuffer,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD7 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.POINTER(ctypes.c_void_p),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD9 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(ctypes.c_uint64),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD10 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD11 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD12 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_void_p,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD1 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,_UniffiRustBuffer,ctypes.c_void_p,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
class UniffiVTableCallbackInterfaceCustomNostrDatabase(ctypes.Structure):
    _fields_ = [
        ("backend", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD0),
        ("save_event", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD1),
        ("has_event_already_been_saved", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD2),
        ("has_event_already_been_seen", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD3),
        ("has_event_id_been_deleted", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD4),
        ("has_coordinate_been_deleted", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD5),
        ("event_id_seen", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD6),
        ("event_seen_on_relays", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD7),
        ("event_by_id", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD8),
        ("count", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD9),
        ("query", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD10),
        ("delete", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD11),
        ("wipe", UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD12),
        ("uniffi_free", UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class UniffiVTableCallbackInterfaceHandleNotification(ctypes.Structure):
    _fields_ = [
        ("handle_msg", UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD0),
        ("handle", UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD1),
        ("uniffi_free", UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_aborthandle.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_aborthandle.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_aborthandle.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_aborthandle.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_aborthandle_abort.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_aborthandle_abort.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_aborthandle_is_aborted.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_aborthandle_is_aborted.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_client.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_client.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_client.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_client.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_with_opts.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_with_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay_with_opts.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay_with_opts.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relays.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relays.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_blacklist.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_blacklist.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_with_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_with_timeout.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_database.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_database.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_dislike.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_dislike.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_file_metadata.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_file_metadata.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_from.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_from.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_of.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_like.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_like.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_mute_ids.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_mute_ids.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_mute_public_keys.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_mute_public_keys.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reaction.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reaction.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reconcile.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reconcile.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relay.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relays.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relays.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_remove_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_remove_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_repost.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_repost.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_direct_msg.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_direct_msg.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_to.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_set_metadata.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_set_metadata.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_shutdown.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_shutdown.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_signer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_signer.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_start.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_start.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_stop.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_stop.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id_to.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscription.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscription.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscriptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscriptions.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unmute_ids.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unmute_ids.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unmute_public_keys.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unmute_public_keys.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_difficulty.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_difficulty.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_min_pow_difficulty.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_min_pow_difficulty.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_zap.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_uint64,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_zap.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_clientbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_clientbuilder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_clientbuilder.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_clientbuilder.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_zapper.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_zapper.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nwc.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nwc.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nwc.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nwc.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_new.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_info.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_info.restype = _UniffiRustBufferGetInfoResponseResult
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBufferListTransactionsRequestParams,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBufferLookupInvoiceRequestParams,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice.restype = _UniffiRustBufferLookupInvoiceResponseResult
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBufferMakeInvoiceRequestParams,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice.restype = _UniffiRustBufferMakeInvoiceResponseResult
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBufferPayKeysendRequestParams,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend.restype = _UniffiRustBufferPayKeysendResponseResult
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_negentropyoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_negentropyoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_negentropyoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_negentropyoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_negentropyoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_negentropyoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_direction.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_direction.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_initial_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_initial_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nip46signer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nip46signer.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nip46signer.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nip46signer.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nip46signer_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nip46signer_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_nostr_connect_uri.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_nostr_connect_uri.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_relays.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_relays.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_signer_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_signer_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrdatabase.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrdatabase.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_custom.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_custom.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_ndb.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_ndb.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_sqlite.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_sqlite.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_seen_on_relays.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_seen_on_relays.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_profile.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_profile.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrsigner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrsigner.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrsigner.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrsigner.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nip46.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nip46.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event_builder.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event_builder.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnectoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnectoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_proxy.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_proxy.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrzapper.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrzapper.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrzapper.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrzapper.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrzapper_nwc.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrzapper_nwc.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_options.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_options.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_options.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_options.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_options_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_options_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_difficulty.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_difficulty.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_min_pow.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_min_pow.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_proxy.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_proxy.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_relay_limits.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_relay_limits.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_req_filters_chunk_size.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_req_filters_chunk_size.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_send_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_send_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_skip_disconnected_relays.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_skip_disconnected_relays.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_send.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_send.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_subscription.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_subscription.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_profile.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_profile.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_profile.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_profile.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_profile_new.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_profile_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_metadata.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_metadata.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_name.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_name.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_debug.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_debug.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_eq.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_eq.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_ne.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_ne.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_hash.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_proxy.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_proxy.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_proxy.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_proxy.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_proxy_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_proxy_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_target.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_target.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_debug.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_debug.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_eq_eq.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_eq_eq.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_eq_ne.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_eq_ne.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_hash.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relay.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relay.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relay.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_custom.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_custom.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_new.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_with_opts.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_with_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_event.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_event.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_blacklist.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_blacklist.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connect.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connect.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_count_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_count_events_of.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_document.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_document.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_get_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_get_events_of.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_is_connected.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_is_connected.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_opts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_proxy.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_proxy.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_queue.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_queue.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile_with_items.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile_with_items.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_event.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_msg.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_msg.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stats.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stats.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_status.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_status.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stop.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stop.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscription.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscription.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_support_negentropy.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_support_negentropy.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_terminate.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_terminate.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_url.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_url.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayblacklist.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayblacklist.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayblacklist.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayblacklist.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayblacklist_empty.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayblacklist_empty.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayblacklist_new.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayblacklist_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_add_ids.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_add_ids.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_add_public_keys.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_add_public_keys.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_clear.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_clear.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_has_id.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_has_id.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_has_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_has_public_key.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_id.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_id.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_ids.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_ids.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_public_key.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_public_keys.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_public_keys.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_connection_timestamp.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_connection_timestamp.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_uptime.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_uptime.restype = ctypes.c_double
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaylimits.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaylimits.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaylimits.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaylimits.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_message_max_size.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_message_max_size.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_debug.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_debug.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_eq.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_eq.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_ne.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_ne.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_adjust_retry_sec.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_adjust_retry_sec.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_pow.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_pow.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_proxy.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_proxy.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_read.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_read.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_retry_sec.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_retry_sec.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_adjust_retry_sec.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_adjust_retry_sec.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_pow_difficulty.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_pow_difficulty.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_reconnect.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_reconnect.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_retry_sec.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_retry_sec.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_write.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_write.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaypool.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaypool.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaypool.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaypool.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_with_database.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_with_database.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_add_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_add_relay.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event_to.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_msg.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_msg.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_msg_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_msg_to.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_blacklist.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_blacklist.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_database.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_database.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_disconnect.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_disconnect.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_from.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_from.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_of.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_of.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_handle_notifications.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_handle_notifications.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile_with_items.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile_with_items.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relay.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relays.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relays.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_all_relay.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_all_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_relay.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_relay.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event_to.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_msg.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_msg.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_msg_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_msg_to.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_shutdown.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_shutdown.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_start.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_start.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_stop.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_stop.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_to.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id_to.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id_to.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscription.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscription.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscriptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscriptions.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe_all.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe_all.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaysendoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaysendoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaysendoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaysendoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaysendoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaysendoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_disconnected.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_disconnected.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_send_confirmation.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_send_confirmation.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeautocloseoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeautocloseoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_filter.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_filter.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_timeout.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_timeout.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeoptions.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeoptions.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new.argtypes = (
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_send_opts.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_send_opts.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapdetails.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapdetails.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapdetails.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapdetails.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapdetails_new.argtypes = (
    _UniffiRustBufferZapType,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapdetails_new.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_message.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_message.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_debug.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_debug.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_eq.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_eq.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_ne.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_ne.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_hash.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapentity.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapentity.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapentity.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapentity.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_event.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_event.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_public_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_public_key.restype = ctypes.c_void_p
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_debug.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_debug.restype = _UniffiRustBuffer
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_eq.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_eq.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_ne.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_ne.restype = ctypes.c_int8
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_hash.restype = ctypes.c_uint64
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customnostrdatabase.argtypes = (
    ctypes.POINTER(UniffiVTableCallbackInterfaceCustomNostrDatabase),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customnostrdatabase.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_handlenotification.argtypes = (
    ctypes.POINTER(UniffiVTableCallbackInterfaceHandleNotification),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_handlenotification.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_fn_func_init_logger.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_nostr_sdk_ffi_fn_func_init_logger.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_free.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i8.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i16.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_u64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_u64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_i64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_i64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f32.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_f64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_f64.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_pointer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_poll_void.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_cancel_void.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_free_void.restype = None
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_nostr_sdk_ffi_rust_future_complete_void.restype = None
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_func_init_logger.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_func_init_logger.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_aborthandle_abort.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_aborthandle_abort.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_aborthandle_is_aborted.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_aborthandle_is_aborted.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay_with_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relay_with_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_add_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_blacklist.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_blacklist.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_with_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_connect_with_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_database.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_database.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_dislike.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_dislike.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_file_metadata.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_file_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_from.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_from.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_get_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_gift_wrap.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_like.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_like.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_mute_ids.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_mute_ids.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_mute_public_keys.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_mute_public_keys.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_reaction.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_reaction.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_reconcile.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_reconcile.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_repost.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_repost.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_direct_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_direct_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_builder_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_send_private_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_shutdown.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_shutdown.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_sign_event_builder.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_signer.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_signer.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_start.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_start.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_stop.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_stop.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscribe_with_id_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscription.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscription.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_subscriptions.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unmute_ids.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unmute_ids.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unmute_public_keys.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unmute_public_keys.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe_all.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe_all.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_update_difficulty.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_update_difficulty.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_update_min_pow_difficulty.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_update_min_pow_difficulty.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_zap.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_client_zap.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_signer.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_zapper.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_zapper.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_balance.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_get_info.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_list_transactions.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_list_transactions.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_lookup_invoice.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_make_invoice.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_invoice.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nwc_pay_keysend.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_direction.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_direction.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_initial_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_negentropyoptions_initial_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_nostr_connect_uri.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_nostr_connect_uri.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_signer_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nip46signer_signer_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_delete.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_seen_on_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_seen_on_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_profile.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_profile.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_decrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip04_encrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_decrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_nip44_encrypt.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event_builder.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrsigner_sign_event_builder.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_proxy.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_proxy.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_nostrwalletconnectoptions_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_connection_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_connection_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_difficulty.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_difficulty.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_min_pow.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_min_pow.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_proxy.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_proxy.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_relay_limits.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_req_filters_chunk_size.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_req_filters_chunk_size.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_send_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_send_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_skip_disconnected_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_skip_disconnected_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_send.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_send.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_subscription.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_subscription.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_metadata.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_metadata.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_name.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_name.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_profile_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_proxy_target.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_proxy_target.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_batch_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_blacklist.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_blacklist.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_connect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_connect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_count_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_count_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_document.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_document.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_get_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_get_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_proxy.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_proxy.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_queue.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_queue.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile_with_items.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_reconcile_with_items.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_stats.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_stats.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_status.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_status.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_stop.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_stop.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe_with_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe_with_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscription.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscription.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_support_negentropy.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_support_negentropy.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_terminate.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_terminate.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe_all.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe_all.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_url.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relay_url.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_add_ids.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_add_ids.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_add_public_keys.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_add_public_keys.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_clear.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_clear.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_has_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_has_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_has_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_has_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_ids.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_ids.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_public_keys.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayblacklist_remove_public_keys.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_first_connection_timestamp.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_first_connection_timestamp.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_uptime.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_uptime.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_num_tags.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_event_max_size.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_message_max_size.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaylimits_message_max_size.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_adjust_retry_sec.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_adjust_retry_sec.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_limits.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_ping.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_pow.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_pow.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_proxy.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_proxy.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_read.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_reconnect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_reconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_retry_sec.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_retry_sec.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_adjust_retry_sec.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_adjust_retry_sec.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_pow_difficulty.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_pow_difficulty.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_reconnect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_reconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_retry_sec.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_update_retry_sec.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relayoptions_write.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_add_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_add_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_event_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_msg_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_batch_msg_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_blacklist.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_blacklist.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_connect_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_database.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_database.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_disconnect.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_disconnect.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_from.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_from.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_of.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_get_events_of.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_handle_notifications.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_handle_notifications.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile_with_items.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_reconcile_with_items.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_all_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_all_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_relay.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_remove_relay.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_event_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_msg_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_send_msg_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_shutdown.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_shutdown.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_start.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_start.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_stop.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_stop.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id_to.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscribe_with_id_to.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscription.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscription.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscriptions.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_subscriptions.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe_all.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaypool_unsubscribe_all.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_disconnected.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_disconnected.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_send_confirmation.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_skip_send_confirmation.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_relaysendoptions_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_filter.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_filter.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_timeout.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeautocloseoptions_timeout.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_close_on.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_close_on.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_send_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_subscribeoptions_send_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_zapdetails_message.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_zapdetails_message.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_with_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_client_with_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nwc_with_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_negentropyoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_negentropyoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nip46signer_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nip46signer_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_custom.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_custom.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_ndb.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_ndb.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_sqlite.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_sqlite.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_keys.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nip46.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrsigner_nip46.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnectoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrwalletconnectoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrzapper_nwc.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_nostrzapper_nwc.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_options_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_options_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_profile_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_profile_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_proxy_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_proxy_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_custom.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_custom.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_with_opts.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relay_with_opts.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayblacklist_empty.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayblacklist_empty.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayblacklist_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayblacklist_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_disable.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_disable.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaylimits_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relayoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_with_database.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaypool_with_database.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaysendoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_relaysendoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeautocloseoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeautocloseoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeoptions_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_subscribeoptions_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapdetails_new.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapdetails_new.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_public_key.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_constructor_zapentity_public_key.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_backend.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_backend.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_save_event.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_save_event.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_event_already_been_saved.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_event_already_been_saved.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_event_already_been_seen.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_event_already_been_seen.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_event_id_been_deleted.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_event_id_been_deleted.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_coordinate_been_deleted.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_has_coordinate_been_deleted.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_id_seen.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_id_seen.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_seen_on_relays.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_seen_on_relays.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_by_id.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_event_by_id.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_count.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_count.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_query.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_query.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_delete.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_delete.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_wipe.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_customnostrdatabase_wipe.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg.restype = ctypes.c_uint16
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle.argtypes = (
)
_UniffiLib.uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle.restype = ctypes.c_uint16
_UniffiLib.ffi_nostr_sdk_ffi_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_nostr_sdk_ffi_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt8(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.read_u8()

    @staticmethod
    def write(value, buf):
        buf.write_u8(value)

class _UniffiConverterUInt16(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u16"
    VALUE_MIN = 0
    VALUE_MAX = 2**16

    @staticmethod
    def read(buf):
        return buf.read_u16()

    @staticmethod
    def write(value, buf):
        buf.write_u16(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterDouble(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_double()

    @staticmethod
    def write(value, buf):
        buf.write_double(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

# The Duration type.
Duration = datetime.timedelta

# There is a loss of precision when converting from Rust durations,
# which are accurate to the nanosecond,
# to Python durations, which are only accurate to the microsecond.
class _UniffiConverterDuration(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        seconds = buf.read_u64()
        microseconds = buf.read_u32() / 1.0e3
        return datetime.timedelta(seconds=seconds, microseconds=microseconds)

    @staticmethod
    def check_lower(value):
        seconds = value.seconds + value.days * 24 * 3600
        if seconds < 0:
            raise ValueError("Invalid duration, must be non-negative")

    @staticmethod
    def write(value, buf):
        seconds = value.seconds + value.days * 24 * 3600
        nanoseconds = value.microseconds * 1000
        buf.write_i64(seconds)
        buf.write_u32(nanoseconds)



class AbortHandleProtocol(typing.Protocol):
    def abort(self, ):
        """
        Abort thread
        """

        raise NotImplementedError
    def is_aborted(self, ):
        """
        Check if thread is aborted
        """

        raise NotImplementedError


class AbortHandle:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_aborthandle, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_aborthandle, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def abort(self, ) -> None:
        """
        Abort thread
        """

        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_aborthandle_abort,self._uniffi_clone_pointer(),)






    def is_aborted(self, ) -> "bool":
        """
        Check if thread is aborted
        """

        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_aborthandle_is_aborted,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeAbortHandle:

    @staticmethod
    def lift(value: int):
        return AbortHandle._make_instance_(value)

    @staticmethod
    def check_lower(value: AbortHandle):
        if not isinstance(value, AbortHandle):
            raise TypeError("Expected AbortHandle instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: AbortHandleProtocol):
        if not isinstance(value, AbortHandle):
            raise TypeError("Expected AbortHandle instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: AbortHandleProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ClientProtocol(typing.Protocol):
    def add_relay(self, url: "str"):
        """
        Add new relay

        Return `false` if the relay already exists.

        If are set pool subscriptions, the new added relay will inherit them. Use `subscribe_to` method instead of `subscribe`,
        to avoid to set pool subscriptions.

        This method use previously set or default `Options` to configure the `Relay` (ex. set proxy, set min POW, set relay limits, ...).
        To use custom `RelayOptions`, check `add_relay_with_opts` method.

        Connection is **NOT** automatically started with relay, remember to call `connect` method!
        """

        raise NotImplementedError
    def add_relay_with_opts(self, url: "str",opts: "RelayOptions"):
        """
        Add new relay with custom `RelayOptions`

        Return `false` if the relay already exists.

        If are set pool subscriptions, the new added relay will inherit them. Use `subscribe_to` method instead of `subscribe`,
        to avoid to set pool subscriptions.

        Connection is **NOT** automatically started with relay, remember to call `connect` method!
        """

        raise NotImplementedError
    def add_relays(self, relays: "typing.List[str]"):
        """
        Add multiple relays

        If are set pool subscriptions, the new added relay will inherit them. Use `subscribe_to` method instead of `subscribe`,
        to avoid to set pool subscriptions.

        Connection is **NOT** automatically started with relays, remember to call `connect` method!
        """

        raise NotImplementedError
    def blacklist(self, ):
        """
        Get blacklist
        """

        raise NotImplementedError
    def connect(self, ):
        """
        Connect to all added relays
        """

        raise NotImplementedError
    def connect_relay(self, url: "str"):
        """
        Connect to a previously added relay
        """

        raise NotImplementedError
    def connect_with_timeout(self, timeout: "Duration"):
        """
        Connect to all added relays

        Try to connect to the relays and wait for them to be connected at most for the specified `timeout`.
        The code continues if the `timeout` is reached or if all relays connect.
        """

        raise NotImplementedError
    def database(self, ):
        raise NotImplementedError
    def disconnect(self, ):
        raise NotImplementedError
    def disconnect_relay(self, url: "str"):
        raise NotImplementedError
    def dislike(self, event: "Event"):
        """
        Disike event

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        raise NotImplementedError
    def file_metadata(self, description: "str",metadata: "FileMetadata"):
        raise NotImplementedError
    def get_events_from(self, urls: "typing.List[str]",filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]"):
        """
        Get events of filters from specific relays

        Get events both from **local database** and **relays**
        """

        raise NotImplementedError
    def get_events_of(self, filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]"):
        raise NotImplementedError
    def gift_wrap(self, receiver: "PublicKey",rumor: "EventBuilder",expiration: "typing.Optional[Timestamp]"):
        """
        Gift Wrap

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        raise NotImplementedError
    def handle_notifications(self, handler: "HandleNotification"):
        """
        Handle notifications

        **This method spawn a thread**, so ensure to keep up the app after calling this (if needed).
        """

        raise NotImplementedError
    def like(self, event: "Event"):
        """
        Like event

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        raise NotImplementedError
    def mute_ids(self, ids: "typing.List[EventId]"):
        """
        Mute event IDs

        Add event IDs to blacklist

        <div class="warning">Mute list event is not currently created/updated!</div>
        """

        raise NotImplementedError
    def mute_public_keys(self, public_keys: "typing.List[PublicKey]"):
        """
        Mute public keys

        Add public keys to blacklist

        <div class="warning">Mute list event is not currently created/updated!</div>
        """

        raise NotImplementedError
    def reaction(self, event: "Event",reaction: "str"):
        """
        React to an [`Event`]

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        raise NotImplementedError
    def reconcile(self, filter: "Filter",opts: "NegentropyOptions"):
        raise NotImplementedError
    def relay(self, url: "str"):
        raise NotImplementedError
    def relays(self, ):
        raise NotImplementedError
    def remove_relay(self, url: "str"):
        raise NotImplementedError
    def repost(self, event: "Event",relay_url: "typing.Optional[str]"):
        """
        Repost
        """

        raise NotImplementedError
    def send_direct_msg(self, receiver: "PublicKey",msg: "str",reply: "typing.Optional[EventId]"):
        """
        Encrypted direct msg

        <div class="warning"><strong>Unsecure!</strong> Use `send_private_msg` instead!</div>

        <https://github.com/nostr-protocol/nips/blob/master/04.md>
        """

        raise NotImplementedError
    def send_event(self, event: "Event"):
        raise NotImplementedError
    def send_event_builder(self, builder: "EventBuilder"):
        """
        Take an [`EventBuilder`], sign it by using the [`NostrSigner`] and broadcast to all relays.

        Rise an error if the [`NostrSigner`] is not set.
        """

        raise NotImplementedError
    def send_event_builder_to(self, urls: "typing.List[str]",builder: "EventBuilder"):
        """
        Take an [`EventBuilder`], sign it by using the [`NostrSigner`] and broadcast to specific relays.

        Rise an error if the [`NostrSigner`] is not set.
        """

        raise NotImplementedError
    def send_event_to(self, urls: "typing.List[str]",event: "Event"):
        raise NotImplementedError
    def send_msg(self, msg: "ClientMessage"):
        raise NotImplementedError
    def send_msg_to(self, urls: "typing.List[str]",msg: "ClientMessage"):
        raise NotImplementedError
    def send_private_msg(self, receiver: "PublicKey",message: "str",reply_to: "typing.Union[object, typing.Optional[EventId]]" = _DEFAULT):
        """
        Send private direct message

        <https://github.com/nostr-protocol/nips/blob/master/17.md>
        """

        raise NotImplementedError
    def set_metadata(self, metadata: "Metadata"):
        raise NotImplementedError
    def shutdown(self, ):
        raise NotImplementedError
    def sign_event_builder(self, builder: "EventBuilder"):
        """
        Signs the `EventBuilder` into an `Event` using the `NostrSigner`
        """

        raise NotImplementedError
    def signer(self, ):
        raise NotImplementedError
    def start(self, ):
        raise NotImplementedError
    def stop(self, ):
        raise NotImplementedError
    def subscribe(self, filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT):
        """
        Subscribe to filters to all connected relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        raise NotImplementedError
    def subscribe_to(self, urls: "typing.List[str]",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT):
        """
        Subscribe to filters to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        raise NotImplementedError
    def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT):
        """
        Subscribe to filters with custom subscription ID to all connected relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        raise NotImplementedError
    def subscribe_with_id_to(self, urls: "typing.List[str]",id: "str",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT):
        """
        Subscribe to filters with custom subscription ID to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        raise NotImplementedError
    def subscription(self, id: "str"):
        raise NotImplementedError
    def subscriptions(self, ):
        raise NotImplementedError
    def unmute_ids(self, ids: "typing.List[EventId]"):
        """
        Unmute event IDs

        Remove event IDs from blacklist

        <div class="warning">Mute list event is not currently created/updated!</div>
        """

        raise NotImplementedError
    def unmute_public_keys(self, public_keys: "typing.List[PublicKey]"):
        """
        Unmute public keys

        Remove public keys from blacklist

        <div class="warning">Mute list event is not currently created/updated!</div>
        """

        raise NotImplementedError
    def unsubscribe(self, subscription_id: "str"):
        raise NotImplementedError
    def unsubscribe_all(self, ):
        raise NotImplementedError
    def update_difficulty(self, difficulty: "int"):
        """
        Update default difficulty for new `Event`
        """

        raise NotImplementedError
    def update_min_pow_difficulty(self, difficulty: "int"):
        """
        Update minimum POW difficulty for received events

        Events with a POW lower than the current value will be ignored to prevent resources exhaustion.
        """

        raise NotImplementedError
    def zap(self, to: "ZapEntity",satoshi: "int",details: "typing.Optional[ZapDetails]"):
        """
        Send a Zap!
        """

        raise NotImplementedError


class Client:
    _pointer: ctypes.c_void_p
    def __init__(self, signer: "typing.Union[object, typing.Optional[NostrSigner]]" = _DEFAULT):
        if signer is _DEFAULT:
            signer = None
        _UniffiConverterOptionalTypeNostrSigner.check_lower(signer)
        
        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_new,
        _UniffiConverterOptionalTypeNostrSigner.lower(signer))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_client, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_client, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def with_opts(cls, signer: "typing.Optional[NostrSigner]",opts: "Options"):
        _UniffiConverterOptionalTypeNostrSigner.check_lower(signer)
        
        _UniffiConverterTypeOptions.check_lower(opts)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_client_with_opts,
        _UniffiConverterOptionalTypeNostrSigner.lower(signer),
        _UniffiConverterTypeOptions.lower(opts))
        return cls._make_instance_(pointer)



    def add_relay(self, url: "str") -> "bool":
        """
        Add new relay

        Return `false` if the relay already exists.

        If are set pool subscriptions, the new added relay will inherit them. Use `subscribe_to` method instead of `subscribe`,
        to avoid to set pool subscriptions.

        This method use previously set or default `Options` to configure the `Relay` (ex. set proxy, set min POW, set relay limits, ...).
        To use custom `RelayOptions`, check `add_relay_with_opts` method.

        Connection is **NOT** automatically started with relay, remember to call `connect` method!
        """

        _UniffiConverterString.check_lower(url)
        
        return _UniffiConverterBool.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))
        )





    def add_relay_with_opts(self, url: "str",opts: "RelayOptions") -> "bool":
        """
        Add new relay with custom `RelayOptions`

        Return `false` if the relay already exists.

        If are set pool subscriptions, the new added relay will inherit them. Use `subscribe_to` method instead of `subscribe`,
        to avoid to set pool subscriptions.

        Connection is **NOT** automatically started with relay, remember to call `connect` method!
        """

        _UniffiConverterString.check_lower(url)
        
        _UniffiConverterTypeRelayOptions.check_lower(opts)
        
        return _UniffiConverterBool.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relay_with_opts,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url),
        _UniffiConverterTypeRelayOptions.lower(opts))
        )





    def add_relays(self, relays: "typing.List[str]") -> None:
        """
        Add multiple relays

        If are set pool subscriptions, the new added relay will inherit them. Use `subscribe_to` method instead of `subscribe`,
        to avoid to set pool subscriptions.

        Connection is **NOT** automatically started with relays, remember to call `connect` method!
        """

        _UniffiConverterSequenceString.check_lower(relays)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_add_relays,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(relays))






    def blacklist(self, ) -> "RelayBlacklist":
        """
        Get blacklist
        """

        return _UniffiConverterTypeRelayBlacklist.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_blacklist,self._uniffi_clone_pointer(),)
        )





    def connect(self, ) -> None:
        """
        Connect to all added relays
        """

        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect,self._uniffi_clone_pointer(),)






    def connect_relay(self, url: "str") -> None:
        """
        Connect to a previously added relay
        """

        _UniffiConverterString.check_lower(url)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))






    def connect_with_timeout(self, timeout: "Duration") -> None:
        """
        Connect to all added relays

        Try to connect to the relays and wait for them to be connected at most for the specified `timeout`.
        The code continues if the `timeout` is reached or if all relays connect.
        """

        _UniffiConverterDuration.check_lower(timeout)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_connect_with_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterDuration.lower(timeout))






    def database(self, ) -> "NostrDatabase":
        return _UniffiConverterTypeNostrDatabase.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_database,self._uniffi_clone_pointer(),)
        )





    def disconnect(self, ) -> None:
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect,self._uniffi_clone_pointer(),)






    def disconnect_relay(self, url: "str") -> None:
        _UniffiConverterString.check_lower(url)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))






    def dislike(self, event: "Event") -> "EventId":
        """
        Disike event

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_dislike,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEvent.lower(event))
        )





    def file_metadata(self, description: "str",metadata: "FileMetadata") -> "EventId":
        _UniffiConverterString.check_lower(description)
        
        _UniffiConverterTypeFileMetadata.check_lower(metadata)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_file_metadata,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(description),
        _UniffiConverterTypeFileMetadata.lower(metadata))
        )





    def get_events_from(self, urls: "typing.List[str]",filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]") -> "typing.List[Event]":
        """
        Get events of filters from specific relays

        Get events both from **local database** and **relays**
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterSequenceTypeEvent.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_from,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalDuration.lower(timeout))
        )





    def get_events_of(self, filters: "typing.List[Filter]",timeout: "typing.Optional[Duration]") -> "typing.List[Event]":
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterSequenceTypeEvent.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_get_events_of,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalDuration.lower(timeout))
        )





    def gift_wrap(self, receiver: "PublicKey",rumor: "EventBuilder",expiration: "typing.Optional[Timestamp]") -> None:
        """
        Gift Wrap

        <https://github.com/nostr-protocol/nips/blob/master/59.md>
        """

        _UniffiConverterTypePublicKey.check_lower(receiver)
        
        _UniffiConverterTypeEventBuilder.check_lower(rumor)
        
        _UniffiConverterOptionalTypeTimestamp.check_lower(expiration)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_gift_wrap,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(receiver),
        _UniffiConverterTypeEventBuilder.lower(rumor),
        _UniffiConverterOptionalTypeTimestamp.lower(expiration))






    def handle_notifications(self, handler: "HandleNotification") -> "AbortHandle":
        """
        Handle notifications

        **This method spawn a thread**, so ensure to keep up the app after calling this (if needed).
        """

        _UniffiConverterCallbackInterfaceHandleNotification.check_lower(handler)
        
        return _UniffiConverterTypeAbortHandle.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceHandleNotification.lower(handler))
        )





    def like(self, event: "Event") -> "EventId":
        """
        Like event

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_like,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEvent.lower(event))
        )





    def mute_ids(self, ids: "typing.List[EventId]") -> None:
        """
        Mute event IDs

        Add event IDs to blacklist

        <div class="warning">Mute list event is not currently created/updated!</div>
        """

        _UniffiConverterSequenceTypeEventId.check_lower(ids)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_mute_ids,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeEventId.lower(ids))






    def mute_public_keys(self, public_keys: "typing.List[PublicKey]") -> None:
        """
        Mute public keys

        Add public keys to blacklist

        <div class="warning">Mute list event is not currently created/updated!</div>
        """

        _UniffiConverterSequenceTypePublicKey.check_lower(public_keys)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_mute_public_keys,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypePublicKey.lower(public_keys))






    def reaction(self, event: "Event",reaction: "str") -> "EventId":
        """
        React to an [`Event`]

        <https://github.com/nostr-protocol/nips/blob/master/25.md>
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        _UniffiConverterString.check_lower(reaction)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reaction,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEvent.lower(event),
        _UniffiConverterString.lower(reaction))
        )





    def reconcile(self, filter: "Filter",opts: "NegentropyOptions") -> None:
        _UniffiConverterTypeFilter.check_lower(filter)
        
        _UniffiConverterTypeNegentropyOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_reconcile,self._uniffi_clone_pointer(),
        _UniffiConverterTypeFilter.lower(filter),
        _UniffiConverterTypeNegentropyOptions.lower(opts))






    def relay(self, url: "str") -> "Relay":
        _UniffiConverterString.check_lower(url)
        
        return _UniffiConverterTypeRelay.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))
        )





    def relays(self, ) -> "dict[str, Relay]":
        return _UniffiConverterMapStringTypeRelay.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_relays,self._uniffi_clone_pointer(),)
        )





    def remove_relay(self, url: "str") -> None:
        _UniffiConverterString.check_lower(url)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_remove_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))






    def repost(self, event: "Event",relay_url: "typing.Optional[str]") -> "EventId":
        """
        Repost
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        _UniffiConverterOptionalString.check_lower(relay_url)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_repost,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEvent.lower(event),
        _UniffiConverterOptionalString.lower(relay_url))
        )





    def send_direct_msg(self, receiver: "PublicKey",msg: "str",reply: "typing.Optional[EventId]") -> "EventId":
        """
        Encrypted direct msg

        <div class="warning"><strong>Unsecure!</strong> Use `send_private_msg` instead!</div>

        <https://github.com/nostr-protocol/nips/blob/master/04.md>
        """

        _UniffiConverterTypePublicKey.check_lower(receiver)
        
        _UniffiConverterString.check_lower(msg)
        
        _UniffiConverterOptionalTypeEventId.check_lower(reply)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_direct_msg,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(receiver),
        _UniffiConverterString.lower(msg),
        _UniffiConverterOptionalTypeEventId.lower(reply))
        )





    def send_event(self, event: "Event") -> "EventId":
        _UniffiConverterTypeEvent.check_lower(event)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEvent.lower(event))
        )





    def send_event_builder(self, builder: "EventBuilder") -> "EventId":
        """
        Take an [`EventBuilder`], sign it by using the [`NostrSigner`] and broadcast to all relays.

        Rise an error if the [`NostrSigner`] is not set.
        """

        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventBuilder.lower(builder))
        )





    def send_event_builder_to(self, urls: "typing.List[str]",builder: "EventBuilder") -> "EventId":
        """
        Take an [`EventBuilder`], sign it by using the [`NostrSigner`] and broadcast to specific relays.

        Rise an error if the [`NostrSigner`] is not set.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_builder_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeEventBuilder.lower(builder))
        )





    def send_event_to(self, urls: "typing.List[str]",event: "Event") -> "EventId":
        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeEvent.check_lower(event)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_event_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeEvent.lower(event))
        )





    def send_msg(self, msg: "ClientMessage") -> None:
        _UniffiConverterTypeClientMessage.check_lower(msg)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg,self._uniffi_clone_pointer(),
        _UniffiConverterTypeClientMessage.lower(msg))






    def send_msg_to(self, urls: "typing.List[str]",msg: "ClientMessage") -> None:
        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeClientMessage.check_lower(msg)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeClientMessage.lower(msg))






    def send_private_msg(self, receiver: "PublicKey",message: "str",reply_to: "typing.Union[object, typing.Optional[EventId]]" = _DEFAULT) -> None:
        """
        Send private direct message

        <https://github.com/nostr-protocol/nips/blob/master/17.md>
        """

        _UniffiConverterTypePublicKey.check_lower(receiver)
        
        _UniffiConverterString.check_lower(message)
        
        if reply_to is _DEFAULT:
            reply_to = None
        _UniffiConverterOptionalTypeEventId.check_lower(reply_to)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_send_private_msg,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(receiver),
        _UniffiConverterString.lower(message),
        _UniffiConverterOptionalTypeEventId.lower(reply_to))






    def set_metadata(self, metadata: "Metadata") -> "EventId":
        _UniffiConverterTypeMetadata.check_lower(metadata)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_set_metadata,self._uniffi_clone_pointer(),
        _UniffiConverterTypeMetadata.lower(metadata))
        )





    def shutdown(self, ) -> None:
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_shutdown,self._uniffi_clone_pointer(),)






    def sign_event_builder(self, builder: "EventBuilder") -> "Event":
        """
        Signs the `EventBuilder` into an `Event` using the `NostrSigner`
        """

        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return _UniffiConverterTypeEvent.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_sign_event_builder,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventBuilder.lower(builder))
        )





    def signer(self, ) -> "NostrSigner":
        return _UniffiConverterTypeNostrSigner.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_signer,self._uniffi_clone_pointer(),)
        )





    def start(self, ) -> None:
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_start,self._uniffi_clone_pointer(),)






    def stop(self, ) -> None:
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_stop,self._uniffi_clone_pointer(),)






    def subscribe(self, filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT) -> "str":
        """
        Subscribe to filters to all connected relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        if opts is _DEFAULT:
            opts = None
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.check_lower(opts)
        
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.lower(opts))
        )





    def subscribe_to(self, urls: "typing.List[str]",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT) -> "str":
        """
        Subscribe to filters to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        if opts is _DEFAULT:
            opts = None
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.check_lower(opts)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.lower(opts))
        )





    def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT) -> None:
        """
        Subscribe to filters with custom subscription ID to all connected relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        if opts is _DEFAULT:
            opts = None
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.check_lower(opts)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(id),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.lower(opts))






    def subscribe_with_id_to(self, urls: "typing.List[str]",id: "str",filters: "typing.List[Filter]",opts: "typing.Union[object, typing.Optional[SubscribeAutoCloseOptions]]" = _DEFAULT) -> None:
        """
        Subscribe to filters with custom subscription ID to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeAutoCloseOptions`.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        if opts is _DEFAULT:
            opts = None
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscribe_with_id_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterString.lower(id),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.lower(opts))






    def subscription(self, id: "str") -> "typing.Optional[typing.List[Filter]]":
        _UniffiConverterString.check_lower(id)
        
        return _UniffiConverterOptionalSequenceTypeFilter.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscription,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(id))
        )





    def subscriptions(self, ) -> "dict[str, typing.List[Filter]]":
        return _UniffiConverterMapStringSequenceTypeFilter.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_subscriptions,self._uniffi_clone_pointer(),)
        )





    def unmute_ids(self, ids: "typing.List[EventId]") -> None:
        """
        Unmute event IDs

        Remove event IDs from blacklist

        <div class="warning">Mute list event is not currently created/updated!</div>
        """

        _UniffiConverterSequenceTypeEventId.check_lower(ids)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unmute_ids,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeEventId.lower(ids))






    def unmute_public_keys(self, public_keys: "typing.List[PublicKey]") -> None:
        """
        Unmute public keys

        Remove public keys from blacklist

        <div class="warning">Mute list event is not currently created/updated!</div>
        """

        _UniffiConverterSequenceTypePublicKey.check_lower(public_keys)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unmute_public_keys,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypePublicKey.lower(public_keys))






    def unsubscribe(self, subscription_id: "str") -> None:
        _UniffiConverterString.check_lower(subscription_id)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(subscription_id))






    def unsubscribe_all(self, ) -> None:
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe_all,self._uniffi_clone_pointer(),)






    def update_difficulty(self, difficulty: "int") -> None:
        """
        Update default difficulty for new `Event`
        """

        _UniffiConverterUInt8.check_lower(difficulty)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_difficulty,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))






    def update_min_pow_difficulty(self, difficulty: "int") -> None:
        """
        Update minimum POW difficulty for received events

        Events with a POW lower than the current value will be ignored to prevent resources exhaustion.
        """

        _UniffiConverterUInt8.check_lower(difficulty)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_update_min_pow_difficulty,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))






    def zap(self, to: "ZapEntity",satoshi: "int",details: "typing.Optional[ZapDetails]") -> None:
        """
        Send a Zap!
        """

        _UniffiConverterTypeZapEntity.check_lower(to)
        
        _UniffiConverterUInt64.check_lower(satoshi)
        
        _UniffiConverterOptionalTypeZapDetails.check_lower(details)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_client_zap,self._uniffi_clone_pointer(),
        _UniffiConverterTypeZapEntity.lower(to),
        _UniffiConverterUInt64.lower(satoshi),
        _UniffiConverterOptionalTypeZapDetails.lower(details))







class _UniffiConverterTypeClient:

    @staticmethod
    def lift(value: int):
        return Client._make_instance_(value)

    @staticmethod
    def check_lower(value: Client):
        if not isinstance(value, Client):
            raise TypeError("Expected Client instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ClientProtocol):
        if not isinstance(value, Client):
            raise TypeError("Expected Client instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ClientProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ClientBuilderProtocol(typing.Protocol):
    def build(self, ):
        """
        Build [`Client`]
        """

        raise NotImplementedError
    def database(self, database: "NostrDatabase"):
        raise NotImplementedError
    def opts(self, opts: "Options"):
        """
        Set opts
        """

        raise NotImplementedError
    def signer(self, signer: "NostrSigner"):
        raise NotImplementedError
    def zapper(self, zapper: "NostrZapper"):
        raise NotImplementedError


class ClientBuilder:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        New client builder
        """

        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_clientbuilder, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_clientbuilder, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def build(self, ) -> "Client":
        """
        Build [`Client`]
        """

        return _UniffiConverterTypeClient.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build,self._uniffi_clone_pointer(),)
        )





    def database(self, database: "NostrDatabase") -> "ClientBuilder":
        _UniffiConverterTypeNostrDatabase.check_lower(database)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNostrDatabase.lower(database))
        )





    def opts(self, opts: "Options") -> "ClientBuilder":
        """
        Set opts
        """

        _UniffiConverterTypeOptions.check_lower(opts)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts,self._uniffi_clone_pointer(),
        _UniffiConverterTypeOptions.lower(opts))
        )





    def signer(self, signer: "NostrSigner") -> "ClientBuilder":
        _UniffiConverterTypeNostrSigner.check_lower(signer)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_signer,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNostrSigner.lower(signer))
        )





    def zapper(self, zapper: "NostrZapper") -> "ClientBuilder":
        _UniffiConverterTypeNostrZapper.check_lower(zapper)
        
        return _UniffiConverterTypeClientBuilder.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_clientbuilder_zapper,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNostrZapper.lower(zapper))
        )






class _UniffiConverterTypeClientBuilder:

    @staticmethod
    def lift(value: int):
        return ClientBuilder._make_instance_(value)

    @staticmethod
    def check_lower(value: ClientBuilder):
        if not isinstance(value, ClientBuilder):
            raise TypeError("Expected ClientBuilder instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ClientBuilderProtocol):
        if not isinstance(value, ClientBuilder):
            raise TypeError("Expected ClientBuilder instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ClientBuilderProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NwcProtocol(typing.Protocol):
    """
    Nostr Wallet Connect client
    """

    def get_balance(self, ):
        """
        Get balance
        """

        raise NotImplementedError
    def get_info(self, ):
        """
        Get info
        """

        raise NotImplementedError
    def list_transactions(self, params: "ListTransactionsRequestParams"):
        """
        List transactions
        """

        raise NotImplementedError
    def lookup_invoice(self, params: "LookupInvoiceRequestParams"):
        """
        Lookup invoice
        """

        raise NotImplementedError
    def make_invoice(self, params: "MakeInvoiceRequestParams"):
        """
        Create invoice
        """

        raise NotImplementedError
    def pay_invoice(self, invoice: "str"):
        """
        Pay invoice
        """

        raise NotImplementedError
    def pay_keysend(self, params: "PayKeysendRequestParams"):
        """
        Pay keysend
        """

        raise NotImplementedError


class Nwc:
    """
    Nostr Wallet Connect client
    """

    _pointer: ctypes.c_void_p
    def __init__(self, uri: "NostrWalletConnectUri"):
        """
        Compose new `NWC` client
        """

        _UniffiConverterTypeNostrWalletConnectURI.check_lower(uri)
        
        self._pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_new,
        _UniffiConverterTypeNostrWalletConnectURI.lower(uri))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nwc, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nwc, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def with_opts(cls, uri: "NostrWalletConnectUri",opts: "NostrWalletConnectOptions"):
        """
        Compose new `NWC` client with `NostrWalletConnectOptions`
        """

        _UniffiConverterTypeNostrWalletConnectURI.check_lower(uri)
        
        _UniffiConverterTypeNostrWalletConnectOptions.check_lower(opts)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nwc_with_opts,
        _UniffiConverterTypeNostrWalletConnectURI.lower(uri),
        _UniffiConverterTypeNostrWalletConnectOptions.lower(opts))
        return cls._make_instance_(pointer)



    def get_balance(self, ) -> "int":
        """
        Get balance
        """

        return _UniffiConverterUInt64.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_balance,self._uniffi_clone_pointer(),)
        )





    def get_info(self, ) -> "GetInfoResponseResult":
        """
        Get info
        """

        return _UniffiConverterTypeGetInfoResponseResult.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_get_info,self._uniffi_clone_pointer(),)
        )





    def list_transactions(self, params: "ListTransactionsRequestParams") -> "typing.List[LookupInvoiceResponseResult]":
        """
        List transactions
        """

        _UniffiConverterTypeListTransactionsRequestParams.check_lower(params)
        
        return _UniffiConverterSequenceTypeLookupInvoiceResponseResult.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_list_transactions,self._uniffi_clone_pointer(),
        _UniffiConverterTypeListTransactionsRequestParams.lower(params))
        )





    def lookup_invoice(self, params: "LookupInvoiceRequestParams") -> "LookupInvoiceResponseResult":
        """
        Lookup invoice
        """

        _UniffiConverterTypeLookupInvoiceRequestParams.check_lower(params)
        
        return _UniffiConverterTypeLookupInvoiceResponseResult.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_lookup_invoice,self._uniffi_clone_pointer(),
        _UniffiConverterTypeLookupInvoiceRequestParams.lower(params))
        )





    def make_invoice(self, params: "MakeInvoiceRequestParams") -> "MakeInvoiceResponseResult":
        """
        Create invoice
        """

        _UniffiConverterTypeMakeInvoiceRequestParams.check_lower(params)
        
        return _UniffiConverterTypeMakeInvoiceResponseResult.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_make_invoice,self._uniffi_clone_pointer(),
        _UniffiConverterTypeMakeInvoiceRequestParams.lower(params))
        )





    def pay_invoice(self, invoice: "str") -> "str":
        """
        Pay invoice
        """

        _UniffiConverterString.check_lower(invoice)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_invoice,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(invoice))
        )





    def pay_keysend(self, params: "PayKeysendRequestParams") -> "PayKeysendResponseResult":
        """
        Pay keysend
        """

        _UniffiConverterTypePayKeysendRequestParams.check_lower(params)
        
        return _UniffiConverterTypePayKeysendResponseResult.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nwc_pay_keysend,self._uniffi_clone_pointer(),
        _UniffiConverterTypePayKeysendRequestParams.lower(params))
        )






class _UniffiConverterTypeNWC:

    @staticmethod
    def lift(value: int):
        return Nwc._make_instance_(value)

    @staticmethod
    def check_lower(value: Nwc):
        if not isinstance(value, Nwc):
            raise TypeError("Expected Nwc instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NwcProtocol):
        if not isinstance(value, Nwc):
            raise TypeError("Expected Nwc instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NwcProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NegentropyOptionsProtocol(typing.Protocol):
    def direction(self, direction: "NegentropyDirection"):
        """
        Negentropy Sync direction (default: down)
        """

        raise NotImplementedError
    def initial_timeout(self, timeout: "Duration"):
        """
        Timeout to check if negentropy it's supported (default: 10 secs)
        """

        raise NotImplementedError


class NegentropyOptions:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        New default options
        """

        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_negentropyoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_negentropyoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_negentropyoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def direction(self, direction: "NegentropyDirection") -> "NegentropyOptions":
        """
        Negentropy Sync direction (default: down)
        """

        _UniffiConverterTypeNegentropyDirection.check_lower(direction)
        
        return _UniffiConverterTypeNegentropyOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_direction,self._uniffi_clone_pointer(),
        _UniffiConverterTypeNegentropyDirection.lower(direction))
        )





    def initial_timeout(self, timeout: "Duration") -> "NegentropyOptions":
        """
        Timeout to check if negentropy it's supported (default: 10 secs)
        """

        _UniffiConverterDuration.check_lower(timeout)
        
        return _UniffiConverterTypeNegentropyOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_negentropyoptions_initial_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterDuration.lower(timeout))
        )






class _UniffiConverterTypeNegentropyOptions:

    @staticmethod
    def lift(value: int):
        return NegentropyOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: NegentropyOptions):
        if not isinstance(value, NegentropyOptions):
            raise TypeError("Expected NegentropyOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NegentropyOptionsProtocol):
        if not isinstance(value, NegentropyOptions):
            raise TypeError("Expected NegentropyOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NegentropyOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class Nip46SignerProtocol(typing.Protocol):
    def nostr_connect_uri(self, ):
        """
        Get Nostr Connect URI in **bunker** format.
        """

        raise NotImplementedError
    def relays(self, ):
        """
        Get signer relays
        """

        raise NotImplementedError
    def signer_public_key(self, ):
        """
        Get signer public key
        """

        raise NotImplementedError


class Nip46Signer:
    _pointer: ctypes.c_void_p
    def __init__(self, uri: "NostrConnectUri",app_keys: "Keys",timeout: "Duration",opts: "typing.Optional[RelayOptions]"):
        """
        New NIP46 remote signer
        """

        _UniffiConverterTypeNostrConnectURI.check_lower(uri)
        
        _UniffiConverterTypeKeys.check_lower(app_keys)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        _UniffiConverterOptionalTypeRelayOptions.check_lower(opts)
        
        self._pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nip46signer_new,
        _UniffiConverterTypeNostrConnectURI.lower(uri),
        _UniffiConverterTypeKeys.lower(app_keys),
        _UniffiConverterDuration.lower(timeout),
        _UniffiConverterOptionalTypeRelayOptions.lower(opts))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nip46signer, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nip46signer, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def nostr_connect_uri(self, ) -> "NostrConnectUri":
        """
        Get Nostr Connect URI in **bunker** format.
        """

        return _UniffiConverterTypeNostrConnectURI.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_nostr_connect_uri,self._uniffi_clone_pointer(),)
        )





    def relays(self, ) -> "typing.List[str]":
        """
        Get signer relays
        """

        return _UniffiConverterSequenceString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_relays,self._uniffi_clone_pointer(),)
        )





    def signer_public_key(self, ) -> "PublicKey":
        """
        Get signer public key
        """

        return _UniffiConverterTypePublicKey.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nip46signer_signer_public_key,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeNip46Signer:

    @staticmethod
    def lift(value: int):
        return Nip46Signer._make_instance_(value)

    @staticmethod
    def check_lower(value: Nip46Signer):
        if not isinstance(value, Nip46Signer):
            raise TypeError("Expected Nip46Signer instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: Nip46SignerProtocol):
        if not isinstance(value, Nip46Signer):
            raise TypeError("Expected Nip46Signer instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: Nip46SignerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrDatabaseProtocol(typing.Protocol):
    def count(self, filters: "typing.List[Filter]"):
        raise NotImplementedError
    def delete(self, filter: "Filter"):
        """
        Delete all events that match the `Filter`
        """

        raise NotImplementedError
    def event_by_id(self, event_id: "EventId"):
        """
        Get [`Event`] by [`EventId`]
        """

        raise NotImplementedError
    def event_seen_on_relays(self, event_id: "EventId"):
        """
        Get list of relays that have seen the [`EventId`]
        """

        raise NotImplementedError
    def profile(self, public_key: "PublicKey"):
        raise NotImplementedError
    def query(self, filters: "typing.List[Filter]"):
        raise NotImplementedError
    def save_event(self, event: "Event"):
        """
        Save [`Event`] into store

        Return `true` if event was successfully saved into database.
        """

        raise NotImplementedError
    def wipe(self, ):
        """
        Wipe all data
        """

        raise NotImplementedError


class NostrDatabase:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrdatabase, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def custom(cls, database: "CustomNostrDatabase"):
        _UniffiConverterCallbackInterfaceCustomNostrDatabase.check_lower(database)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_custom,
        _UniffiConverterCallbackInterfaceCustomNostrDatabase.lower(database))
        return cls._make_instance_(pointer)


    @classmethod
    def ndb(cls, path: "str"):
        """
        [`nostrdb`](https://github.com/damus-io/nostrdb) backend
        """

        _UniffiConverterString.check_lower(path)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_ndb,
        _UniffiConverterString.lower(path))
        return cls._make_instance_(pointer)


    @classmethod
    def sqlite(cls, path: "str"):
        _UniffiConverterString.check_lower(path)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_sqlite,
        _UniffiConverterString.lower(path))
        return cls._make_instance_(pointer)



    def count(self, filters: "typing.List[Filter]") -> "int":
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        return _UniffiConverterUInt64.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters))
        )





    def delete(self, filter: "Filter") -> None:
        """
        Delete all events that match the `Filter`
        """

        _UniffiConverterTypeFilter.check_lower(filter)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_delete,self._uniffi_clone_pointer(),
        _UniffiConverterTypeFilter.lower(filter))






    def event_by_id(self, event_id: "EventId") -> "Event":
        """
        Get [`Event`] by [`EventId`]
        """

        _UniffiConverterTypeEventId.check_lower(event_id)
        
        return _UniffiConverterTypeEvent.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventId.lower(event_id))
        )





    def event_seen_on_relays(self, event_id: "EventId") -> "typing.Optional[typing.List[str]]":
        """
        Get list of relays that have seen the [`EventId`]
        """

        _UniffiConverterTypeEventId.check_lower(event_id)
        
        return _UniffiConverterOptionalSequenceString.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_seen_on_relays,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventId.lower(event_id))
        )





    def profile(self, public_key: "PublicKey") -> "Profile":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        return _UniffiConverterTypeProfile.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_profile,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key))
        )





    def query(self, filters: "typing.List[Filter]") -> "typing.List[Event]":
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        return _UniffiConverterSequenceTypeEvent.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters))
        )





    def save_event(self, event: "Event") -> "bool":
        """
        Save [`Event`] into store

        Return `true` if event was successfully saved into database.
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        return _UniffiConverterBool.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEvent.lower(event))
        )





    def wipe(self, ) -> None:
        """
        Wipe all data
        """

        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe,self._uniffi_clone_pointer(),)







class _UniffiConverterTypeNostrDatabase:

    @staticmethod
    def lift(value: int):
        return NostrDatabase._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrDatabase):
        if not isinstance(value, NostrDatabase):
            raise TypeError("Expected NostrDatabase instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrDatabaseProtocol):
        if not isinstance(value, NostrDatabase):
            raise TypeError("Expected NostrDatabase instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrDatabaseProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrSignerProtocol(typing.Protocol):
    def nip04_decrypt(self, public_key: "PublicKey",encrypted_content: "str"):
        raise NotImplementedError
    def nip04_encrypt(self, public_key: "PublicKey",content: "str"):
        raise NotImplementedError
    def nip44_decrypt(self, public_key: "PublicKey",content: "str"):
        raise NotImplementedError
    def nip44_encrypt(self, public_key: "PublicKey",content: "str"):
        raise NotImplementedError
    def public_key(self, ):
        """
        Get signer public key
        """

        raise NotImplementedError
    def sign_event(self, unsigned_event: "UnsignedEvent"):
        raise NotImplementedError
    def sign_event_builder(self, builder: "EventBuilder"):
        raise NotImplementedError


class NostrSigner:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrsigner, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrsigner, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def keys(cls, keys: "Keys"):
        _UniffiConverterTypeKeys.check_lower(keys)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_keys,
        _UniffiConverterTypeKeys.lower(keys))
        return cls._make_instance_(pointer)


    @classmethod
    def nip46(cls, nip46: "Nip46Signer"):
        _UniffiConverterTypeNip46Signer.check_lower(nip46)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrsigner_nip46,
        _UniffiConverterTypeNip46Signer.lower(nip46))
        return cls._make_instance_(pointer)



    def nip04_decrypt(self, public_key: "PublicKey",encrypted_content: "str") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(encrypted_content)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_decrypt,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(encrypted_content))
        )





    def nip04_encrypt(self, public_key: "PublicKey",content: "str") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(content)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip04_encrypt,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(content))
        )





    def nip44_decrypt(self, public_key: "PublicKey",content: "str") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(content)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_decrypt,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(content))
        )





    def nip44_encrypt(self, public_key: "PublicKey",content: "str") -> "str":
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterString.check_lower(content)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_nip44_encrypt,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterString.lower(content))
        )





    def public_key(self, ) -> "PublicKey":
        """
        Get signer public key
        """

        return _UniffiConverterTypePublicKey.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_public_key,self._uniffi_clone_pointer(),)
        )





    def sign_event(self, unsigned_event: "UnsignedEvent") -> "Event":
        _UniffiConverterTypeUnsignedEvent.check_lower(unsigned_event)
        
        return _UniffiConverterTypeEvent.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event,self._uniffi_clone_pointer(),
        _UniffiConverterTypeUnsignedEvent.lower(unsigned_event))
        )





    def sign_event_builder(self, builder: "EventBuilder") -> "Event":
        _UniffiConverterTypeEventBuilder.check_lower(builder)
        
        return _UniffiConverterTypeEvent.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrsigner_sign_event_builder,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventBuilder.lower(builder))
        )






class _UniffiConverterTypeNostrSigner:

    @staticmethod
    def lift(value: int):
        return NostrSigner._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrSigner):
        if not isinstance(value, NostrSigner):
            raise TypeError("Expected NostrSigner instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrSignerProtocol):
        if not isinstance(value, NostrSigner):
            raise TypeError("Expected NostrSigner instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrSignerProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrWalletConnectOptionsProtocol(typing.Protocol):
    """
    NWC options
    """

    def proxy(self, proxy: "typing.Optional[str]"):
        """
        Set proxy
        """

        raise NotImplementedError
    def timeout(self, timeout: "Duration"):
        """
        Set NWC requests timeout (default: 10 secs)
        """

        raise NotImplementedError


class NostrWalletConnectOptions:
    """
    NWC options
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        New default NWC options
        """

        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrwalletconnectoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrwalletconnectoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrwalletconnectoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def proxy(self, proxy: "typing.Optional[str]") -> "NostrWalletConnectOptions":
        """
        Set proxy
        """

        _UniffiConverterOptionalString.check_lower(proxy)
        
        return _UniffiConverterTypeNostrWalletConnectOptions.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_proxy,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(proxy))
        )





    def timeout(self, timeout: "Duration") -> "NostrWalletConnectOptions":
        """
        Set NWC requests timeout (default: 10 secs)
        """

        _UniffiConverterDuration.check_lower(timeout)
        
        return _UniffiConverterTypeNostrWalletConnectOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_nostrwalletconnectoptions_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterDuration.lower(timeout))
        )






class _UniffiConverterTypeNostrWalletConnectOptions:

    @staticmethod
    def lift(value: int):
        return NostrWalletConnectOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrWalletConnectOptions):
        if not isinstance(value, NostrWalletConnectOptions):
            raise TypeError("Expected NostrWalletConnectOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrWalletConnectOptionsProtocol):
        if not isinstance(value, NostrWalletConnectOptions):
            raise TypeError("Expected NostrWalletConnectOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrWalletConnectOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class NostrZapperProtocol(typing.Protocol):
    """
    Nostr Zapper
    """

    pass


class NostrZapper:
    """
    Nostr Zapper
    """

    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_nostrzapper, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_nostrzapper, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def nwc(cls, uri: "NostrWalletConnectUri"):
        _UniffiConverterTypeNostrWalletConnectURI.check_lower(uri)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_nostrzapper_nwc,
        _UniffiConverterTypeNostrWalletConnectURI.lower(uri))
        return cls._make_instance_(pointer)




class _UniffiConverterTypeNostrZapper:

    @staticmethod
    def lift(value: int):
        return NostrZapper._make_instance_(value)

    @staticmethod
    def check_lower(value: NostrZapper):
        if not isinstance(value, NostrZapper):
            raise TypeError("Expected NostrZapper instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: NostrZapperProtocol):
        if not isinstance(value, NostrZapper):
            raise TypeError("Expected NostrZapper instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: NostrZapperProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class OptionsProtocol(typing.Protocol):
    def connection_timeout(self, timeout: "typing.Optional[Duration]"):
        """
        Connection timeout (default: None)

        If set to `None`, the client will try to connect to the relays without waiting.
        """

        raise NotImplementedError
    def difficulty(self, difficulty: "int"):
        raise NotImplementedError
    def min_pow(self, difficulty: "int"):
        """
        Minimum POW difficulty for received events
        """

        raise NotImplementedError
    def proxy(self, proxy: "Proxy"):
        """
        Proxy
        """

        raise NotImplementedError
    def relay_limits(self, limits: "RelayLimits"):
        """
        Set custom relay limits
        """

        raise NotImplementedError
    def req_filters_chunk_size(self, req_filters_chunk_size: "int"):
        raise NotImplementedError
    def send_timeout(self, send_timeout: "typing.Optional[Duration]"):
        raise NotImplementedError
    def skip_disconnected_relays(self, skip: "bool"):
        raise NotImplementedError
    def timeout(self, timeout: "Duration"):
        raise NotImplementedError
    def wait_for_send(self, wait: "bool"):
        raise NotImplementedError
    def wait_for_subscription(self, wait: "bool"):
        raise NotImplementedError


class Options:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_options_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_options, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_options, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def connection_timeout(self, timeout: "typing.Optional[Duration]") -> "Options":
        """
        Connection timeout (default: None)

        If set to `None`, the client will try to connect to the relays without waiting.
        """

        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_connection_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(timeout))
        )





    def difficulty(self, difficulty: "int") -> "Options":
        _UniffiConverterUInt8.check_lower(difficulty)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_difficulty,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))
        )





    def min_pow(self, difficulty: "int") -> "Options":
        """
        Minimum POW difficulty for received events
        """

        _UniffiConverterUInt8.check_lower(difficulty)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_min_pow,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))
        )





    def proxy(self, proxy: "Proxy") -> "Options":
        """
        Proxy
        """

        _UniffiConverterTypeProxy.check_lower(proxy)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_proxy,self._uniffi_clone_pointer(),
        _UniffiConverterTypeProxy.lower(proxy))
        )





    def relay_limits(self, limits: "RelayLimits") -> "Options":
        """
        Set custom relay limits
        """

        _UniffiConverterTypeRelayLimits.check_lower(limits)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_relay_limits,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelayLimits.lower(limits))
        )





    def req_filters_chunk_size(self, req_filters_chunk_size: "int") -> "Options":
        _UniffiConverterUInt8.check_lower(req_filters_chunk_size)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_req_filters_chunk_size,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(req_filters_chunk_size))
        )





    def send_timeout(self, send_timeout: "typing.Optional[Duration]") -> "Options":
        _UniffiConverterOptionalDuration.check_lower(send_timeout)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_send_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(send_timeout))
        )





    def skip_disconnected_relays(self, skip: "bool") -> "Options":
        _UniffiConverterBool.check_lower(skip)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_skip_disconnected_relays,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(skip))
        )





    def timeout(self, timeout: "Duration") -> "Options":
        _UniffiConverterDuration.check_lower(timeout)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterDuration.lower(timeout))
        )





    def wait_for_send(self, wait: "bool") -> "Options":
        _UniffiConverterBool.check_lower(wait)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_send,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(wait))
        )





    def wait_for_subscription(self, wait: "bool") -> "Options":
        _UniffiConverterBool.check_lower(wait)
        
        return _UniffiConverterTypeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_options_wait_for_subscription,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(wait))
        )






class _UniffiConverterTypeOptions:

    @staticmethod
    def lift(value: int):
        return Options._make_instance_(value)

    @staticmethod
    def check_lower(value: Options):
        if not isinstance(value, Options):
            raise TypeError("Expected Options instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: OptionsProtocol):
        if not isinstance(value, Options):
            raise TypeError("Expected Options instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: OptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ProfileProtocol(typing.Protocol):
    def metadata(self, ):
        """
        Get profile metadata
        """

        raise NotImplementedError
    def name(self, ):
        """
        Get profile name

        Steps (go to next step if field is `None` or `empty`):
        * Check `display_name` field
        * Check `name` field
        * Return cutted public key (ex. `00000000:00000002`)
        """

        raise NotImplementedError
    def public_key(self, ):
        """
        Get profile public key
        """

        raise NotImplementedError


class Profile:
    _pointer: ctypes.c_void_p
    def __init__(self, public_key: "PublicKey",metadata: "Metadata"):
        """
        Compose new profile
        """

        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _UniffiConverterTypeMetadata.check_lower(metadata)
        
        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_profile_new,
        _UniffiConverterTypePublicKey.lower(public_key),
        _UniffiConverterTypeMetadata.lower(metadata))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_profile, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_profile, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def metadata(self, ) -> "Metadata":
        """
        Get profile metadata
        """

        return _UniffiConverterTypeMetadata.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_metadata,self._uniffi_clone_pointer(),)
        )





    def name(self, ) -> "str":
        """
        Get profile name

        Steps (go to next step if field is `None` or `empty`):
        * Check `display_name` field
        * Check `name` field
        * Return cutted public key (ex. `00000000:00000002`)
        """

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_name,self._uniffi_clone_pointer(),)
        )





    def public_key(self, ) -> "PublicKey":
        """
        Get profile public key
        """

        return _UniffiConverterTypePublicKey.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_public_key,self._uniffi_clone_pointer(),)
        )





    def __repr__(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_debug,self._uniffi_clone_pointer(),)
        )



    def __eq__(self, other: object) -> bool:
        if not isinstance(other, Profile):
            return NotImplemented

        return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_eq,self._uniffi_clone_pointer(),
        _UniffiConverterTypeProfile.lower(other)))

    def __ne__(self, other: object) -> bool:
        if not isinstance(other, Profile):
            return NotImplemented

        return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_eq_ne,self._uniffi_clone_pointer(),
        _UniffiConverterTypeProfile.lower(other)))


    def __hash__(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_profile_uniffi_trait_hash,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeProfile:

    @staticmethod
    def lift(value: int):
        return Profile._make_instance_(value)

    @staticmethod
    def check_lower(value: Profile):
        if not isinstance(value, Profile):
            raise TypeError("Expected Profile instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ProfileProtocol):
        if not isinstance(value, Profile):
            raise TypeError("Expected Profile instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ProfileProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ProxyProtocol(typing.Protocol):
    """
    Proxy
    """

    def target(self, target: "ProxyTarget"):
        """
        Set proxy target (default: all)
        """

        raise NotImplementedError


class Proxy:
    """
    Proxy
    """

    _pointer: ctypes.c_void_p
    def __init__(self, addr: "str"):
        """
        Compose proxy (ex. `127.0.0.1:9050`)
        """

        _UniffiConverterString.check_lower(addr)
        
        self._pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_proxy_new,
        _UniffiConverterString.lower(addr))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_proxy, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_proxy, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def target(self, target: "ProxyTarget") -> "Proxy":
        """
        Set proxy target (default: all)
        """

        _UniffiConverterTypeProxyTarget.check_lower(target)
        
        return _UniffiConverterTypeProxy.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_target,self._uniffi_clone_pointer(),
        _UniffiConverterTypeProxyTarget.lower(target))
        )





    def __repr__(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_debug,self._uniffi_clone_pointer(),)
        )



    def __eq__(self, other: object) -> bool:
        if not isinstance(other, Proxy):
            return NotImplemented

        return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_eq_eq,self._uniffi_clone_pointer(),
        _UniffiConverterTypeProxy.lower(other)))

    def __ne__(self, other: object) -> bool:
        if not isinstance(other, Proxy):
            return NotImplemented

        return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_eq_ne,self._uniffi_clone_pointer(),
        _UniffiConverterTypeProxy.lower(other)))


    def __hash__(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_proxy_uniffi_trait_hash,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeProxy:

    @staticmethod
    def lift(value: int):
        return Proxy._make_instance_(value)

    @staticmethod
    def check_lower(value: Proxy):
        if not isinstance(value, Proxy):
            raise TypeError("Expected Proxy instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ProxyProtocol):
        if not isinstance(value, Proxy):
            raise TypeError("Expected Proxy instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ProxyProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayProtocol(typing.Protocol):
    def batch_event(self, events: "typing.List[Event]",opts: "RelaySendOptions"):
        """
        Send multiple `Event` at once
        """

        raise NotImplementedError
    def batch_msg(self, msgs: "typing.List[ClientMessage]",opts: "RelaySendOptions"):
        """
        Send multiple `ClientMessage` at once
        """

        raise NotImplementedError
    def blacklist(self, ):
        """
        Get blacklist
        """

        raise NotImplementedError
    def connect(self, connection_timeout: "typing.Optional[Duration]"):
        """
        Connect to relay and keep alive connection
        """

        raise NotImplementedError
    def count_events_of(self, filters: "typing.List[Filter]",timeout: "Duration"):
        """
        Count events of filters
        """

        raise NotImplementedError
    def document(self, ):
        raise NotImplementedError
    def get_events_of(self, filters: "typing.List[Filter]",timeout: "Duration"):
        """
        Get events of filters

        Get events from local database and relay
        """

        raise NotImplementedError
    def is_connected(self, ):
        """
        Check if `Relay` is connected
        """

        raise NotImplementedError
    def opts(self, ):
        raise NotImplementedError
    def proxy(self, ):
        """
        Get proxy
        """

        raise NotImplementedError
    def queue(self, ):
        """
        Get number of messages in queue
        """

        raise NotImplementedError
    def reconcile(self, filter: "Filter",opts: "NegentropyOptions"):
        """
        Negentropy reconciliation

        Use events stored in database
        """

        raise NotImplementedError
    def reconcile_with_items(self, filter: "Filter",items: "typing.List[NegentropyItem]",opts: "NegentropyOptions"):
        """
        Negentropy reconciliation with custom items
        """

        raise NotImplementedError
    def send_event(self, event: "Event",opts: "RelaySendOptions"):
        """
        Send event and wait for `OK` relay msg
        """

        raise NotImplementedError
    def send_msg(self, msg: "ClientMessage",opts: "RelaySendOptions"):
        """
        Send msg to relay
        """

        raise NotImplementedError
    def stats(self, ):
        raise NotImplementedError
    def status(self, ):
        """
        Get relay status
        """

        raise NotImplementedError
    def stop(self, ):
        """
        Disconnect from relay and set status to 'Stopped'
        """

        raise NotImplementedError
    def subscribe(self, filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe to filters

        Internally generate a new random subscription ID. Check `subscribe_with_id` method to use a custom subscription ID.

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        raise NotImplementedError
    def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe with custom subscription ID

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        raise NotImplementedError
    def subscription(self, id: "str"):
        """
        Get filters by subscription ID
        """

        raise NotImplementedError
    def subscriptions(self, ):
        raise NotImplementedError
    def support_negentropy(self, ):
        """
        Check if relay support negentropy protocol
        """

        raise NotImplementedError
    def terminate(self, ):
        """
        Disconnect from relay and set status to 'Terminated'
        """

        raise NotImplementedError
    def unsubscribe(self, id: "str",opts: "RelaySendOptions"):
        """
        Unsubscribe
        """

        raise NotImplementedError
    def unsubscribe_all(self, opts: "RelaySendOptions"):
        """
        Unsubscribe from all subscriptions
        """

        raise NotImplementedError
    def url(self, ):
        """
        Get relay url
        """

        raise NotImplementedError


class Relay:
    _pointer: ctypes.c_void_p
    def __init__(self, url: "str"):
        """
        Create new `Relay` with **default** `options` and `in-memory database`
        """

        _UniffiConverterString.check_lower(url)
        
        self._pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_new,
        _UniffiConverterString.lower(url))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relay, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relay, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def custom(cls, url: "str",database: "NostrDatabase",blacklist: "RelayBlacklist",opts: "RelayOptions"):
        """
        Create new `Relay` with **custom** `options` and/or `database`
        """

        _UniffiConverterString.check_lower(url)
        
        _UniffiConverterTypeNostrDatabase.check_lower(database)
        
        _UniffiConverterTypeRelayBlacklist.check_lower(blacklist)
        
        _UniffiConverterTypeRelayOptions.check_lower(opts)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_custom,
        _UniffiConverterString.lower(url),
        _UniffiConverterTypeNostrDatabase.lower(database),
        _UniffiConverterTypeRelayBlacklist.lower(blacklist),
        _UniffiConverterTypeRelayOptions.lower(opts))
        return cls._make_instance_(pointer)


    @classmethod
    def with_opts(cls, url: "str",opts: "RelayOptions"):
        """
        Create new `Relay` with default `in-memory database` and custom `options`
        """

        _UniffiConverterString.check_lower(url)
        
        _UniffiConverterTypeRelayOptions.check_lower(opts)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relay_with_opts,
        _UniffiConverterString.lower(url),
        _UniffiConverterTypeRelayOptions.lower(opts))
        return cls._make_instance_(pointer)



    def batch_event(self, events: "typing.List[Event]",opts: "RelaySendOptions") -> None:
        """
        Send multiple `Event` at once
        """

        _UniffiConverterSequenceTypeEvent.check_lower(events)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_event,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeEvent.lower(events),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def batch_msg(self, msgs: "typing.List[ClientMessage]",opts: "RelaySendOptions") -> None:
        """
        Send multiple `ClientMessage` at once
        """

        _UniffiConverterSequenceTypeClientMessage.check_lower(msgs)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_batch_msg,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeClientMessage.lower(msgs),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def blacklist(self, ) -> "RelayBlacklist":
        """
        Get blacklist
        """

        return _UniffiConverterTypeRelayBlacklist.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_blacklist,self._uniffi_clone_pointer(),)
        )





    def connect(self, connection_timeout: "typing.Optional[Duration]") -> None:
        """
        Connect to relay and keep alive connection
        """

        _UniffiConverterOptionalDuration.check_lower(connection_timeout)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_connect,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(connection_timeout))






    def count_events_of(self, filters: "typing.List[Filter]",timeout: "Duration") -> "int":
        """
        Count events of filters
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        return _UniffiConverterUInt64.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_count_events_of,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterDuration.lower(timeout))
        )





    def document(self, ) -> "RelayInformationDocument":
        return _UniffiConverterTypeRelayInformationDocument.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_document,self._uniffi_clone_pointer(),)
        )





    def get_events_of(self, filters: "typing.List[Filter]",timeout: "Duration") -> "typing.List[Event]":
        """
        Get events of filters

        Get events from local database and relay
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        return _UniffiConverterSequenceTypeEvent.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_get_events_of,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterDuration.lower(timeout))
        )





    def is_connected(self, ) -> "bool":
        """
        Check if `Relay` is connected
        """

        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_is_connected,self._uniffi_clone_pointer(),)
        )





    def opts(self, ) -> "RelayOptions":
        return _UniffiConverterTypeRelayOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_opts,self._uniffi_clone_pointer(),)
        )





    def proxy(self, ) -> "typing.Optional[str]":
        """
        Get proxy
        """

        return _UniffiConverterOptionalString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_proxy,self._uniffi_clone_pointer(),)
        )





    def queue(self, ) -> "int":
        """
        Get number of messages in queue
        """

        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_queue,self._uniffi_clone_pointer(),)
        )





    def reconcile(self, filter: "Filter",opts: "NegentropyOptions") -> None:
        """
        Negentropy reconciliation

        Use events stored in database
        """

        _UniffiConverterTypeFilter.check_lower(filter)
        
        _UniffiConverterTypeNegentropyOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile,self._uniffi_clone_pointer(),
        _UniffiConverterTypeFilter.lower(filter),
        _UniffiConverterTypeNegentropyOptions.lower(opts))






    def reconcile_with_items(self, filter: "Filter",items: "typing.List[NegentropyItem]",opts: "NegentropyOptions") -> None:
        """
        Negentropy reconciliation with custom items
        """

        _UniffiConverterTypeFilter.check_lower(filter)
        
        _UniffiConverterSequenceTypeNegentropyItem.check_lower(items)
        
        _UniffiConverterTypeNegentropyOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_reconcile_with_items,self._uniffi_clone_pointer(),
        _UniffiConverterTypeFilter.lower(filter),
        _UniffiConverterSequenceTypeNegentropyItem.lower(items),
        _UniffiConverterTypeNegentropyOptions.lower(opts))






    def send_event(self, event: "Event",opts: "RelaySendOptions") -> "EventId":
        """
        Send event and wait for `OK` relay msg
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_event,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEvent.lower(event),
        _UniffiConverterTypeRelaySendOptions.lower(opts))
        )





    def send_msg(self, msg: "ClientMessage",opts: "RelaySendOptions") -> None:
        """
        Send msg to relay
        """

        _UniffiConverterTypeClientMessage.check_lower(msg)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_send_msg,self._uniffi_clone_pointer(),
        _UniffiConverterTypeClientMessage.lower(msg),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def stats(self, ) -> "RelayConnectionStats":
        return _UniffiConverterTypeRelayConnectionStats.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stats,self._uniffi_clone_pointer(),)
        )





    def status(self, ) -> "RelayStatus":
        """
        Get relay status
        """

        return _UniffiConverterTypeRelayStatus.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_status,self._uniffi_clone_pointer(),)
        )





    def stop(self, ) -> None:
        """
        Disconnect from relay and set status to 'Stopped'
        """

        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_stop,self._uniffi_clone_pointer(),)






    def subscribe(self, filters: "typing.List[Filter]",opts: "SubscribeOptions") -> "str":
        """
        Subscribe to filters

        Internally generate a new random subscription ID. Check `subscribe_with_id` method to use a custom subscription ID.

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts))
        )





    def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions") -> None:
        """
        Subscribe with custom subscription ID

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscribe_with_id,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(id),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts))






    def subscription(self, id: "str") -> "typing.Optional[typing.List[Filter]]":
        """
        Get filters by subscription ID
        """

        _UniffiConverterString.check_lower(id)
        
        return _UniffiConverterOptionalSequenceTypeFilter.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscription,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(id))
        )





    def subscriptions(self, ) -> "dict[str, typing.List[Filter]]":
        return _UniffiConverterMapStringSequenceTypeFilter.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions,self._uniffi_clone_pointer(),)
        )





    def support_negentropy(self, ) -> "bool":
        """
        Check if relay support negentropy protocol
        """

        return _UniffiConverterBool.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_support_negentropy,self._uniffi_clone_pointer(),)
        )





    def terminate(self, ) -> None:
        """
        Disconnect from relay and set status to 'Terminated'
        """

        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_terminate,self._uniffi_clone_pointer(),)






    def unsubscribe(self, id: "str",opts: "RelaySendOptions") -> None:
        """
        Unsubscribe
        """

        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(id),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def unsubscribe_all(self, opts: "RelaySendOptions") -> None:
        """
        Unsubscribe from all subscriptions
        """

        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe_all,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def url(self, ) -> "str":
        """
        Get relay url
        """

        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relay_url,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeRelay:

    @staticmethod
    def lift(value: int):
        return Relay._make_instance_(value)

    @staticmethod
    def check_lower(value: Relay):
        if not isinstance(value, Relay):
            raise TypeError("Expected Relay instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayProtocol):
        if not isinstance(value, Relay):
            raise TypeError("Expected Relay instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayBlacklistProtocol(typing.Protocol):
    def add_ids(self, ids: "typing.List[EventId]"):
        """
        Add event IDs to blacklist
        """

        raise NotImplementedError
    def add_public_keys(self, public_keys: "typing.List[PublicKey]"):
        """
        Add public keys to blacklist
        """

        raise NotImplementedError
    def clear(self, ):
        """
        Remove everything
        """

        raise NotImplementedError
    def has_id(self, id: "EventId"):
        """
        Check if blacklist contains event ID
        """

        raise NotImplementedError
    def has_public_key(self, public_key: "PublicKey"):
        """
        Check if blacklist contains public key
        """

        raise NotImplementedError
    def remove_id(self, id: "EventId"):
        """
        Remove event ID from blacklist
        """

        raise NotImplementedError
    def remove_ids(self, ids: "typing.List[EventId]"):
        """
        Remove event IDs from blacklist
        """

        raise NotImplementedError
    def remove_public_key(self, public_key: "PublicKey"):
        """
        Remove public key from blacklist
        """

        raise NotImplementedError
    def remove_public_keys(self, ids: "typing.List[PublicKey]"):
        """
        Remove event IDs from blacklist
        """

        raise NotImplementedError


class RelayBlacklist:
    _pointer: ctypes.c_void_p
    def __init__(self, ids: "typing.Union[object, typing.List[EventId]]" = _DEFAULT,public_keys: "typing.Union[object, typing.List[PublicKey]]" = _DEFAULT):
        if ids is _DEFAULT:
            ids = []
        _UniffiConverterSequenceTypeEventId.check_lower(ids)
        
        if public_keys is _DEFAULT:
            public_keys = []
        _UniffiConverterSequenceTypePublicKey.check_lower(public_keys)
        
        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayblacklist_new,
        _UniffiConverterSequenceTypeEventId.lower(ids),
        _UniffiConverterSequenceTypePublicKey.lower(public_keys))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayblacklist, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayblacklist, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def empty(cls, ):
        """
        construct new empty blacklist
        """

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayblacklist_empty,)
        return cls._make_instance_(pointer)



    def add_ids(self, ids: "typing.List[EventId]") -> None:
        """
        Add event IDs to blacklist
        """

        _UniffiConverterSequenceTypeEventId.check_lower(ids)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_add_ids,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeEventId.lower(ids))






    def add_public_keys(self, public_keys: "typing.List[PublicKey]") -> None:
        """
        Add public keys to blacklist
        """

        _UniffiConverterSequenceTypePublicKey.check_lower(public_keys)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_add_public_keys,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypePublicKey.lower(public_keys))






    def clear(self, ) -> None:
        """
        Remove everything
        """

        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_clear,self._uniffi_clone_pointer(),)






    def has_id(self, id: "EventId") -> "bool":
        """
        Check if blacklist contains event ID
        """

        _UniffiConverterTypeEventId.check_lower(id)
        
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_has_id,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventId.lower(id))
        )





    def has_public_key(self, public_key: "PublicKey") -> "bool":
        """
        Check if blacklist contains public key
        """

        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        return _UniffiConverterBool.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_has_public_key,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key))
        )





    def remove_id(self, id: "EventId") -> None:
        """
        Remove event ID from blacklist
        """

        _UniffiConverterTypeEventId.check_lower(id)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_id,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEventId.lower(id))






    def remove_ids(self, ids: "typing.List[EventId]") -> None:
        """
        Remove event IDs from blacklist
        """

        _UniffiConverterSequenceTypeEventId.check_lower(ids)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_ids,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeEventId.lower(ids))






    def remove_public_key(self, public_key: "PublicKey") -> None:
        """
        Remove public key from blacklist
        """

        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_public_key,self._uniffi_clone_pointer(),
        _UniffiConverterTypePublicKey.lower(public_key))






    def remove_public_keys(self, ids: "typing.List[PublicKey]") -> None:
        """
        Remove event IDs from blacklist
        """

        _UniffiConverterSequenceTypePublicKey.check_lower(ids)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayblacklist_remove_public_keys,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypePublicKey.lower(ids))







class _UniffiConverterTypeRelayBlacklist:

    @staticmethod
    def lift(value: int):
        return RelayBlacklist._make_instance_(value)

    @staticmethod
    def check_lower(value: RelayBlacklist):
        if not isinstance(value, RelayBlacklist):
            raise TypeError("Expected RelayBlacklist instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayBlacklistProtocol):
        if not isinstance(value, RelayBlacklist):
            raise TypeError("Expected RelayBlacklist instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayBlacklistProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayConnectionStatsProtocol(typing.Protocol):
    def attempts(self, ):
        """
        The number of times a connection has been attempted
        """

        raise NotImplementedError
    def bytes_received(self, ):
        """
        Bytes received
        """

        raise NotImplementedError
    def bytes_sent(self, ):
        """
        Bytes sent
        """

        raise NotImplementedError
    def connected_at(self, ):
        """
        Get UNIX timestamp of the last connection
        """

        raise NotImplementedError
    def first_connection_timestamp(self, ):
        """
        Get UNIX timestamp of the first connection
        """

        raise NotImplementedError
    def latency(self, ):
        raise NotImplementedError
    def success(self, ):
        """
        The number of times a connection has been successfully established
        """

        raise NotImplementedError
    def uptime(self, ):
        """
        Uptime
        """

        raise NotImplementedError


class RelayConnectionStats:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def attempts(self, ) -> "int":
        """
        The number of times a connection has been attempted
        """

        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts,self._uniffi_clone_pointer(),)
        )





    def bytes_received(self, ) -> "int":
        """
        Bytes received
        """

        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received,self._uniffi_clone_pointer(),)
        )





    def bytes_sent(self, ) -> "int":
        """
        Bytes sent
        """

        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent,self._uniffi_clone_pointer(),)
        )





    def connected_at(self, ) -> "Timestamp":
        """
        Get UNIX timestamp of the last connection
        """

        return _UniffiConverterTypeTimestamp.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at,self._uniffi_clone_pointer(),)
        )





    def first_connection_timestamp(self, ) -> "Timestamp":
        """
        Get UNIX timestamp of the first connection
        """

        return _UniffiConverterTypeTimestamp.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_first_connection_timestamp,self._uniffi_clone_pointer(),)
        )





    def latency(self, ) -> "typing.Optional[Duration]":
        return _UniffiConverterOptionalDuration.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency,self._uniffi_clone_pointer(),)
        )





    def success(self, ) -> "int":
        """
        The number of times a connection has been successfully established
        """

        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success,self._uniffi_clone_pointer(),)
        )





    def uptime(self, ) -> "float":
        """
        Uptime
        """

        return _UniffiConverterDouble.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_uptime,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeRelayConnectionStats:

    @staticmethod
    def lift(value: int):
        return RelayConnectionStats._make_instance_(value)

    @staticmethod
    def check_lower(value: RelayConnectionStats):
        if not isinstance(value, RelayConnectionStats):
            raise TypeError("Expected RelayConnectionStats instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayConnectionStatsProtocol):
        if not isinstance(value, RelayConnectionStats):
            raise TypeError("Expected RelayConnectionStats instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayConnectionStatsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayLimitsProtocol(typing.Protocol):
    """
    Relay Limits
    """

    def event_max_num_tags(self, max_num_tags: "typing.Optional[int]"):
        """
        Maximum number of tags allowed (default: 2_000)
        """

        raise NotImplementedError
    def event_max_size(self, max_size: "typing.Optional[int]"):
        """
        Maximum size of normalised JSON, in bytes (default: 70_000)
        """

        raise NotImplementedError
    def message_max_size(self, max_size: "typing.Optional[int]"):
        """
        Maximum size of normalised JSON, in bytes (default: 5_250_000)
        """

        raise NotImplementedError


class RelayLimits:
    """
    Relay Limits
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        Construct with default limits
        """

        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaylimits, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaylimits, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def disable(cls, ):
        """
        Disable all limits
        """

        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaylimits_disable,)
        return cls._make_instance_(pointer)



    def event_max_num_tags(self, max_num_tags: "typing.Optional[int]") -> "RelayLimits":
        """
        Maximum number of tags allowed (default: 2_000)
        """

        _UniffiConverterOptionalUInt16.check_lower(max_num_tags)
        
        return _UniffiConverterTypeRelayLimits.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_num_tags,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalUInt16.lower(max_num_tags))
        )





    def event_max_size(self, max_size: "typing.Optional[int]") -> "RelayLimits":
        """
        Maximum size of normalised JSON, in bytes (default: 70_000)
        """

        _UniffiConverterOptionalUInt32.check_lower(max_size)
        
        return _UniffiConverterTypeRelayLimits.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_event_max_size,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalUInt32.lower(max_size))
        )





    def message_max_size(self, max_size: "typing.Optional[int]") -> "RelayLimits":
        """
        Maximum size of normalised JSON, in bytes (default: 5_250_000)
        """

        _UniffiConverterOptionalUInt32.check_lower(max_size)
        
        return _UniffiConverterTypeRelayLimits.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_message_max_size,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalUInt32.lower(max_size))
        )





    def __repr__(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_debug,self._uniffi_clone_pointer(),)
        )



    def __eq__(self, other: object) -> bool:
        if not isinstance(other, RelayLimits):
            return NotImplemented

        return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_eq,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelayLimits.lower(other)))

    def __ne__(self, other: object) -> bool:
        if not isinstance(other, RelayLimits):
            return NotImplemented

        return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaylimits_uniffi_trait_eq_ne,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelayLimits.lower(other)))



class _UniffiConverterTypeRelayLimits:

    @staticmethod
    def lift(value: int):
        return RelayLimits._make_instance_(value)

    @staticmethod
    def check_lower(value: RelayLimits):
        if not isinstance(value, RelayLimits):
            raise TypeError("Expected RelayLimits instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayLimitsProtocol):
        if not isinstance(value, RelayLimits):
            raise TypeError("Expected RelayLimits instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayLimitsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayOptionsProtocol(typing.Protocol):
    """
    `Relay` options
    """

    def adjust_retry_sec(self, adjust_retry_sec: "bool"):
        """
        Automatically adjust retry seconds based on success/attempts (default: true)
        """

        raise NotImplementedError
    def limits(self, limits: "RelayLimits"):
        """
        Set custom limits
        """

        raise NotImplementedError
    def ping(self, ping: "bool"):
        """
        Set ping flag
        """

        raise NotImplementedError
    def pow(self, difficulty: "int"):
        """
        Minimum POW for received events (default: 0)
        """

        raise NotImplementedError
    def proxy(self, proxy: "typing.Optional[str]"):
        """
        Set proxy
        """

        raise NotImplementedError
    def read(self, read: "bool"):
        """
        Set read flag
        """

        raise NotImplementedError
    def reconnect(self, reconnect: "bool"):
        """
        Enable/disable auto reconnection (default: true)
        """

        raise NotImplementedError
    def retry_sec(self, retry_sec: "int"):
        """
        Retry connection time (default: 10 sec)

        Are allowed values `>=` 5 secs
        """

        raise NotImplementedError
    def update_adjust_retry_sec(self, adjust_retry_sec: "bool"):
        """
        Set adjust_retry_sec option
        """

        raise NotImplementedError
    def update_pow_difficulty(self, difficulty: "int"):
        """
        Update `pow` option
        """

        raise NotImplementedError
    def update_reconnect(self, reconnect: "bool"):
        """
        Update `reconnect` option
        """

        raise NotImplementedError
    def update_retry_sec(self, retry_sec: "int"):
        """
        Set retry_sec option
        """

        raise NotImplementedError
    def write(self, write: "bool"):
        """
        Set write flag
        """

        raise NotImplementedError


class RelayOptions:
    """
    `Relay` options
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        New default relay options
        """

        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relayoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relayoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relayoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def adjust_retry_sec(self, adjust_retry_sec: "bool") -> "RelayOptions":
        """
        Automatically adjust retry seconds based on success/attempts (default: true)
        """

        _UniffiConverterBool.check_lower(adjust_retry_sec)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_adjust_retry_sec,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(adjust_retry_sec))
        )





    def limits(self, limits: "RelayLimits") -> "RelayOptions":
        """
        Set custom limits
        """

        _UniffiConverterTypeRelayLimits.check_lower(limits)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_limits,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelayLimits.lower(limits))
        )





    def ping(self, ping: "bool") -> "RelayOptions":
        """
        Set ping flag
        """

        _UniffiConverterBool.check_lower(ping)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_ping,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(ping))
        )





    def pow(self, difficulty: "int") -> "RelayOptions":
        """
        Minimum POW for received events (default: 0)
        """

        _UniffiConverterUInt8.check_lower(difficulty)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_pow,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))
        )





    def proxy(self, proxy: "typing.Optional[str]") -> "RelayOptions":
        """
        Set proxy
        """

        _UniffiConverterOptionalString.check_lower(proxy)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_proxy,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalString.lower(proxy))
        )





    def read(self, read: "bool") -> "RelayOptions":
        """
        Set read flag
        """

        _UniffiConverterBool.check_lower(read)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_read,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(read))
        )





    def reconnect(self, reconnect: "bool") -> "RelayOptions":
        """
        Enable/disable auto reconnection (default: true)
        """

        _UniffiConverterBool.check_lower(reconnect)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_reconnect,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(reconnect))
        )





    def retry_sec(self, retry_sec: "int") -> "RelayOptions":
        """
        Retry connection time (default: 10 sec)

        Are allowed values `>=` 5 secs
        """

        _UniffiConverterUInt64.check_lower(retry_sec)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_retry_sec,self._uniffi_clone_pointer(),
        _UniffiConverterUInt64.lower(retry_sec))
        )





    def update_adjust_retry_sec(self, adjust_retry_sec: "bool") -> None:
        """
        Set adjust_retry_sec option
        """

        _UniffiConverterBool.check_lower(adjust_retry_sec)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_adjust_retry_sec,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(adjust_retry_sec))






    def update_pow_difficulty(self, difficulty: "int") -> None:
        """
        Update `pow` option
        """

        _UniffiConverterUInt8.check_lower(difficulty)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_pow_difficulty,self._uniffi_clone_pointer(),
        _UniffiConverterUInt8.lower(difficulty))






    def update_reconnect(self, reconnect: "bool") -> None:
        """
        Update `reconnect` option
        """

        _UniffiConverterBool.check_lower(reconnect)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_reconnect,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(reconnect))






    def update_retry_sec(self, retry_sec: "int") -> None:
        """
        Set retry_sec option
        """

        _UniffiConverterUInt64.check_lower(retry_sec)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_update_retry_sec,self._uniffi_clone_pointer(),
        _UniffiConverterUInt64.lower(retry_sec))






    def write(self, write: "bool") -> "RelayOptions":
        """
        Set write flag
        """

        _UniffiConverterBool.check_lower(write)
        
        return _UniffiConverterTypeRelayOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relayoptions_write,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(write))
        )






class _UniffiConverterTypeRelayOptions:

    @staticmethod
    def lift(value: int):
        return RelayOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: RelayOptions):
        if not isinstance(value, RelayOptions):
            raise TypeError("Expected RelayOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayOptionsProtocol):
        if not isinstance(value, RelayOptions):
            raise TypeError("Expected RelayOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelayPoolProtocol(typing.Protocol):
    def add_relay(self, url: "str",opts: "RelayOptions"):
        raise NotImplementedError
    def batch_event(self, events: "typing.List[Event]",opts: "RelaySendOptions"):
        """
        Send multiple `Event` at once to **all connected relays** and wait for `OK` message
        """

        raise NotImplementedError
    def batch_event_to(self, urls: "typing.List[str]",events: "typing.List[Event]",opts: "RelaySendOptions"):
        """
        Send multiple events at once to **specific relays** and wait for `OK` message
        """

        raise NotImplementedError
    def batch_msg(self, msgs: "typing.List[ClientMessage]",opts: "RelaySendOptions"):
        """
        Send multiple client messages at once to all connected relays
        """

        raise NotImplementedError
    def batch_msg_to(self, urls: "typing.List[str]",msgs: "typing.List[ClientMessage]",opts: "RelaySendOptions"):
        """
        Send multiple client messages at once to specific relays

        Note: **the relays must already be added!**
        """

        raise NotImplementedError
    def blacklist(self, ):
        """
        Get blacklist
        """

        raise NotImplementedError
    def connect(self, connection_timeout: "typing.Optional[Duration]"):
        """
        Connect to all added relays and keep connection alive
        """

        raise NotImplementedError
    def connect_relay(self, url: "str",connection_timeout: "typing.Optional[Duration]"):
        """
        Connect to relay
        """

        raise NotImplementedError
    def database(self, ):
        """
        Get database
        """

        raise NotImplementedError
    def disconnect(self, ):
        """
        Disconnect from all relays
        """

        raise NotImplementedError
    def get_events_from(self, urls: "typing.List[str]",filters: "typing.List[Filter]",timeout: "Duration",opts: "FilterOptions"):
        """
        Get events of filters from **specific relays**

        Get events both from **local database** and **relays**
        """

        raise NotImplementedError
    def get_events_of(self, filters: "typing.List[Filter]",timeout: "Duration",opts: "FilterOptions"):
        """
        Get events of filters

        Get events both from **local database** and **relays**
        """

        raise NotImplementedError
    def handle_notifications(self, handler: "HandleNotification"):
        """
        Handle relay pool notifications
        """

        raise NotImplementedError
    def reconcile(self, filter: "Filter",opts: "NegentropyOptions"):
        """
        Negentropy reconciliation

        Use events stored in database
        """

        raise NotImplementedError
    def reconcile_with_items(self, filter: "Filter",items: "typing.List[NegentropyItem]",opts: "NegentropyOptions"):
        """
        Negentropy reconciliation with custom items
        """

        raise NotImplementedError
    def relay(self, url: "str"):
        """
        Get relay
        """

        raise NotImplementedError
    def relays(self, ):
        """
        Get relays
        """

        raise NotImplementedError
    def remove_all_relay(self, ):
        raise NotImplementedError
    def remove_relay(self, url: "str"):
        raise NotImplementedError
    def send_event(self, event: "Event",opts: "RelaySendOptions"):
        """
        Send event to **all connected relays** and wait for `OK` message
        """

        raise NotImplementedError
    def send_event_to(self, urls: "typing.List[str]",event: "Event",opts: "RelaySendOptions"):
        """
        Send event to **specific relays** and wait for `OK` message
        """

        raise NotImplementedError
    def send_msg(self, msg: "ClientMessage",opts: "RelaySendOptions"):
        """
        Send client message to all connected relays
        """

        raise NotImplementedError
    def send_msg_to(self, urls: "typing.List[str]",msg: "ClientMessage",opts: "RelaySendOptions"):
        """
        Send client message to specific relays

        Note: **the relays must already be added!**
        """

        raise NotImplementedError
    def shutdown(self, ):
        """
        Completely shutdown pool
        """

        raise NotImplementedError
    def start(self, ):
        """
        Start

        Internally call `connect` without wait for connection.
        """

        raise NotImplementedError
    def stop(self, ):
        """
        Stop

        Call `connect` to re-start relays connections
        """

        raise NotImplementedError
    def subscribe(self, filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe to filters to all connected relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        raise NotImplementedError
    def subscribe_to(self, urls: "typing.List[str]",filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe to filters to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.
        """

        raise NotImplementedError
    def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe with custom subscription ID to all connected relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        raise NotImplementedError
    def subscribe_with_id_to(self, urls: "typing.List[str]",id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions"):
        """
        Subscribe to filters with custom subscription ID to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.
        """

        raise NotImplementedError
    def subscription(self, id: "str"):
        """
        Get filters by subscription ID
        """

        raise NotImplementedError
    def subscriptions(self, ):
        """
        Get subscriptions
        """

        raise NotImplementedError
    def unsubscribe(self, id: "str",opts: "RelaySendOptions"):
        """
        Unsubscribe
        """

        raise NotImplementedError
    def unsubscribe_all(self, opts: "RelaySendOptions"):
        """
        Unsubscribe from all subscriptions
        """

        raise NotImplementedError


class RelayPool:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        Create new `RelayPool` with `in-memory` database
        """

        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaypool, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaypool, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def with_database(cls, database: "NostrDatabase"):
        """
        Create new `RelayPool` with `custom` database
        """

        _UniffiConverterTypeNostrDatabase.check_lower(database)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaypool_with_database,
        _UniffiConverterTypeNostrDatabase.lower(database))
        return cls._make_instance_(pointer)



    def add_relay(self, url: "str",opts: "RelayOptions") -> "bool":
        _UniffiConverterString.check_lower(url)
        
        _UniffiConverterTypeRelayOptions.check_lower(opts)
        
        return _UniffiConverterBool.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_add_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url),
        _UniffiConverterTypeRelayOptions.lower(opts))
        )





    def batch_event(self, events: "typing.List[Event]",opts: "RelaySendOptions") -> None:
        """
        Send multiple `Event` at once to **all connected relays** and wait for `OK` message
        """

        _UniffiConverterSequenceTypeEvent.check_lower(events)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeEvent.lower(events),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def batch_event_to(self, urls: "typing.List[str]",events: "typing.List[Event]",opts: "RelaySendOptions") -> None:
        """
        Send multiple events at once to **specific relays** and wait for `OK` message
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeEvent.check_lower(events)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_event_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeEvent.lower(events),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def batch_msg(self, msgs: "typing.List[ClientMessage]",opts: "RelaySendOptions") -> None:
        """
        Send multiple client messages at once to all connected relays
        """

        _UniffiConverterSequenceTypeClientMessage.check_lower(msgs)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_msg,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeClientMessage.lower(msgs),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def batch_msg_to(self, urls: "typing.List[str]",msgs: "typing.List[ClientMessage]",opts: "RelaySendOptions") -> None:
        """
        Send multiple client messages at once to specific relays

        Note: **the relays must already be added!**
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeClientMessage.check_lower(msgs)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_batch_msg_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeClientMessage.lower(msgs),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def blacklist(self, ) -> "RelayBlacklist":
        """
        Get blacklist
        """

        return _UniffiConverterTypeRelayBlacklist.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_blacklist,self._uniffi_clone_pointer(),)
        )





    def connect(self, connection_timeout: "typing.Optional[Duration]") -> None:
        """
        Connect to all added relays and keep connection alive
        """

        _UniffiConverterOptionalDuration.check_lower(connection_timeout)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(connection_timeout))






    def connect_relay(self, url: "str",connection_timeout: "typing.Optional[Duration]") -> None:
        """
        Connect to relay
        """

        _UniffiConverterString.check_lower(url)
        
        _UniffiConverterOptionalDuration.check_lower(connection_timeout)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_connect_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url),
        _UniffiConverterOptionalDuration.lower(connection_timeout))






    def database(self, ) -> "NostrDatabase":
        """
        Get database
        """

        return _UniffiConverterTypeNostrDatabase.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_database,self._uniffi_clone_pointer(),)
        )





    def disconnect(self, ) -> None:
        """
        Disconnect from all relays
        """

        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_disconnect,self._uniffi_clone_pointer(),)






    def get_events_from(self, urls: "typing.List[str]",filters: "typing.List[Filter]",timeout: "Duration",opts: "FilterOptions") -> "typing.List[Event]":
        """
        Get events of filters from **specific relays**

        Get events both from **local database** and **relays**
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        _UniffiConverterTypeFilterOptions.check_lower(opts)
        
        return _UniffiConverterSequenceTypeEvent.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_from,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterDuration.lower(timeout),
        _UniffiConverterTypeFilterOptions.lower(opts))
        )





    def get_events_of(self, filters: "typing.List[Filter]",timeout: "Duration",opts: "FilterOptions") -> "typing.List[Event]":
        """
        Get events of filters

        Get events both from **local database** and **relays**
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterDuration.check_lower(timeout)
        
        _UniffiConverterTypeFilterOptions.check_lower(opts)
        
        return _UniffiConverterSequenceTypeEvent.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_get_events_of,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterDuration.lower(timeout),
        _UniffiConverterTypeFilterOptions.lower(opts))
        )





    def handle_notifications(self, handler: "HandleNotification") -> None:
        """
        Handle relay pool notifications
        """

        _UniffiConverterCallbackInterfaceHandleNotification.check_lower(handler)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_handle_notifications,self._uniffi_clone_pointer(),
        _UniffiConverterCallbackInterfaceHandleNotification.lower(handler))






    def reconcile(self, filter: "Filter",opts: "NegentropyOptions") -> None:
        """
        Negentropy reconciliation

        Use events stored in database
        """

        _UniffiConverterTypeFilter.check_lower(filter)
        
        _UniffiConverterTypeNegentropyOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile,self._uniffi_clone_pointer(),
        _UniffiConverterTypeFilter.lower(filter),
        _UniffiConverterTypeNegentropyOptions.lower(opts))






    def reconcile_with_items(self, filter: "Filter",items: "typing.List[NegentropyItem]",opts: "NegentropyOptions") -> None:
        """
        Negentropy reconciliation with custom items
        """

        _UniffiConverterTypeFilter.check_lower(filter)
        
        _UniffiConverterSequenceTypeNegentropyItem.check_lower(items)
        
        _UniffiConverterTypeNegentropyOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_reconcile_with_items,self._uniffi_clone_pointer(),
        _UniffiConverterTypeFilter.lower(filter),
        _UniffiConverterSequenceTypeNegentropyItem.lower(items),
        _UniffiConverterTypeNegentropyOptions.lower(opts))






    def relay(self, url: "str") -> "Relay":
        """
        Get relay
        """

        _UniffiConverterString.check_lower(url)
        
        return _UniffiConverterTypeRelay.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))
        )





    def relays(self, ) -> "dict[str, Relay]":
        """
        Get relays
        """

        return _UniffiConverterMapStringTypeRelay.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_relays,self._uniffi_clone_pointer(),)
        )





    def remove_all_relay(self, ) -> None:
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_all_relay,self._uniffi_clone_pointer(),)






    def remove_relay(self, url: "str") -> None:
        _UniffiConverterString.check_lower(url)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_remove_relay,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(url))






    def send_event(self, event: "Event",opts: "RelaySendOptions") -> "EventId":
        """
        Send event to **all connected relays** and wait for `OK` message
        """

        _UniffiConverterTypeEvent.check_lower(event)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEvent.lower(event),
        _UniffiConverterTypeRelaySendOptions.lower(opts))
        )





    def send_event_to(self, urls: "typing.List[str]",event: "Event",opts: "RelaySendOptions") -> "EventId":
        """
        Send event to **specific relays** and wait for `OK` message
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeEvent.check_lower(event)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return _UniffiConverterTypeEventId.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_event_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeEvent.lower(event),
        _UniffiConverterTypeRelaySendOptions.lower(opts))
        )





    def send_msg(self, msg: "ClientMessage",opts: "RelaySendOptions") -> None:
        """
        Send client message to all connected relays
        """

        _UniffiConverterTypeClientMessage.check_lower(msg)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_msg,self._uniffi_clone_pointer(),
        _UniffiConverterTypeClientMessage.lower(msg),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def send_msg_to(self, urls: "typing.List[str]",msg: "ClientMessage",opts: "RelaySendOptions") -> None:
        """
        Send client message to specific relays

        Note: **the relays must already be added!**
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterTypeClientMessage.check_lower(msg)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_send_msg_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterTypeClientMessage.lower(msg),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def shutdown(self, ) -> None:
        """
        Completely shutdown pool
        """

        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_shutdown,self._uniffi_clone_pointer(),)






    def start(self, ) -> None:
        """
        Start

        Internally call `connect` without wait for connection.
        """

        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_start,self._uniffi_clone_pointer(),)






    def stop(self, ) -> None:
        """
        Stop

        Call `connect` to re-start relays connections
        """

        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_stop,self._uniffi_clone_pointer(),)






    def subscribe(self, filters: "typing.List[Filter]",opts: "SubscribeOptions") -> "str":
        """
        Subscribe to filters to all connected relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts))
        )





    def subscribe_to(self, urls: "typing.List[str]",filters: "typing.List[Filter]",opts: "SubscribeOptions") -> "str":
        """
        Subscribe to filters to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        return _UniffiConverterString.lift(
            _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts))
        )





    def subscribe_with_id(self, id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions") -> None:
        """
        Subscribe with custom subscription ID to all connected relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.

        Note: auto-closing subscriptions aren't saved in subscriptions map!
        """

        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(id),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts))






    def subscribe_with_id_to(self, urls: "typing.List[str]",id: "str",filters: "typing.List[Filter]",opts: "SubscribeOptions") -> None:
        """
        Subscribe to filters with custom subscription ID to specific relays

        ### Auto-closing subscription

        It's possible to automatically close a subscription by configuring the `SubscribeOptions`.
        """

        _UniffiConverterSequenceString.check_lower(urls)
        
        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterSequenceTypeFilter.check_lower(filters)
        
        _UniffiConverterTypeSubscribeOptions.check_lower(opts)
        
        _rust_call_with_error(_UniffiConverterTypeNostrSdkError,_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscribe_with_id_to,self._uniffi_clone_pointer(),
        _UniffiConverterSequenceString.lower(urls),
        _UniffiConverterString.lower(id),
        _UniffiConverterSequenceTypeFilter.lower(filters),
        _UniffiConverterTypeSubscribeOptions.lower(opts))






    def subscription(self, id: "str") -> "typing.Optional[typing.List[Filter]]":
        """
        Get filters by subscription ID
        """

        _UniffiConverterString.check_lower(id)
        
        return _UniffiConverterOptionalSequenceTypeFilter.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscription,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(id))
        )





    def subscriptions(self, ) -> "dict[str, typing.List[Filter]]":
        """
        Get subscriptions
        """

        return _UniffiConverterMapStringSequenceTypeFilter.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_subscriptions,self._uniffi_clone_pointer(),)
        )





    def unsubscribe(self, id: "str",opts: "RelaySendOptions") -> None:
        """
        Unsubscribe
        """

        _UniffiConverterString.check_lower(id)
        
        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(id),
        _UniffiConverterTypeRelaySendOptions.lower(opts))






    def unsubscribe_all(self, opts: "RelaySendOptions") -> None:
        """
        Unsubscribe from all subscriptions
        """

        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaypool_unsubscribe_all,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelaySendOptions.lower(opts))







class _UniffiConverterTypeRelayPool:

    @staticmethod
    def lift(value: int):
        return RelayPool._make_instance_(value)

    @staticmethod
    def check_lower(value: RelayPool):
        if not isinstance(value, RelayPool):
            raise TypeError("Expected RelayPool instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelayPoolProtocol):
        if not isinstance(value, RelayPool):
            raise TypeError("Expected RelayPool instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelayPoolProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class RelaySendOptionsProtocol(typing.Protocol):
    def skip_disconnected(self, value: "bool"):
        """
        Skip wait for disconnected relay (default: true)
        """

        raise NotImplementedError
    def skip_send_confirmation(self, value: "bool"):
        """
        Skip wait for confirmation that message is sent (default: false)
        """

        raise NotImplementedError
    def timeout(self, timeout: "typing.Optional[Duration]"):
        """
        Timeout for sending event (default: 20 secs)

        If `None`, the default timeout will be used
        """

        raise NotImplementedError


class RelaySendOptions:
    _pointer: ctypes.c_void_p
    def __init__(self, ):
        """
        New default `RelaySendOptions`
        """

        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_relaysendoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_relaysendoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_relaysendoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def skip_disconnected(self, value: "bool") -> "RelaySendOptions":
        """
        Skip wait for disconnected relay (default: true)
        """

        _UniffiConverterBool.check_lower(value)
        
        return _UniffiConverterTypeRelaySendOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_disconnected,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(value))
        )





    def skip_send_confirmation(self, value: "bool") -> "RelaySendOptions":
        """
        Skip wait for confirmation that message is sent (default: false)
        """

        _UniffiConverterBool.check_lower(value)
        
        return _UniffiConverterTypeRelaySendOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_skip_send_confirmation,self._uniffi_clone_pointer(),
        _UniffiConverterBool.lower(value))
        )





    def timeout(self, timeout: "typing.Optional[Duration]") -> "RelaySendOptions":
        """
        Timeout for sending event (default: 20 secs)

        If `None`, the default timeout will be used
        """

        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterTypeRelaySendOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_relaysendoptions_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(timeout))
        )






class _UniffiConverterTypeRelaySendOptions:

    @staticmethod
    def lift(value: int):
        return RelaySendOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: RelaySendOptions):
        if not isinstance(value, RelaySendOptions):
            raise TypeError("Expected RelaySendOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: RelaySendOptionsProtocol):
        if not isinstance(value, RelaySendOptions):
            raise TypeError("Expected RelaySendOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: RelaySendOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class SubscribeAutoCloseOptionsProtocol(typing.Protocol):
    """
    Auto-closing subscribe options
    """

    def filter(self, filter: "FilterOptions"):
        """
        Close subscription when `FilterOptions` is satisfied
        """

        raise NotImplementedError
    def timeout(self, timeout: "typing.Optional[Duration]"):
        """
        Automatically close subscription after `Duration`
        """

        raise NotImplementedError


class SubscribeAutoCloseOptions:
    """
    Auto-closing subscribe options
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeautocloseoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeautocloseoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeautocloseoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def filter(self, filter: "FilterOptions") -> "SubscribeAutoCloseOptions":
        """
        Close subscription when `FilterOptions` is satisfied
        """

        _UniffiConverterTypeFilterOptions.check_lower(filter)
        
        return _UniffiConverterTypeSubscribeAutoCloseOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_filter,self._uniffi_clone_pointer(),
        _UniffiConverterTypeFilterOptions.lower(filter))
        )





    def timeout(self, timeout: "typing.Optional[Duration]") -> "SubscribeAutoCloseOptions":
        """
        Automatically close subscription after `Duration`
        """

        _UniffiConverterOptionalDuration.check_lower(timeout)
        
        return _UniffiConverterTypeSubscribeAutoCloseOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeautocloseoptions_timeout,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalDuration.lower(timeout))
        )






class _UniffiConverterTypeSubscribeAutoCloseOptions:

    @staticmethod
    def lift(value: int):
        return SubscribeAutoCloseOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: SubscribeAutoCloseOptions):
        if not isinstance(value, SubscribeAutoCloseOptions):
            raise TypeError("Expected SubscribeAutoCloseOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: SubscribeAutoCloseOptionsProtocol):
        if not isinstance(value, SubscribeAutoCloseOptions):
            raise TypeError("Expected SubscribeAutoCloseOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: SubscribeAutoCloseOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class SubscribeOptionsProtocol(typing.Protocol):
    """
    Subscribe options
    """

    def close_on(self, opts: "typing.Optional[SubscribeAutoCloseOptions]"):
        """
        Set auto-close conditions
        """

        raise NotImplementedError
    def send_opts(self, opts: "RelaySendOptions"):
        """
        Set [RelaySendOptions]
        """

        raise NotImplementedError


class SubscribeOptions:
    """
    Subscribe options
    """

    _pointer: ctypes.c_void_p
    def __init__(self, ):
        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_subscribeoptions_new,)

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_subscribeoptions, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_subscribeoptions, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def close_on(self, opts: "typing.Optional[SubscribeAutoCloseOptions]") -> "SubscribeOptions":
        """
        Set auto-close conditions
        """

        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.check_lower(opts)
        
        return _UniffiConverterTypeSubscribeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_close_on,self._uniffi_clone_pointer(),
        _UniffiConverterOptionalTypeSubscribeAutoCloseOptions.lower(opts))
        )





    def send_opts(self, opts: "RelaySendOptions") -> "SubscribeOptions":
        """
        Set [RelaySendOptions]
        """

        _UniffiConverterTypeRelaySendOptions.check_lower(opts)
        
        return _UniffiConverterTypeSubscribeOptions.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_subscribeoptions_send_opts,self._uniffi_clone_pointer(),
        _UniffiConverterTypeRelaySendOptions.lower(opts))
        )






class _UniffiConverterTypeSubscribeOptions:

    @staticmethod
    def lift(value: int):
        return SubscribeOptions._make_instance_(value)

    @staticmethod
    def check_lower(value: SubscribeOptions):
        if not isinstance(value, SubscribeOptions):
            raise TypeError("Expected SubscribeOptions instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: SubscribeOptionsProtocol):
        if not isinstance(value, SubscribeOptions):
            raise TypeError("Expected SubscribeOptions instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: SubscribeOptionsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ZapDetailsProtocol(typing.Protocol):
    """
    Zap Details
    """

    def message(self, message: "str"):
        """
        Add message
        """

        raise NotImplementedError


class ZapDetails:
    """
    Zap Details
    """

    _pointer: ctypes.c_void_p
    def __init__(self, zap_type: "ZapType"):
        """
        Create new Zap Details

        **Note: `private` zaps are not currently supported here!**
        """

        _UniffiConverterTypeZapType.check_lower(zap_type)
        
        self._pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapdetails_new,
        _UniffiConverterTypeZapType.lower(zap_type))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapdetails, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapdetails, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def message(self, message: "str") -> "ZapDetails":
        """
        Add message
        """

        _UniffiConverterString.check_lower(message)
        
        return _UniffiConverterTypeZapDetails.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_message,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(message))
        )





    def __repr__(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_debug,self._uniffi_clone_pointer(),)
        )



    def __eq__(self, other: object) -> bool:
        if not isinstance(other, ZapDetails):
            return NotImplemented

        return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_eq,self._uniffi_clone_pointer(),
        _UniffiConverterTypeZapDetails.lower(other)))

    def __ne__(self, other: object) -> bool:
        if not isinstance(other, ZapDetails):
            return NotImplemented

        return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_eq_ne,self._uniffi_clone_pointer(),
        _UniffiConverterTypeZapDetails.lower(other)))


    def __hash__(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapdetails_uniffi_trait_hash,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeZapDetails:

    @staticmethod
    def lift(value: int):
        return ZapDetails._make_instance_(value)

    @staticmethod
    def check_lower(value: ZapDetails):
        if not isinstance(value, ZapDetails):
            raise TypeError("Expected ZapDetails instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ZapDetailsProtocol):
        if not isinstance(value, ZapDetails):
            raise TypeError("Expected ZapDetails instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ZapDetailsProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class ZapEntityProtocol(typing.Protocol):
    """
    Zap entity
    """

    pass


class ZapEntity:
    """
    Zap entity
    """

    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_free_zapentity, pointer)

    def _uniffi_clone_pointer(self):
        return _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_clone_zapentity, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def event(cls, event_id: "EventId"):
        _UniffiConverterTypeEventId.check_lower(event_id)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_event,
        _UniffiConverterTypeEventId.lower(event_id))
        return cls._make_instance_(pointer)


    @classmethod
    def public_key(cls, public_key: "PublicKey"):
        _UniffiConverterTypePublicKey.check_lower(public_key)
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_constructor_zapentity_public_key,
        _UniffiConverterTypePublicKey.lower(public_key))
        return cls._make_instance_(pointer)



    def __repr__(self, ) -> "str":
        return _UniffiConverterString.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_debug,self._uniffi_clone_pointer(),)
        )



    def __eq__(self, other: object) -> bool:
        if not isinstance(other, ZapEntity):
            return NotImplemented

        return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_eq,self._uniffi_clone_pointer(),
        _UniffiConverterTypeZapEntity.lower(other)))

    def __ne__(self, other: object) -> bool:
        if not isinstance(other, ZapEntity):
            return NotImplemented

        return _UniffiConverterBool.lift(_rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_eq_ne,self._uniffi_clone_pointer(),
        _UniffiConverterTypeZapEntity.lower(other)))


    def __hash__(self, ) -> "int":
        return _UniffiConverterUInt64.lift(
            _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_method_zapentity_uniffi_trait_hash,self._uniffi_clone_pointer(),)
        )






class _UniffiConverterTypeZapEntity:

    @staticmethod
    def lift(value: int):
        return ZapEntity._make_instance_(value)

    @staticmethod
    def check_lower(value: ZapEntity):
        if not isinstance(value, ZapEntity):
            raise TypeError("Expected ZapEntity instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: ZapEntityProtocol):
        if not isinstance(value, ZapEntity):
            raise TypeError("Expected ZapEntity instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: ZapEntityProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class NegentropyItem:
    id: "EventId"
    timestamp: "Timestamp"
    @typing.no_type_check
    def __init__(self, *, id: "EventId", timestamp: "Timestamp"):
        self.id = id
        self.timestamp = timestamp

    def __str__(self):
        return "NegentropyItem(id={}, timestamp={})".format(self.id, self.timestamp)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.timestamp != other.timestamp:
            return False
        return True

class _UniffiConverterTypeNegentropyItem(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return NegentropyItem(
            id=_UniffiConverterTypeEventId.read(buf),
            timestamp=_UniffiConverterTypeTimestamp.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeEventId.check_lower(value.id)
        _UniffiConverterTypeTimestamp.check_lower(value.timestamp)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeEventId.write(value.id, buf)
        _UniffiConverterTypeTimestamp.write(value.timestamp, buf)





class FilterOptions:
    """
    Filter options
    """

    def __init__(self):
        raise RuntimeError("FilterOptions cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class EXIT_ON_EOSE:
        """
        Exit on EOSE
        """


        @typing.no_type_check
        def __init__(self,):
            pass

        def __str__(self):
            return "FilterOptions.EXIT_ON_EOSE()".format()

        def __eq__(self, other):
            if not other.is_exit_on_eose():
                return False
            return True
    
    class WAIT_FOR_EVENTS_AFTER_EOSE:
        """
        After EOSE is received, keep listening for N more events that match the filter, then return
        """

        num: "int"

        @typing.no_type_check
        def __init__(self,num: "int"):
            self.num = num

        def __str__(self):
            return "FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE(num={})".format(self.num)

        def __eq__(self, other):
            if not other.is_wait_for_events_after_eose():
                return False
            if self.num != other.num:
                return False
            return True
    
    class WAIT_DURATION_AFTER_EOSE:
        """
        After EOSE is received, keep listening for matching events for `Duration` more time, then return
        """

        duration: "Duration"

        @typing.no_type_check
        def __init__(self,duration: "Duration"):
            self.duration = duration

        def __str__(self):
            return "FilterOptions.WAIT_DURATION_AFTER_EOSE(duration={})".format(self.duration)

        def __eq__(self, other):
            if not other.is_wait_duration_after_eose():
                return False
            if self.duration != other.duration:
                return False
            return True
    
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_exit_on_eose(self) -> bool:
        return isinstance(self, FilterOptions.EXIT_ON_EOSE)
    def is_wait_for_events_after_eose(self) -> bool:
        return isinstance(self, FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE)
    def is_wait_duration_after_eose(self) -> bool:
        return isinstance(self, FilterOptions.WAIT_DURATION_AFTER_EOSE)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
FilterOptions.EXIT_ON_EOSE = type("FilterOptions.EXIT_ON_EOSE", (FilterOptions.EXIT_ON_EOSE, FilterOptions,), {})  # type: ignore
FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE = type("FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE", (FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE, FilterOptions,), {})  # type: ignore
FilterOptions.WAIT_DURATION_AFTER_EOSE = type("FilterOptions.WAIT_DURATION_AFTER_EOSE", (FilterOptions.WAIT_DURATION_AFTER_EOSE, FilterOptions,), {})  # type: ignore




class _UniffiConverterTypeFilterOptions(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return FilterOptions.EXIT_ON_EOSE(
            )
        if variant == 2:
            return FilterOptions.WAIT_FOR_EVENTS_AFTER_EOSE(
                _UniffiConverterUInt16.read(buf),
            )
        if variant == 3:
            return FilterOptions.WAIT_DURATION_AFTER_EOSE(
                _UniffiConverterDuration.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value.is_exit_on_eose():
            return
        if value.is_wait_for_events_after_eose():
            _UniffiConverterUInt16.check_lower(value.num)
            return
        if value.is_wait_duration_after_eose():
            _UniffiConverterDuration.check_lower(value.duration)
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value.is_exit_on_eose():
            buf.write_i32(1)
        if value.is_wait_for_events_after_eose():
            buf.write_i32(2)
            _UniffiConverterUInt16.write(value.num, buf)
        if value.is_wait_duration_after_eose():
            buf.write_i32(3)
            _UniffiConverterDuration.write(value.duration, buf)







class LogLevel(enum.Enum):
    ERROR = 0
    
    WARN = 1
    
    INFO = 2
    
    DEBUG = 3
    
    TRACE = 4
    


class _UniffiConverterTypeLogLevel(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return LogLevel.ERROR
        if variant == 2:
            return LogLevel.WARN
        if variant == 3:
            return LogLevel.INFO
        if variant == 4:
            return LogLevel.DEBUG
        if variant == 5:
            return LogLevel.TRACE
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == LogLevel.ERROR:
            return
        if value == LogLevel.WARN:
            return
        if value == LogLevel.INFO:
            return
        if value == LogLevel.DEBUG:
            return
        if value == LogLevel.TRACE:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == LogLevel.ERROR:
            buf.write_i32(1)
        if value == LogLevel.WARN:
            buf.write_i32(2)
        if value == LogLevel.INFO:
            buf.write_i32(3)
        if value == LogLevel.DEBUG:
            buf.write_i32(4)
        if value == LogLevel.TRACE:
            buf.write_i32(5)







class NegentropyDirection(enum.Enum):
    UP = 0
    
    DOWN = 1
    
    BOTH = 2
    


class _UniffiConverterTypeNegentropyDirection(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return NegentropyDirection.UP
        if variant == 2:
            return NegentropyDirection.DOWN
        if variant == 3:
            return NegentropyDirection.BOTH
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == NegentropyDirection.UP:
            return
        if value == NegentropyDirection.DOWN:
            return
        if value == NegentropyDirection.BOTH:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == NegentropyDirection.UP:
            buf.write_i32(1)
        if value == NegentropyDirection.DOWN:
            buf.write_i32(2)
        if value == NegentropyDirection.BOTH:
            buf.write_i32(3)




# NostrSdkError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class NostrSdkError(Exception):
    pass

_UniffiTempNostrSdkError = NostrSdkError

class NostrSdkError:  # type: ignore
    class Generic(_UniffiTempNostrSdkError):

        def __repr__(self):
            return "NostrSdkError.Generic({})".format(repr(str(self)))
    _UniffiTempNostrSdkError.Generic = Generic # type: ignore

NostrSdkError = _UniffiTempNostrSdkError # type: ignore
del _UniffiTempNostrSdkError


class _UniffiConverterTypeNostrSdkError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return NostrSdkError.Generic(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, NostrSdkError.Generic):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, NostrSdkError.Generic):
            buf.write_i32(1)





class ProxyTarget(enum.Enum):
    """
    Proxy target
    """

    ALL = 0
    """
    Use proxy for all relays
    """

    
    ONION = 1
    """
    Use proxy only for `.onion` relays
    """

    


class _UniffiConverterTypeProxyTarget(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return ProxyTarget.ALL
        if variant == 2:
            return ProxyTarget.ONION
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == ProxyTarget.ALL:
            return
        if value == ProxyTarget.ONION:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == ProxyTarget.ALL:
            buf.write_i32(1)
        if value == ProxyTarget.ONION:
            buf.write_i32(2)







class RelayStatus(enum.Enum):
    INITIALIZED = 0
    """
    Relay initialized
    """

    
    PENDING = 1
    """
    Pending
    """

    
    CONNECTING = 2
    """
    Connecting
    """

    
    CONNECTED = 3
    """
    Relay connected
    """

    
    DISCONNECTED = 4
    """
    Relay disconnected, will retry to connect again
    """

    
    STOPPED = 5
    """
    Stop
    """

    
    TERMINATED = 6
    """
    Relay completely disconnected
    """

    


class _UniffiConverterTypeRelayStatus(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return RelayStatus.INITIALIZED
        if variant == 2:
            return RelayStatus.PENDING
        if variant == 3:
            return RelayStatus.CONNECTING
        if variant == 4:
            return RelayStatus.CONNECTED
        if variant == 5:
            return RelayStatus.DISCONNECTED
        if variant == 6:
            return RelayStatus.STOPPED
        if variant == 7:
            return RelayStatus.TERMINATED
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == RelayStatus.INITIALIZED:
            return
        if value == RelayStatus.PENDING:
            return
        if value == RelayStatus.CONNECTING:
            return
        if value == RelayStatus.CONNECTED:
            return
        if value == RelayStatus.DISCONNECTED:
            return
        if value == RelayStatus.STOPPED:
            return
        if value == RelayStatus.TERMINATED:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == RelayStatus.INITIALIZED:
            buf.write_i32(1)
        if value == RelayStatus.PENDING:
            buf.write_i32(2)
        if value == RelayStatus.CONNECTING:
            buf.write_i32(3)
        if value == RelayStatus.CONNECTED:
            buf.write_i32(4)
        if value == RelayStatus.DISCONNECTED:
            buf.write_i32(5)
        if value == RelayStatus.STOPPED:
            buf.write_i32(6)
        if value == RelayStatus.TERMINATED:
            buf.write_i32(7)





class CustomNostrDatabase(typing.Protocol):
    def backend(self, ):
        """
        Name of backend
        """

        raise NotImplementedError
    def save_event(self, event: "Event"):
        """
        Save [`Event`] into store

        Return `true` if event was successfully saved into database.

        **This method assume that [`Event`] was already verified**
        """

        raise NotImplementedError
    def has_event_already_been_saved(self, event_id: "EventId"):
        """
        Check if [`Event`] has already been saved
        """

        raise NotImplementedError
    def has_event_already_been_seen(self, event_id: "EventId"):
        """
        Check if [`EventId`] has already been seen
        """

        raise NotImplementedError
    def has_event_id_been_deleted(self, event_id: "EventId"):
        """
        Check if [`EventId`] has been deleted
        """

        raise NotImplementedError
    def has_coordinate_been_deleted(self, coordinate: "Coordinate",timestamp: "Timestamp"):
        """
        Check if event with [`Coordinate`] has been deleted before [`Timestamp`]
        """

        raise NotImplementedError
    def event_id_seen(self, event_id: "EventId",relay_url: "str"):
        """
        Set [`EventId`] as seen by relay

        Useful for NIP65 (aka gossip)
        """

        raise NotImplementedError
    def event_seen_on_relays(self, event_id: "EventId"):
        """
        Get list of relays that have seen the [`EventId`]
        """

        raise NotImplementedError
    def event_by_id(self, event_id: "EventId"):
        """
        Get [`Event`] by [`EventId`]
        """

        raise NotImplementedError
    def count(self, filters: "typing.List[Filter]"):
        """
        Count number of [`Event`] found by filters

        Use `Filter::new()` or `Filter::default()` to count all events.
        """

        raise NotImplementedError
    def query(self, filters: "typing.List[Filter]"):
        """
        Query store with filters
        """

        raise NotImplementedError
    def delete(self, filter: "Filter"):
        """
        Delete all events that match the `Filter`
        """

        raise NotImplementedError
    def wipe(self, ):
        """
        Wipe all data
        """

        raise NotImplementedError
# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class UniffiCallbackInterfaceFfiConverter:
    _handle_map = _UniffiHandleMap()

    @classmethod
    def lift(cls, handle):
        return cls._handle_map.get(handle)

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def check_lower(cls, cb):
        pass

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Put all the bits inside a class to keep the top-level namespace clean
class UniffiTraitImplCustomNostrDatabase:
    # For each method, generate a callback function to pass to Rust

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD0
    def backend(
            uniffi_handle,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = ()
            method = uniffi_obj.backend
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterString.lower(v)
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD1
    def save_event(
            uniffi_handle,
            event,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEvent.lift(event), )
            method = uniffi_obj.save_event
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBool.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD2
    def has_event_already_been_saved(
            uniffi_handle,
            event_id,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEventId.lift(event_id), )
            method = uniffi_obj.has_event_already_been_saved
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBool.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD3
    def has_event_already_been_seen(
            uniffi_handle,
            event_id,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEventId.lift(event_id), )
            method = uniffi_obj.has_event_already_been_seen
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBool.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD4
    def has_event_id_been_deleted(
            uniffi_handle,
            event_id,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEventId.lift(event_id), )
            method = uniffi_obj.has_event_id_been_deleted
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBool.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD5
    def has_coordinate_been_deleted(
            uniffi_handle,
            coordinate,
            timestamp,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeCoordinate.lift(coordinate), _UniffiConverterTypeTimestamp.lift(timestamp), )
            method = uniffi_obj.has_coordinate_been_deleted
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterBool.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD6
    def event_id_seen(
            uniffi_handle,
            event_id,
            relay_url,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEventId.lift(event_id), _UniffiConverterString.lift(relay_url), )
            method = uniffi_obj.event_id_seen
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD7
    def event_seen_on_relays(
            uniffi_handle,
            event_id,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEventId.lift(event_id), )
            method = uniffi_obj.event_seen_on_relays
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterOptionalSequenceString.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD8
    def event_by_id(
            uniffi_handle,
            event_id,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEventId.lift(event_id), )
            method = uniffi_obj.event_by_id
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterTypeEvent.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD9
    def count(
            uniffi_handle,
            filters,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterSequenceTypeFilter.lift(filters), )
            method = uniffi_obj.count
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterUInt64.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD10
    def query(
            uniffi_handle,
            filters,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterSequenceTypeFilter.lift(filters), )
            method = uniffi_obj.query
            return method(*args)

        
        def write_return_value(v):
            uniffi_out_return[0] = _UniffiConverterSequenceTypeEvent.lower(v)
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD11
    def delete(
            uniffi_handle,
            filter,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeFilter.lift(filter), )
            method = uniffi_obj.delete
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_CUSTOM_NOSTR_DATABASE_METHOD12
    def wipe(
            uniffi_handle,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.get(uniffi_handle)
        def make_call():
            args = ()
            method = uniffi_obj.wipe
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                NostrSdkError,
                _UniffiConverterTypeNostrSdkError.lower,
        )

    @UNIFFI_CALLBACK_INTERFACE_FREE
    def uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceCustomNostrDatabase._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    uniffi_vtable = UniffiVTableCallbackInterfaceCustomNostrDatabase(
        backend,
        save_event,
        has_event_already_been_saved,
        has_event_already_been_seen,
        has_event_id_been_deleted,
        has_coordinate_been_deleted,
        event_id_seen,
        event_seen_on_relays,
        event_by_id,
        count,
        query,
        delete,
        wipe,
        uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_customnostrdatabase(ctypes.byref(uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceCustomNostrDatabase = UniffiCallbackInterfaceFfiConverter()



class HandleNotification(typing.Protocol):
    def handle_msg(self, relay_url: "str",msg: "RelayMessage"):
        raise NotImplementedError
    def handle(self, relay_url: "str",subscription_id: "str",event: "Event"):
        raise NotImplementedError


# Put all the bits inside a class to keep the top-level namespace clean
class UniffiTraitImplHandleNotification:
    # For each method, generate a callback function to pass to Rust

    @UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD0
    def handle_msg(
            uniffi_handle,
            relay_url,
            msg,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceHandleNotification._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterString.lift(relay_url), _UniffiConverterTypeRelayMessage.lift(msg), )
            method = uniffi_obj.handle_msg
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @UNIFFI_CALLBACK_INTERFACE_HANDLE_NOTIFICATION_METHOD1
    def handle(
            uniffi_handle,
            relay_url,
            subscription_id,
            event,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterCallbackInterfaceHandleNotification._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterString.lift(relay_url), _UniffiConverterString.lift(subscription_id), _UniffiConverterTypeEvent.lift(event), )
            method = uniffi_obj.handle
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
        )

    @UNIFFI_CALLBACK_INTERFACE_FREE
    def uniffi_free(uniffi_handle):
        _UniffiConverterCallbackInterfaceHandleNotification._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    uniffi_vtable = UniffiVTableCallbackInterfaceHandleNotification(
        handle_msg,
        handle,
        uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_nostr_sdk_ffi_fn_init_callback_vtable_handlenotification(ctypes.byref(uniffi_vtable))

# The _UniffiConverter which transforms the Callbacks in to Handles to pass to Rust.
_UniffiConverterCallbackInterfaceHandleNotification = UniffiCallbackInterfaceFfiConverter()



class _UniffiConverterOptionalUInt16(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt16.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt16.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt16.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalUInt32(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterUInt32.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterUInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterUInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalDuration(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterDuration.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterDuration.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterDuration.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeNostrSigner(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeNostrSigner.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeNostrSigner.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeNostrSigner.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeRelayOptions(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeRelayOptions.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeRelayOptions.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeRelayOptions.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeSubscribeAutoCloseOptions(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeSubscribeAutoCloseOptions.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeSubscribeAutoCloseOptions.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeSubscribeAutoCloseOptions.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeZapDetails(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeZapDetails.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeZapDetails.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeZapDetails.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalSequenceTypeFilter(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterSequenceTypeFilter.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterSequenceTypeFilter.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterSequenceTypeFilter.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeEventId(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeEventId.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeEventId.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeEventId.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeTimestamp(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeTimestamp.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeTimestamp.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeTimestamp.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeNegentropyItem(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeNegentropyItem.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeNegentropyItem.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeNegentropyItem.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeClientMessage(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeClientMessage.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeClientMessage.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeClientMessage.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeEvent(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeEvent.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeEvent.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeEvent.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeEventId(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeEventId.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeEventId.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeEventId.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeFilter(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeFilter.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeFilter.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeFilter.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeLookupInvoiceResponseResult(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeLookupInvoiceResponseResult.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeLookupInvoiceResponseResult.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeLookupInvoiceResponseResult.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypePublicKey(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypePublicKey.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypePublicKey.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypePublicKey.read(buf) for i in range(count)
        ]



class _UniffiConverterMapStringTypeRelay(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterTypeRelay.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterTypeRelay.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterTypeRelay.read(buf)
            d[key] = val
        return d



class _UniffiConverterMapStringSequenceTypeFilter(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, items):
        for (key, value) in items.items():
            _UniffiConverterString.check_lower(key)
            _UniffiConverterSequenceTypeFilter.check_lower(value)

    @classmethod
    def write(cls, items, buf):
        buf.write_i32(len(items))
        for (key, value) in items.items():
            _UniffiConverterString.write(key, buf)
            _UniffiConverterSequenceTypeFilter.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = _UniffiConverterString.read(buf)
            val = _UniffiConverterSequenceTypeFilter.read(buf)
            d[key] = val
        return d

# External type ClientMessage is in namespace "nostr_ffi", crate nostr_ffi




# External type Coordinate is in namespace "nostr_ffi", crate nostr_ffi




# External type Event is in namespace "nostr_ffi", crate nostr_ffi




# External type EventBuilder is in namespace "nostr_ffi", crate nostr_ffi




# External type EventId is in namespace "nostr_ffi", crate nostr_ffi




# External type FileMetadata is in namespace "nostr_ffi", crate nostr_ffi




# External type Filter is in namespace "nostr_ffi", crate nostr_ffi




# External type GetInfoResponseResult is in namespace "nostr_ffi", crate nostr_ffi




# External type Keys is in namespace "nostr_ffi", crate nostr_ffi




# External type ListTransactionsRequestParams is in namespace "nostr_ffi", crate nostr_ffi




# External type LookupInvoiceRequestParams is in namespace "nostr_ffi", crate nostr_ffi




# External type LookupInvoiceResponseResult is in namespace "nostr_ffi", crate nostr_ffi




# External type MakeInvoiceRequestParams is in namespace "nostr_ffi", crate nostr_ffi




# External type MakeInvoiceResponseResult is in namespace "nostr_ffi", crate nostr_ffi




# External type Metadata is in namespace "nostr_ffi", crate nostr_ffi




# External type NostrConnectURI is in namespace "nostr_ffi", crate nostr_ffi




# External type NostrWalletConnectURI is in namespace "nostr_ffi", crate nostr_ffi




# External type PayKeysendRequestParams is in namespace "nostr_ffi", crate nostr_ffi




# External type PayKeysendResponseResult is in namespace "nostr_ffi", crate nostr_ffi




# External type PublicKey is in namespace "nostr_ffi", crate nostr_ffi




# External type RelayInformationDocument is in namespace "nostr_ffi", crate nostr_ffi




# External type RelayMessage is in namespace "nostr_ffi", crate nostr_ffi




# External type Timestamp is in namespace "nostr_ffi", crate nostr_ffi




# External type UnsignedEvent is in namespace "nostr_ffi", crate nostr_ffi




# External type ZapType is in namespace "nostr_ffi", crate nostr_ffi




# Async support

def init_logger(level: "LogLevel") -> None:
    _UniffiConverterTypeLogLevel.check_lower(level)
    
    _rust_call(_UniffiLib.uniffi_nostr_sdk_ffi_fn_func_init_logger,
        _UniffiConverterTypeLogLevel.lower(level))


__all__ = [
    "InternalError",
    "FilterOptions",
    "LogLevel",
    "NegentropyDirection",
    "NostrSdkError",
    "ProxyTarget",
    "RelayStatus",
    "NegentropyItem",
    "init_logger",
    "AbortHandle",
    "Client",
    "ClientBuilder",
    "Nwc",
    "NegentropyOptions",
    "Nip46Signer",
    "NostrDatabase",
    "NostrSigner",
    "NostrWalletConnectOptions",
    "NostrZapper",
    "Options",
    "Profile",
    "Proxy",
    "Relay",
    "RelayBlacklist",
    "RelayConnectionStats",
    "RelayLimits",
    "RelayOptions",
    "RelayPool",
    "RelaySendOptions",
    "SubscribeAutoCloseOptions",
    "SubscribeOptions",
    "ZapDetails",
    "ZapEntity",
    "CustomNostrDatabase",
    "HandleNotification",
]

