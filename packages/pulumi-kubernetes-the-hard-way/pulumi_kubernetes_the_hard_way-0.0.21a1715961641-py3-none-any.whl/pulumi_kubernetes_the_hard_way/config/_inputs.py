# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *
import pulumi_kubernetes

__all__ = [
    'KubeconfigAdminOptions',
    'KubeconfigKubeControllerManagerOptions',
    'KubeconfigKubeProxyOptions',
    'KubeconfigKubeSchedulerOptions',
    'KubeconfigWorkerOptions',
    'PodManifestArgs',
]

@pulumi.input_type
class KubeconfigAdminOptions:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[str] = None):
        pulumi.set(__self__, "type", 'admin')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[str]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigKubeControllerManagerOptions:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[str] = None):
        pulumi.set(__self__, "type", 'kube-controller-manager')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[str]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigKubeProxyOptions:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[str] = None):
        pulumi.set(__self__, "type", 'kube-proxy')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[str]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigKubeSchedulerOptions:
    def __init__(__self__, *,
                 type: str,
                 public_ip: Optional[str] = None):
        pulumi.set(__self__, "type", 'kube-scheduler')
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: str):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[str]):
        pulumi.set(self, "public_ip", value)


@pulumi.input_type
class KubeconfigWorkerOptions:
    def __init__(__self__, *,
                 name: str,
                 public_ip: str,
                 type: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_ip", public_ip)
        if type is not None:
            pulumi.set(__self__, "type", 'worker')

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: str):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class PodManifestArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['pulumi_kubernetes.meta.v1.ObjectMetaArgs']] = None,
                 spec: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSpecArgs']] = None,
                 status: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodStatusArgs']] = None):
        """
        Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.

        This resource waits until its status is ready before registering success
        for create/update, and populating output properties from the current state of the resource.
        The following conditions are used to determine whether the resource creation has
        succeeded or failed:

        1. The Pod is scheduled ("PodScheduled"" '.status.condition' is true).
        2. The Pod is initialized ("Initialized" '.status.condition' is true).
        3. The Pod is ready ("Ready" '.status.condition' is true) and the '.status.phase' is
           set to "Running".
        Or (for Jobs): The Pod succeeded ('.status.phase' set to "Succeeded").

        If the Pod has not reached a Ready state after 10 minutes, it will
        time out and mark the resource update as Failed. You can override the default timeout value
        by setting the 'customTimeouts' option on the resource.

        {{% examples %}}
        ## Example Usage
        {{% example %}}
        ### Create a Pod with auto-naming

        ```typescript
        import * as pulumi from "@pulumi/pulumi";
        import * as kubernetes from "@pulumi/kubernetes";

        const pod = new kubernetes.core.v1.Pod("pod", {spec: {
            containers: [{
                image: "nginx:1.14.2",
                name: "nginx",
                ports: [{
                    containerPort: 80,
                }],
            }],
        }});
        ```
        ```python
        import pulumi
        import pulumi_kubernetes as kubernetes

        pod = kubernetes.core.v1.Pod("pod", spec=kubernetes.core.v1.PodSpecArgs(
            containers=[kubernetes.core.v1.ContainerArgs(
                image="nginx:1.14.2",
                name="nginx",
                ports=[kubernetes.core.v1.ContainerPortArgs(
                    container_port=80,
                )],
            )],
        ))
        ```
        ```csharp
        using System.Collections.Generic;
        using System.Linq;
        using Pulumi;
        using Kubernetes = Pulumi.Kubernetes;

        return await Deployment.RunAsync(() => 
        {
            var pod = new Kubernetes.Core.V1.Pod("pod", new()
            {
                Spec = new Kubernetes.Types.Inputs.Core.V1.PodSpecArgs
                {
                    Containers = new[]
                    {
                        new Kubernetes.Types.Inputs.Core.V1.ContainerArgs
                        {
                            Image = "nginx:1.14.2",
                            Name = "nginx",
                            Ports = new[]
                            {
                                new Kubernetes.Types.Inputs.Core.V1.ContainerPortArgs
                                {
                                    ContainerPortValue = 80,
                                },
                            },
                        },
                    },
                },
            });

        });

        ```
        ```go
        package main

        import (
        	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
        	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        )

        func main() {
        	pulumi.Run(func(ctx *pulumi.Context) error {
        		_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
        			Spec: &corev1.PodSpecArgs{
        				Containers: corev1.ContainerArray{
        					&corev1.ContainerArgs{
        						Image: pulumi.String("nginx:1.14.2"),
        						Name:  pulumi.String("nginx"),
        						Ports: corev1.ContainerPortArray{
        							&corev1.ContainerPortArgs{
        								ContainerPort: pulumi.Int(80),
        							},
        						},
        					},
        				},
        			},
        		})
        		if err != nil {
        			return err
        		}
        		return nil
        	})
        }
        ```
        ```java
        package generated_program;

        import com.pulumi.Context;
        import com.pulumi.Pulumi;
        import com.pulumi.core.Output;
        import com.pulumi.kubernetes.core_v1.Pod;
        import com.pulumi.kubernetes.core_v1.PodArgs;
        import com.pulumi.kubernetes.core_v1.inputs.PodSpecArgs;
        import java.util.List;
        import java.util.ArrayList;
        import java.util.Map;
        import java.io.File;
        import java.nio.file.Files;
        import java.nio.file.Paths;

        public class App {
            public static void main(String[] args) {
                Pulumi.run(App::stack);
            }

            public static void stack(Context ctx) {
                var pod = new Pod("pod", PodArgs.builder()        
                    .spec(PodSpecArgs.builder()
                        .containers(ContainerArgs.builder()
                            .image("nginx:1.14.2")
                            .name("nginx")
                            .ports(ContainerPortArgs.builder()
                                .containerPort(80)
                                .build())
                            .build())
                        .build())
                    .build());

            }
        }
        ```
        ```yaml
        description: Create a Pod with auto-naming
        name: yaml-example
        resources:
            pod:
                properties:
                    spec:
                        containers:
                            - image: nginx:1.14.2
                              name: nginx
                              ports:
                                - containerPort: 80
                type: kubernetes:core/v1:Pod
        runtime: yaml
        ```
        {{% /example %}}
        {{% example %}}
        ### Create a Pod with a user-specified name

        ```typescript
        import * as pulumi from "@pulumi/pulumi";
        import * as kubernetes from "@pulumi/kubernetes";

        const pod = new kubernetes.core.v1.Pod("pod", {
            metadata: {
                name: "nginx",
            },
            spec: {
                containers: [{
                    image: "nginx:1.14.2",
                    name: "nginx",
                    ports: [{
                        containerPort: 80,
                    }],
                }],
            },
        });
        ```
        ```python
        import pulumi
        import pulumi_kubernetes as kubernetes

        pod = kubernetes.core.v1.Pod("pod",
            metadata=kubernetes.meta.v1.ObjectMetaArgs(
                name="nginx",
            ),
            spec=kubernetes.core.v1.PodSpecArgs(
                containers=[kubernetes.core.v1.ContainerArgs(
                    image="nginx:1.14.2",
                    name="nginx",
                    ports=[kubernetes.core.v1.ContainerPortArgs(
                        container_port=80,
                    )],
                )],
            ))
        ```
        ```csharp
        using System.Collections.Generic;
        using System.Linq;
        using Pulumi;
        using Kubernetes = Pulumi.Kubernetes;

        return await Deployment.RunAsync(() => 
        {
            var pod = new Kubernetes.Core.V1.Pod("pod", new()
            {
                Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs
                {
                    Name = "nginx",
                },
                Spec = new Kubernetes.Types.Inputs.Core.V1.PodSpecArgs
                {
                    Containers = new[]
                    {
                        new Kubernetes.Types.Inputs.Core.V1.ContainerArgs
                        {
                            Image = "nginx:1.14.2",
                            Name = "nginx",
                            Ports = new[]
                            {
                                new Kubernetes.Types.Inputs.Core.V1.ContainerPortArgs
                                {
                                    ContainerPortValue = 80,
                                },
                            },
                        },
                    },
                },
            });

        });

        ```
        ```go
        package main

        import (
        	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1"
        	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
        	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        )

        func main() {
        	pulumi.Run(func(ctx *pulumi.Context) error {
        		_, err := corev1.NewPod(ctx, "pod", &corev1.PodArgs{
        			Metadata: &metav1.ObjectMetaArgs{
        				Name: pulumi.String("nginx"),
        			},
        			Spec: &corev1.PodSpecArgs{
        				Containers: corev1.ContainerArray{
        					&corev1.ContainerArgs{
        						Image: pulumi.String("nginx:1.14.2"),
        						Name:  pulumi.String("nginx"),
        						Ports: corev1.ContainerPortArray{
        							&corev1.ContainerPortArgs{
        								ContainerPort: pulumi.Int(80),
        							},
        						},
        					},
        				},
        			},
        		})
        		if err != nil {
        			return err
        		}
        		return nil
        	})
        }
        ```
        ```java
        package generated_program;

        import com.pulumi.Context;
        import com.pulumi.Pulumi;
        import com.pulumi.core.Output;
        import com.pulumi.kubernetes.core_v1.Pod;
        import com.pulumi.kubernetes.core_v1.PodArgs;
        import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
        import com.pulumi.kubernetes.core_v1.inputs.PodSpecArgs;
        import java.util.List;
        import java.util.ArrayList;
        import java.util.Map;
        import java.io.File;
        import java.nio.file.Files;
        import java.nio.file.Paths;

        public class App {
            public static void main(String[] args) {
                Pulumi.run(App::stack);
            }

            public static void stack(Context ctx) {
                var pod = new Pod("pod", PodArgs.builder()        
                    .metadata(ObjectMetaArgs.builder()
                        .name("nginx")
                        .build())
                    .spec(PodSpecArgs.builder()
                        .containers(ContainerArgs.builder()
                            .image("nginx:1.14.2")
                            .name("nginx")
                            .ports(ContainerPortArgs.builder()
                                .containerPort(80)
                                .build())
                            .build())
                        .build())
                    .build());

            }
        }
        ```
        ```yaml
        description: Create a Pod with a user-specified name
        name: yaml-example
        resources:
            pod:
                properties:
                    metadata:
                        name: nginx
                    spec:
                        containers:
                            - image: nginx:1.14.2
                              name: nginx
                              ports:
                                - containerPort: 80
                type: kubernetes:core/v1:Pod
        runtime: yaml
        ```
        {{% /example %}}
        {{% /examples %}}

        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['pulumi_kubernetes.meta.v1.ObjectMetaArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        :param pulumi.Input['pulumi_kubernetes.core.v1.PodSpecArgs'] spec: Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        :param pulumi.Input['pulumi_kubernetes.core.v1.PodStatusArgs'] status: Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", 'v1')
        if kind is not None:
            pulumi.set(__self__, "kind", 'Pod')
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['pulumi_kubernetes.meta.v1.ObjectMetaArgs']]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['pulumi_kubernetes.meta.v1.ObjectMetaArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSpecArgs']]:
        """
        Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodSpecArgs']]):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodStatusArgs']]:
        """
        Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['pulumi_kubernetes.core.v1.PodStatusArgs']]):
        pulumi.set(self, "status", value)


