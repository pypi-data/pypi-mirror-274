# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *
import pulumi_command

__all__ = [
    'CniBridgeIpam',
    'EtcdConfigurationProps',
    'EtcdNode',
    'SystemdInstallSection',
    'SystemdServiceSection',
    'SystemdUnitSection',
]

@pulumi.output_type
class CniBridgeIpam(dict):
    """
    The CNI plugins IPAM
    """
    def __init__(__self__, *,
                 ranges: Optional[Sequence[Mapping[str, str]]] = None,
                 routes: Optional[Sequence[Mapping[str, str]]] = None,
                 type: Optional[str] = None):
        """
        The CNI plugins IPAM
        :param Sequence[Mapping[str, str]] ranges: IPAM ranges.
        :param Sequence[Mapping[str, str]] routes: IPAM routes.
        :param str type: CNI bridge IPAM type
        """
        if ranges is not None:
            pulumi.set(__self__, "ranges", ranges)
        if routes is not None:
            pulumi.set(__self__, "routes", routes)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ranges(self) -> Optional[Sequence[Mapping[str, str]]]:
        """
        IPAM ranges.
        """
        return pulumi.get(self, "ranges")

    @property
    @pulumi.getter
    def routes(self) -> Optional[Sequence[Mapping[str, str]]]:
        """
        IPAM routes.
        """
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        CNI bridge IPAM type
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class EtcdConfigurationProps(dict):
    """
    Props for resources that consume etcd configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caFilePath":
            suggest = "ca_file_path"
        elif key == "certFilePath":
            suggest = "cert_file_path"
        elif key == "dataDirectory":
            suggest = "data_directory"
        elif key == "etcdPath":
            suggest = "etcd_path"
        elif key == "internalIp":
            suggest = "internal_ip"
        elif key == "keyFilePath":
            suggest = "key_file_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EtcdConfigurationProps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EtcdConfigurationProps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EtcdConfigurationProps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_file_path: str,
                 cert_file_path: str,
                 data_directory: str,
                 etcd_path: str,
                 internal_ip: str,
                 key_file_path: str,
                 name: str):
        """
        Props for resources that consume etcd configuration.
        :param str ca_file_path: Path to the certificate authority file on the remote system.
        :param str cert_file_path: Path to the certificate file on the remote system.
        :param str data_directory: Etcd's data directory.
        :param str etcd_path: Path to the etcd binary.
        :param str internal_ip: Internal IP of the etcd node.
        :param str key_file_path: Path to the private key file on the remote system.
        :param str name: Name of the etcd node.
        """
        pulumi.set(__self__, "ca_file_path", ca_file_path)
        pulumi.set(__self__, "cert_file_path", cert_file_path)
        pulumi.set(__self__, "data_directory", data_directory)
        pulumi.set(__self__, "etcd_path", etcd_path)
        pulumi.set(__self__, "internal_ip", internal_ip)
        pulumi.set(__self__, "key_file_path", key_file_path)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="caFilePath")
    def ca_file_path(self) -> str:
        """
        Path to the certificate authority file on the remote system.
        """
        return pulumi.get(self, "ca_file_path")

    @property
    @pulumi.getter(name="certFilePath")
    def cert_file_path(self) -> str:
        """
        Path to the certificate file on the remote system.
        """
        return pulumi.get(self, "cert_file_path")

    @property
    @pulumi.getter(name="dataDirectory")
    def data_directory(self) -> str:
        """
        Etcd's data directory.
        """
        return pulumi.get(self, "data_directory")

    @property
    @pulumi.getter(name="etcdPath")
    def etcd_path(self) -> str:
        """
        Path to the etcd binary.
        """
        return pulumi.get(self, "etcd_path")

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> str:
        """
        Internal IP of the etcd node.
        """
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter(name="keyFilePath")
    def key_file_path(self) -> str:
        """
        Path to the private key file on the remote system.
        """
        return pulumi.get(self, "key_file_path")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the etcd node.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class EtcdNode(dict):
    """
    Etcd node description.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internalIp":
            suggest = "internal_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EtcdNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EtcdNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EtcdNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection: 'pulumi_command.remote.outputs.Connection',
                 internal_ip: str,
                 architecture: Optional['Architecture'] = None):
        """
        Etcd node description.
        :param 'pulumi_command.remote.Connection' connection: The parameters with which to connect to the remote host.
        :param str internal_ip: The internal IP of the node.
        :param 'Architecture' architecture: The CPU architecture of the node.
        """
        pulumi.set(__self__, "connection", connection)
        pulumi.set(__self__, "internal_ip", internal_ip)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)

    @property
    @pulumi.getter
    def connection(self) -> 'pulumi_command.remote.outputs.Connection':
        """
        The parameters with which to connect to the remote host.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="internalIp")
    def internal_ip(self) -> str:
        """
        The internal IP of the node.
        """
        return pulumi.get(self, "internal_ip")

    @property
    @pulumi.getter
    def architecture(self) -> Optional['Architecture']:
        """
        The CPU architecture of the node.
        """
        return pulumi.get(self, "architecture")


@pulumi.output_type
class SystemdInstallSection(dict):
    """
    https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BInstall%5D%20Section%20Options
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wantedBy":
            suggest = "wanted_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemdInstallSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemdInstallSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemdInstallSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 wanted_by: Optional[Sequence[str]] = None):
        """
        https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#%5BInstall%5D%20Section%20Options
        :param Sequence[str] wanted_by: A symbolic link is created in the .wants/, .requires/, or .upholds/ directory of each of the listed units when this unit is installed by systemctl enable.
        """
        if wanted_by is not None:
            pulumi.set(__self__, "wanted_by", wanted_by)

    @property
    @pulumi.getter(name="wantedBy")
    def wanted_by(self) -> Optional[Sequence[str]]:
        """
        A symbolic link is created in the .wants/, .requires/, or .upholds/ directory of each of the listed units when this unit is installed by systemctl enable.
        """
        return pulumi.get(self, "wanted_by")


@pulumi.output_type
class SystemdServiceSection(dict):
    """
    https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "execStart":
            suggest = "exec_start"
        elif key == "exitType":
            suggest = "exit_type"
        elif key == "restartSec":
            suggest = "restart_sec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemdServiceSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemdServiceSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemdServiceSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_start: Optional[str] = None,
                 exit_type: Optional['SystemdServiceExitType'] = None,
                 restart: Optional['SystemdServiceRestart'] = None,
                 restart_sec: Optional[str] = None,
                 type: Optional['SystemdServiceType'] = None):
        """
        https://www.freedesktop.org/software/systemd/man/latest/systemd.service.html#
        :param str exec_start: Commands that are executed when this service is started.
        :param 'SystemdServiceExitType' exit_type: Specifies when the manager should consider the service to be finished.
        :param 'SystemdServiceRestart' restart: Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
        :param str restart_sec: Configures the time to sleep before restarting a service (as configured with Restart=).
        :param 'SystemdServiceType' type: Configures the mechanism via which the service notifies the manager that the service start-up has finished.
        """
        if exec_start is not None:
            pulumi.set(__self__, "exec_start", exec_start)
        if exit_type is not None:
            pulumi.set(__self__, "exit_type", exit_type)
        if restart is not None:
            pulumi.set(__self__, "restart", restart)
        if restart_sec is not None:
            pulumi.set(__self__, "restart_sec", restart_sec)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="execStart")
    def exec_start(self) -> Optional[str]:
        """
        Commands that are executed when this service is started.
        """
        return pulumi.get(self, "exec_start")

    @property
    @pulumi.getter(name="exitType")
    def exit_type(self) -> Optional['SystemdServiceExitType']:
        """
        Specifies when the manager should consider the service to be finished.
        """
        return pulumi.get(self, "exit_type")

    @property
    @pulumi.getter
    def restart(self) -> Optional['SystemdServiceRestart']:
        """
        Configures whether the service shall be restarted when the service process exits, is killed, or a timeout is reached.
        """
        return pulumi.get(self, "restart")

    @property
    @pulumi.getter(name="restartSec")
    def restart_sec(self) -> Optional[str]:
        """
        Configures the time to sleep before restarting a service (as configured with Restart=).
        """
        return pulumi.get(self, "restart_sec")

    @property
    @pulumi.getter
    def type(self) -> Optional['SystemdServiceType']:
        """
        Configures the mechanism via which the service notifies the manager that the service start-up has finished.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SystemdUnitSection(dict):
    """
    https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bindsTo":
            suggest = "binds_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SystemdUnitSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SystemdUnitSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SystemdUnitSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 binds_to: Optional[Sequence[str]] = None,
                 description: Optional[str] = None,
                 documentation: Optional[Sequence[str]] = None,
                 requires: Optional[Sequence[str]] = None,
                 requisite: Optional[Sequence[str]] = None,
                 wants: Optional[Sequence[str]] = None):
        """
        https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html#
        :param Sequence[str] binds_to: Configures requirement dependencies, very similar in style to Requires=.
        :param str description: A short human readable title of the unit.
        :param Sequence[str] documentation: A space-separated list of URIs referencing documentation for this unit or its configuration.
        :param Sequence[str] requires: Similar to Wants=, but declares a stronger requirement dependency.
        :param Sequence[str] requisite: Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately.
        :param Sequence[str] wants: Configures (weak) requirement dependencies on other units.
        """
        if binds_to is not None:
            pulumi.set(__self__, "binds_to", binds_to)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if documentation is not None:
            pulumi.set(__self__, "documentation", documentation)
        if requires is not None:
            pulumi.set(__self__, "requires", requires)
        if requisite is not None:
            pulumi.set(__self__, "requisite", requisite)
        if wants is not None:
            pulumi.set(__self__, "wants", wants)

    @property
    @pulumi.getter(name="bindsTo")
    def binds_to(self) -> Optional[Sequence[str]]:
        """
        Configures requirement dependencies, very similar in style to Requires=.
        """
        return pulumi.get(self, "binds_to")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A short human readable title of the unit.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def documentation(self) -> Optional[Sequence[str]]:
        """
        A space-separated list of URIs referencing documentation for this unit or its configuration.
        """
        return pulumi.get(self, "documentation")

    @property
    @pulumi.getter
    def requires(self) -> Optional[Sequence[str]]:
        """
        Similar to Wants=, but declares a stronger requirement dependency.
        """
        return pulumi.get(self, "requires")

    @property
    @pulumi.getter
    def requisite(self) -> Optional[Sequence[str]]:
        """
        Similar to Requires=. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately.
        """
        return pulumi.get(self, "requisite")

    @property
    @pulumi.getter
    def wants(self) -> Optional[Sequence[str]]:
        """
        Configures (weak) requirement dependencies on other units.
        """
        return pulumi.get(self, "wants")


